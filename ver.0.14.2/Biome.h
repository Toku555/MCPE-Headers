#pragma once
class Biome{
	public:
		Biome(int,Biome::BiomeType,std::unique_ptr<BiomeDecorator,std::default_delete<BiomeDecorator>>);
		void LoadInstanceData(LevelStorage &);
		void ResetInstanceData(void);
		void SaveInstanceData(LevelStorage &);
		void _placeBedrock(Random &,LevelChunk &,BlockPos const&);
		void adjustDepth(float);
		void adjustScale(float);
		void buildSurfaceAt(Random &,LevelChunk &,BlockPos const&,float);
		void buildSurfaceAtDefault(Random &,LevelChunk &,BlockPos const&,float);
		void clearMobs(bool,bool,bool);
		void createMutatedCopy(int);
		void createMutatedCopy(void);
		void decorate(BlockSource *,Random &,BlockPos const&,bool,float);
		void getBiome(int);
		void getBiome(int,Biome*);
		void getBiomeType(void);
		void getCreatureProbability(void);
		void getDownfall(void);
		void getDownfallInt(void);
		void getFoliageColor(void);
		void getGrassColor(BlockPos const&);
		void getGrassFeature(Random *);
		void getMobs(EntityType);
		void getRandomFlowerTypeAndData(Random &,BlockPos const&);
		void getSkyColor(float);
		void getSnowAccumulationLayers(void);
		void getTemperature(void);
		void getTemperatureCategory(void);
		void getTreeFeature(Random *);
		void initBiomes(void);
		void isHumid(void);
		void isSame(Biome*);
		void isSnowCovered(void);
		void refreshBiome(uint);
		void refreshBiomes(uint);
		void setColor(int);
		void setColor(int,bool);
		void setDepthAndScale(Biome::BiomeHeight const&);
		void setLeafColor(int);
		void setName(std::string const&);
		void setNoRain(void);
		void setOddColor(int);
		void setSnowAccumulation(float,float);
		void setSnowCovered(void);
		void setTemperatureAndDownfall(float,float);
		void ~Biome();
		void ~Biome();
};

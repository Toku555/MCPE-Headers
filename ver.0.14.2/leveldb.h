#pragma once
class leveldb{
	public:
		void AppendInternalKey(std::string *,leveldb::ParsedInternalKey const&);
		void AllocateAligned(uint);
		void AllocateFallback(uint);
		void AllocateNewBlock(uint);
		void Arena(void);
		void ~Arena();
		void Block(leveldb::BlockContents const&);
		void CorruptionError(void);
		void Next(void);
		void Prev(void);
		void Seek(leveldb::Slice const&);
		void SeekToFirst(void);
		void SeekToLast(void);
		void Valid(void);
		void key(void);
		void status(void);
		void value(void);
		void ~Iter();
		void ~Iter();
		void NewIterator(leveldb::Comparator const*);
		void ~Block();
		void Add(leveldb::Slice const&,leveldb::Slice const&);
		void BlockBuilder(leveldb::Options const*);
		void CurrentSizeEstimate(void);
		void Finish(void);
		void Reset(void);
		void DecodeFrom(leveldb::Slice *);
		void EncodeTo(std::string *);
		void BuildTable(std::string const&,leveldb::Env *,leveldb::Options const&,leveldb::TableCache *,leveldb::Iterator *,leveldb::FileMetaData *);
		void BytewiseComparator(void);
		void ~Cache();
		void ~Cache();
		void AddInputDeletions(leveldb::VersionEdit *);
		void Compaction(int);
		void IsBaseLevelForKey(leveldb::Slice const&);
		void IsTrivialMove(void);
		void ReleaseInputs(void);
		void ShouldStopBefore(leveldb::Slice const&);
		void ~Compaction();
		void ~Comparator();
		void ~Comparator();
		void ~Compressor();
		void ~Compressor();
		void ConsumeDecimalNumber(leveldb::Slice *,ulong long *);
		void CurrentFileName(std::string const&);
		void Delete(leveldb::WriteOptions const&,leveldb::Slice const&);
		void Open(leveldb::Options const&,std::string const&,leveldb::DB**);
		void Put(leveldb::WriteOptions const&,leveldb::Slice const&,leveldb::Slice const&);
		void ~DB();
		void ~DB();
		void BGWork(void *);
		void BackgroundCall(void);
		void BuildBatchGroup(leveldb::DBImpl::Writer **);
		void CleanupCompaction(leveldb::DBImpl::CompactionState *);
		void CompactMemTable(void);
		void CompactRange(leveldb::Slice const*,leveldb::Slice const*);
		void DBImpl(leveldb::Options const&,std::string const&);
		void Delete(leveldb::WriteOptions const&,leveldb::Slice const&);
		void DeleteObsoleteFiles(void);
		void FinishCompactionOutputFile(leveldb::DBImpl::CompactionState *,leveldb::Iterator *);
		void Get(leveldb::ReadOptions const&,leveldb::Slice const&,std::string *);
		void GetApproximateSizes(leveldb::Range const*,int,ulong long *);
		void GetSnapshot(void);
		void InstallCompactionResults(leveldb::DBImpl::CompactionState *);
		void MakeRoomForWrite(bool);
		void MaybeIgnoreError(leveldb::Status *);
		void MaybeScheduleCompaction(void);
		void NewDB(void);
		void NewInternalIterator(leveldb::ReadOptions const&,ulong long *,uint *);
		void NewIterator(leveldb::ReadOptions const&);
		void OpenCompactionOutputFile(leveldb::DBImpl::CompactionState *);
		void Put(leveldb::WriteOptions const&,leveldb::Slice const&,leveldb::Slice const&);
		void RecordBackgroundError(leveldb::Status const&);
		void RecordReadSample(leveldb::Slice);
		void Recover(leveldb::VersionEdit *);
		void RecoverLogFile(ulong long,leveldb::VersionEdit *,ulong long *);
		void ReleaseSnapshot(leveldb::Snapshot const*);
		void TEST_CompactMemTable(void);
		void TEST_CompactRange(int,leveldb::Slice const*,leveldb::Slice const*);
		void TEST_MaxNextLevelOverlappingBytes(void);
		void TEST_NewInternalIterator(void);
		void Write(leveldb::WriteOptions const&,leveldb::WriteBatch *);
		void WriteLevel0Table(leveldb::MemTable *,leveldb::VersionEdit *,leveldb::Version *);
		void ~DBImpl();
		void ~DBImpl();
		void DestroyDB(std::string const&,leveldb::Options const&);
		void EncodeFixed32(char *,uint);
		void EncodeFixed64(char *,ulong long);
		void EncodeVarint32(char *,uint);
		void EncodeVarint64(char *,ulong long);
		void Default(void);
		void ~Env();
		void ~Env();
		void CreateDir(std::string const&);
		void DeleteDir(std::string const&);
		void DeleteFile(std::string const&);
		void FileExists(std::string const&);
		void GetChildren(std::string const&,std::vector<std::string,std::allocator<std::string>> *);
		void GetFileSize(std::string const&,ulong long *);
		void GetTestDirectory(std::string *);
		void LockFile(std::string const&,leveldb::FileLock **);
		void NewLogger(std::string const&,leveldb::Logger **);
		void NewRandomAccessFile(std::string const&,leveldb::RandomAccessFile **);
		void NewSequentialFile(std::string const&,leveldb::SequentialFile **);
		void NewWritableFile(std::string const&,leveldb::WritableFile **);
		void NowMicros(void);
		void RenameFile(std::string const&,std::string const&);
		void Schedule(void (*);
		void SleepForMicroseconds(int);
		void StartThread(void (*);
		void UnlockFile(leveldb::FileLock *);
		void ~EnvWrapper();
		void ~EnvWrapper();
		void EscapeString(leveldb::Slice const&);
		void ~FileLock();
		void ~FileLock();
		void AddKey(leveldb::Slice const&);
		void FilterBlockBuilder(leveldb::FilterPolicy const*);
		void Finish(void);
		void StartBlock(ulong long);
		void FilterBlockReader(leveldb::FilterPolicy const*,leveldb::Slice const&);
		void KeyMayMatch(ulong long,leveldb::Slice const&);
		void ~FilterPolicy();
		void ~FilterPolicy();
		void FindFile(leveldb::InternalKeyComparator const&,std::vector<leveldb::FileMetaData *,std::allocator<leveldb::FileMetaData *>> const&,leveldb::Slice const&);
		void DecodeFrom(leveldb::Slice *);
		void EncodeTo(std::string *);
		void GetLengthPrefixedSlice(char const*,char const*,leveldb::Slice *);
		void GetLengthPrefixedSlice(leveldb::Slice *,leveldb::Slice *);
		void GetVarint32(leveldb::Slice *,uint *);
		void GetVarint32PtrFallback(char const*,char const*,uint *);
		void GetVarint64(leveldb::Slice *,ulong long *);
		void GetVarint64Ptr(char const*,char const*,ulong long *);
		void Hash(char const*,uint,uint);
		void InfoLogFileName(std::string const&);
		void CreateFilter(leveldb::Slice const*,int,std::string *);
		void KeyMayMatch(leveldb::Slice const&,leveldb::Slice const&);
		void Name(void);
		void ~InternalFilterPolicy();
		void ~InternalFilterPolicy();
		void DebugString(void);
		void Compare(leveldb::Slice const&,leveldb::Slice const&);
		void FindShortSuccessor(std::string *);
		void FindShortestSeparator(std::string *,leveldb::Slice const&);
		void Name(void);
		void ~InternalKeyComparator();
		void ~InternalKeyComparator();
		void Iterator(void);
		void RegisterCleanup(void (*);
		void ~Iterator();
		void ~Iterator();
		void LockFileName(std::string const&);
		void Log(leveldb::Logger *,char const*,...);
		void ~Logger();
		void ~Logger();
		void LookupKey(leveldb::Slice const&,ulong long);
		void Add(ulong long,leveldb::ValueType,leveldb::Slice const&,leveldb::Slice const&);
		void ApproximateMemoryUsage(void);
		void Get(leveldb::LookupKey const&,std::string *,leveldb::Status *);
		void operator();
		void MemTable(leveldb::InternalKeyComparator const&);
		void NewIterator(void);
		void ~MemTable();
		void Next(void);
		void Prev(void);
		void Seek(leveldb::Slice const&);
		void SeekToFirst(void);
		void SeekToLast(void);
		void Valid(void);
		void key(void);
		void status(void);
		void value(void);
		void ~MemTableIterator();
		void ~MemTableIterator();
		void NewBloomFilterPolicy(int);
		void NewDBIterator(leveldb::DBImpl *,leveldb::Comparator const*,leveldb::Iterator *,ulong long,uint);
		void NewEmptyIterator(void);
		void NewErrorIterator(leveldb::Status const&);
		void NewLRUCache(uint);
		void NewMergingIterator(leveldb::Comparator const*,leveldb::Iterator **,int);
		void Iterator * (*);
		void NumberToString(ulong long);
		void OldInfoLogFileName(std::string const&);
		void Options(void);
		void ParseFileName(std::string const&,ulong long *,leveldb::FileType *);
		void DebugString(void);
		void ~PosixLogger();
		void ~PosixLogger();
		void PutFixed32(std::string *,uint);
		void PutLengthPrefixedSlice(std::string *,leveldb::Slice const&);
		void PutVarint32(std::string *,uint);
		void ~RandomAccessFile();
		void ~RandomAccessFile();
		void ReadBlock(leveldb::RandomAccessFile *,leveldb::Options const&,leveldb::ReadOptions const&,leveldb::BlockHandle const&,leveldb::BlockContents *);
		void ReadFileToString(leveldb::Env *,std::string const&,std::string *);
		void RepairDB(std::string const&,leveldb::Options const&);
		void SanitizeOptions(std::string const&,leveldb::InternalKeyComparator const*,leveldb::InternalFilterPolicy const*,leveldb::Options const&);
		void ~SequentialFile();
		void ~SequentialFile();
		void SetCurrentFile(leveldb::Env *,std::string const&,ulong long);
		void Insert(char const* const&);
		void ~Snapshot();
		void ~Snapshot();
		void ~SnapshotImpl();
		void ~SnapshotImpl();
		void SomeFileOverlapsRange(leveldb::InternalKeyComparator const&,bool,std::vector<leveldb::FileMetaData *,std::allocator<leveldb::FileMetaData *>> const&,leveldb::Slice const*,leveldb::Slice const*);
		void CopyState(char const*);
		void Status(leveldb::Status::Code,leveldb::Slice const&,leveldb::Slice const&);
		void ToString(void);
		void operator=(leveldb::Status const&);
		void ApproximateOffsetOf(leveldb::Slice const&);
		void Slice const&,void *,void (*);
		void NewIterator(leveldb::ReadOptions const&);
		void Open(leveldb::Options const&,leveldb::RandomAccessFile *,ulong long,leveldb::Table**);
		void ReadFilter(leveldb::Slice const&);
		void ReadMeta(leveldb::Footer const&);
		void ~Table();
		void Abandon(void);
		void Add(leveldb::Slice const&,leveldb::Slice const&);
		void ChangeOptions(leveldb::Options const&);
		void FileSize(void);
		void Finish(void);
		void Flush(void);
		void NumEntries(void);
		void TableBuilder(leveldb::Options const&,leveldb::WritableFile *);
		void WriteBlock(leveldb::BlockBuilder *,leveldb::BlockHandle *);
		void WriteRawBlock(leveldb::Slice const&,leveldb::Compressor *,leveldb::BlockHandle *);
		void status(void);
		void ~TableBuilder();
		void FindTable(ulong long,ulong long,leveldb::Cache::Handle **);
		void Slice const&,void *,void (*);
		void NewIterator(leveldb::ReadOptions const&,ulong long,ulong long,leveldb::Table **);
		void TableCache(std::string const&,leveldb::Options const*,int);
		void ~TableCache();
		void VarintLength(ulong long);
		void AddIterators(leveldb::ReadOptions const&,std::vector<leveldb::Iterator *,std::allocator<leveldb::Iterator *>> *);
		void DebugString(void);
		void Slice,void *,bool (*);
		void Get(leveldb::ReadOptions const&,leveldb::LookupKey const&,std::string *,leveldb::Version::GetStats *);
		void GetOverlappingInputs(int,leveldb::InternalKey const*,leveldb::InternalKey const*,std::vector<leveldb::FileMetaData *,std::allocator<leveldb::FileMetaData *>> *);
		void Next(void);
		void Prev(void);
		void Seek(leveldb::Slice const&);
		void SeekToFirst(void);
		void SeekToLast(void);
		void Valid(void);
		void key(void);
		void status(void);
		void value(void);
		void ~LevelFileNumIterator();
		void ~LevelFileNumIterator();
		void NewConcatenatingIterator(leveldb::ReadOptions const&,int);
		void OverlapInLevel(int,leveldb::Slice const*,leveldb::Slice const*);
		void PickLevelForMemTableOutput(leveldb::Slice const&,leveldb::Slice const&);
		void RecordReadSample(leveldb::Slice);
		void Ref(void);
		void Unref(void);
		void UpdateStats(leveldb::Version::GetStats const&);
		void ~Version();
		void AddFile(int,ulong long,ulong long,leveldb::InternalKey const&,leveldb::InternalKey const&);
		void Clear(void);
		void DebugString(void);
		void DecodeFrom(leveldb::Slice const&);
		void EncodeTo(std::string *);
		void ~VersionEdit();
		void AddLiveFiles(std::set<ulong long,std::less<ulong long>,std::allocator<ulong long>> *);
		void AppendVersion(leveldb::Version *);
		void ApproximateOffsetOf(leveldb::Version *,leveldb::InternalKey const&);
		void Apply(leveldb::VersionEdit *);
		void MaybeAddFile(leveldb::Version *,int,leveldb::FileMetaData *);
		void SaveTo(leveldb::Version *);
		void ~Builder();
		void CompactRange(int,leveldb::InternalKey const*,leveldb::InternalKey const*);
		void Finalize(leveldb::Version *);
		void GetRange(std::vector<leveldb::FileMetaData *,std::allocator<leveldb::FileMetaData *>> const&,leveldb::InternalKey *,leveldb::InternalKey *);
		void LevelSummary(leveldb::VersionSet::LevelSummaryStorage *);
		void LogAndApply(leveldb::VersionEdit *,leveldb::port::Mutex *);
		void MakeInputIterator(leveldb::Compaction *);
		void MarkFileNumberUsed(ulong long);
		void MaxNextLevelOverlappingBytes(void);
		void NumLevelBytes(int);
		void NumLevelFiles(int);
		void PickCompaction(void);
		void Recover(void);
		void SetupOtherInputs(leveldb::Compaction *);
		void VersionSet(std::string const&,leveldb::Options const*,leveldb::TableCache *,leveldb::InternalKeyComparator const*);
		void WriteSnapshot(leveldb::log::Writer *);
		void ~VersionSet();
		void ~WritableFile();
		void ~WritableFile();
		void Capacity(void);
		void Clear(void);
		void Delete(leveldb::Slice const&);
		void ~Handler();
		void ~Handler();
		void Iterate(leveldb::WriteBatch::Handler *);
		void Put(leveldb::Slice const&,leveldb::Slice const&);
		void WriteBatch(void);
		void ~WriteBatch();
		void Append(leveldb::WriteBatch *,leveldb::WriteBatch const*);
		void Count(leveldb::WriteBatch const*);
		void InsertInto(leveldb::WriteBatch const*,leveldb::MemTable *);
		void Sequence(leveldb::WriteBatch const*);
		void SetContents(leveldb::WriteBatch *,leveldb::Slice const&);
		void SetCount(leveldb::WriteBatch *,int);
		void SetSequence(leveldb::WriteBatch *,ulong long);
		void WriteStringToFile(leveldb::Env *,leveldb::Slice const&,std::string const&);
		void WriteStringToFileSync(leveldb::Env *,leveldb::Slice const&,std::string const&);
		void decompress(char const*,uint,std::string &);
		void ~ZlibCompressor();
		void ~ZlibCompressor();
		void Extend(uint,char const*,uint);
		void LastRecordOffset(void);
		void ReadPhysicalRecord(leveldb::Slice *);
		void Reader(leveldb::SequentialFile *,leveldb::log::Reader::Reporter *,bool,ulong long);
		void ReportCorruption(ulong long,char const*);
		void ReportDrop(ulong long,leveldb::Status const&);
		void ~Reporter();
		void ~Reporter();
		void SkipToInitialBlock(void);
		void ~Reader();
		void AddRecord(leveldb::Slice const&);
		void EmitPhysicalRecord(leveldb::log::RecordType,char const*,uint);
		void Writer(leveldb::WritableFile *);
		void ~Writer();
};

#pragma once
class Mob{
	public:
		Mob(BlockSource &);
		Mob(Level &);
		void _ctor(void);
		void _doSprintParticleEffect(void);
		void _getAmbientSound(void);
		void _getDeathSound(void);
		void _getHurtSound(void);
		void _getSoundVolume(void);
		void _init(void);
		void _isPersistent(void);
		void _pickUpItem(ItemEntity &);
		void _playStepSound(BlockPos const&,int);
		void _removeWhenFarAway(void);
		void _sendDirtyMobData(void);
		void _serverAiMobStep(void);
		void _updateSprintingState(void);
		void actuallyHurt(int,EntityDamageSource const*);
		void addAdditionalSaveData(CompoundTag &);
		void addEffect(MobEffectInstance const&);
		void aiStep(void);
		void animateHurt(void);
		void applyFinalFriction(float);
		void ate(void);
		void baseTick(void);
		void buildDebugInfo(std::string &);
		void canAddRider(Entity &);
		void canAttack(Mob*,bool);
		void canBeAffected(MobEffectInstance const&);
		void canBeControlledByRider(void);
		void canPickickUpLoot(void);
		void canSee(Entity const&);
		void canSpawn(bool);
		void causeFallDamage(float);
		void checkDespawn(Mob*);
		void checkDespawn(void);
		void die(EntityDamageSource const&);
		void doFireHurt(int);
		void doHurtTarget(Entity *);
		void drop(ItemInstance const*,bool);
		void dropAllArmor(void);
		void dropAllGear(int);
		void dropDeathLoot(int);
		void dropHeldItem(void);
		void dropRareDeathLoot(void);
		void finalizeMobSpawn(void);
		void getActiveEffectCount(void);
		void getAllArmor(void);
		void getAllArmor(void);
		void getAllEffects(void);
		void getAmbientSoundInterval(void);
		void getArmor(ArmorSlot);
		void getArmorCoverPercentage(void);
		void getArmorTypeHash(void);
		void getArmorValue(void);
		void getAttackAnim(float);
		void getAttribute(Attribute const&);
		void getAttributes(void);
		void getCarriedItem(void);
		void getCurrentSwingDuration(void);
		void getDamageAfterArmorAbsorb(EntityDamageSource const&,int);
		void getDamageAfterMagicAbsorb(EntityDamageSource const&,int);
		void getDeathLoot(void);
		void getEffect(MobEffect const&);
		void getEquipmentCount(void);
		void getExperienceReward(void);
		void getHeadHeight(void);
		void getHealth(void);
		void getItemInHandIcon(ItemInstance const*,int);
		void getItemUseDuration(void);
		void getJumpControl(void);
		void getJumpPower(void);
		void getLastHurtByMob(void);
		void getLastHurtByPlayer(void);
		void getLastHurtMob(void);
		void getLastHurtMobTimestamp(void);
		void getLookControl(void);
		void getMaxHeadXRot(void);
		void getMaxHealth(void);
		void getMeleeKnockbackBonus(void);
		void getMeleeWeaponDamageBonus(Mob*);
		void getMoveControl(void);
		void getMutableAttribute(Attribute const&);
		void getNavigation(void);
		void getSensing(void);
		void getSpeed(void);
		void getTarget(void);
		void getVoicePitch(void);
		void getYHeadRot(void);
		void getYya(void);
		void handleEntityEvent(EntityEvent);
		void hasAnyEffects(void);
		void hasAttributeBuff(AttributeBuffType);
		void hasEffect(MobEffect const&);
		void heal(int);
		void healEffects(int);
		void hurt(EntityDamageSource const&,int);
		void hurtArmor(int);
		void hurtEffects(EntityDamageSource const&,int);
		void incrementArrowCount(int);
		void isAlive(void);
		void isAlliedTo(Mob*);
		void isBaby(void);
		void isImmobile(void);
		void isInvertedHealAndHarm(void);
		void isLookingAtAnEntity(void);
		void isPickable(void);
		void isPushable(void);
		void isShootable(void);
		void isSleeping(void);
		void isSneaking(void);
		void isSprinting(void);
		void jumpFromGround(void);
		void knockback(Entity *,int,float,float);
		void lerpTo(Vec3 const&,Vec2 const&,int);
		void loadArmor(ListTag const*);
		void lookAt(Entity *,float,float);
		void newServerAiStep(void);
		void normalTick(void);
		void onEffectAdded(MobEffectInstance &);
		void onEffectRemoved(MobEffectInstance &);
		void onEffectUpdated(MobEffectInstance const&);
		void onLadder(bool);
		void outOfWorld(void);
		void performRangedAttack(Mob&,float);
		void playAmbientSound(void);
		void playerTouch(Player &);
		void postInit(void);
		void pushEntities(void);
		void readAdditionalSaveData(CompoundTag const&);
		void reallyDrop(std::unique_ptr<ItemEntity,std::default_delete<ItemEntity>>);
		void registerAttributes(void);
		void removeAllEffects(void);
		void removeEffect(int);
		void removeEffectNoUpdate(int);
		void removeEffectParticles(void);
		void resetAttributes(void);
		void resolveDeathLoot(int);
		void rideTick(void);
		void saveArmor(void);
		void sendInventory(void);
		void serializationSetHealth(int);
		void setArmor(ArmorSlot,ItemInstance const*);
		void setCanPickUpLoot(bool);
		void setCarriedItem(ItemInstance const&);
		void setInvisible(bool);
		void setJumping(bool);
		void setLastHurtByMob(Mob*);
		void setLastHurtByPlayer(Player *);
		void setLastHurtMob(Entity *);
		void setOnFire(int);
		void setPersistent(void);
		void setSneaking(bool);
		void setSpeed(float);
		void setSprinting(bool);
		void setSurfaceMob(bool);
		void setTarget(Mob*);
		void setYHeadRot(float);
		void setYya(float);
		void shouldDespawn(void);
		void spawnAnim(void);
		void swing(void);
		void teleportTo(Vec3 const&);
		void tickAttributes(void);
		void tickEffects(void);
		void travel(float,float);
		void updateAi(void);
		void updateAttackAnim(void);
		void updateInvisibilityStatus(void);
		void updateMobId(EntityUniqueID &);
		void updateWalkAnim(void);
		void useNewAi(void);
		void ~Mob();
		void ~Mob();
};

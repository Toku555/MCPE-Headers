#pragma once
class Boat{
	public:
		Boat(BlockSource &,Vec3 const&,uchar);
		Boat(BlockSource &,uchar);
		void _addPaddleTime(Side,float);
		void _computePaddleForce(float &,float &,float,float);
		void _control(void);
		void _float(void);
		void _paddleForce(Side);
		void addAdditionalSaveData(CompoundTag &);
		void addRider(Entity &);
		void canAddRider(Entity &);
		void canInteractWith(Player &);
		void computePaddleForcesBasedOnGaze(Vec3 &,float &,float &,float,float);
		void destroy(Entity *);
		void getControllingPlayer(void);
		void getDamage(void);
		void getEntityTypeId(void);
		void getExitText(void);
		void getHurtDir(void);
		void getHurtTime(void);
		void getInteractText(Player &);
		void getRideHeight(void);
		void getRiderIndex(Entity &);
		void getRowingTime(Side);
		void getRowingTime(Side,float);
		void getShadowHeightOffs(void);
		void getShadowRadius(void);
		void getWoodID(void);
		void hurt(EntityDamageSource const&,int);
		void interactWithPlayer(Player &);
		void isPickable(void);
		void isPushable(void);
		void lerpTo(Vec3 const&,Vec2 const&,int);
		void positionRider(Entity &);
		void push(Entity &,bool);
		void readAdditionalSaveData(CompoundTag const&);
		void remove(void);
		void setDamage(float);
		void setHurtDir(int);
		void setHurtTime(int);
		void setPaddleForce(Side,float);
		void setPaddleState(Side,bool);
		void setRowingTime(Side,float);
		void ~Boat();
		void ~Boat();
};

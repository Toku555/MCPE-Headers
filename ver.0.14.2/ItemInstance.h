#pragma once
class ItemInstance{
	public:
		ItemInstance(Block const*);
		ItemInstance(Block const*,int);
		ItemInstance(Block const*,int,int);
		ItemInstance(Item const*);
		ItemInstance(Item const*,int);
		ItemInstance(Item const*,int,int);
		ItemInstance(Item const*,int,int,CompoundTag const*);
		ItemInstance(ItemInstance const&);
		ItemInstance(bool);
		ItemInstance(int,int,int);
		ItemInstance(int,int,int,CompoundTag const*);
		ItemInstance(void);
		void _getHoverFormattingPrefix(void);
		void _setItem(int);
		void add(int);
		void canDestroySpecial(Block *);
		void clone(ItemInstance const*);
		void cloneSafe(ItemInstance const*);
		void fromTag(CompoundTag const&);
		void getAttackDamage(void);
		void getAuxValue(void);
		void getBaseRepairCost(void);
		void getColor(void);
		void getCustomName(void);
		void getDamageValue(void);
		void getDestroySpeed(Block *);
		void getEffectName(void);
		void getEnchantSlot(void);
		void getEnchantValue(void);
		void getEnchantsFromUserData(void);
		void getFormattedHovertext(Player const&,bool);
		void getHoverName(void);
		void getIcon(int,bool);
		void getId(void);
		void getIdAux(void);
		void getIdAuxEnchanted(void);
		void getMaxDamage(void);
		void getMaxStackSize(void);
		void getMaxUseDuration(void);
		void getName(void);
		void getNetworkUserData(void);
		void getUseAnimation(void);
		void getUserData(void);
		void hasCustomHoverName(void);
		void hasSameUserData(ItemInstance const&);
		void hasUserData(void);
		void hurtAndBreak(int,Mob *);
		void hurtEnemy(Mob *,Mob *);
		void init(int,int,int);
		void interactEnemy(Mob *,Player *);
		void inventoryTick(Level &,Entity &,int,bool);
		void isArmorItem(ItemInstance const*);
		void isDamageableItem(void);
		void isDamaged(void);
		void isEnchanted(void);
		void isEnchantingBook(void);
		void isFoil(void);
		void isFullStack(void);
		void isItem(ItemInstance const*);
		void isLiquidClipItem(void);
		void isNull(void);
		void isPotionItem(ItemInstance const*);
		void isStackable(ItemInstance const*,ItemInstance const*);
		void isStackable(void);
		void isStackedByData(void);
		void isThrowable(void);
		void isWearableItem(ItemInstance const*);
		void load(CompoundTag const&);
		void matches(ItemInstance const*);
		void matches(ItemInstance const*,ItemInstance const*);
		void matchesNulls(ItemInstance const*,ItemInstance const*);
		void mineBlock(BlockID,int,int,int,Mob *);
		void onCraftedBy(Level &,Player &);
		void operator!=(ItemInstance const&);
		void operator=(ItemInstance const&);
		void operator==(ItemInstance const&);
		void releaseUsing(Player *,int);
		void remove(int);
		void resetHoverName(void);
		void sameItemAndAux(ItemInstance const*);
		void save(void);
		void saveEnchantsToUserData(ItemEnchants const&);
		void set(int);
		void setAuxValue(short);
		void setCustomName(std::string const&);
		void setDescriptionId(std::string const&);
		void setNull(void);
		void setRepairCost(int);
		void setUserData(std::unique_ptr<CompoundTag,std::default_delete<CompoundTag>>);
		void snap(Player *);
		void toString(void);
		void use(Player &);
		void useAsFuel(void);
		void useOn(Player *,int,int,int,signed char,float,float,float);
		void useTimeDepleted(Level *,Player *);
};

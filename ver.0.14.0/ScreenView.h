#pragma once
class ScreenView{
	public:
		ScreenView(ButtonRegistry &,std::unique_ptr<ScreenController,std::default_delete<ScreenController>>,std::shared_ptr<UIControl> &,std::unique_ptr<UIControlFactory,std::default_delete<UIControlFactory>>);
		void _broadcastDownTree(std::shared_ptr<UIControl> &,ScreenEvent);
		void _checkIsTextEditControl(std::shared_ptr<UIControl> &);
		void _directionChanged(DirectionId,CardinalDirection);
		void _directionHeld(DirectionId,CardinalDirection);
		void _fireTextChangedEvent(void);
		void _forwardButtonEventToAnimationControls(ButtonScreenEventData const&);
		void _getControllerDirection(DirectionId);
		void _handleDirtyVisualTree(void);
		void _handleScreenViewRefresh(void);
		void _isValidControllerStick(DirectionId);
		void _populateAllControlCollections(void);
		void _populateRenderControlsCollection(void);
		void _populateZOrder(void);
		void _processControllerDirection(DirectionId);
		void _processEvents(ScreenInputContext &);
		void _renderBatches(UIRenderContext &,ScreenRenderBatch &);
		void _resetDirection(void);
		void _selectControl(std::shared_ptr<UIControl> &);
		void _selectNextFocusObject(CardinalDirection);
		void _sendPointerHeldEvents(void);
		void _setFocusActive(bool);
		void closeOnPlayerHurt(void);
		void getController(void);
		void getFocusedControl(void);
		void getHeight(void);
		void getKeyboardHeight(void);
		void getWidth(void);
		void handleCommandEvent(VoiceCommand const&);
		void handleControlEvent(ScreenEvent);
		void handleDictationEvent(void);
		void handleDirection(DirectionId,float,float);
		void handleGazeGestureInput(short,float,float,float);
		void handleInputModeChanged(InputMode);
		void handleLicenseChanged(void);
		void handlePointerLocation(glm::detail::tvec2<float> const&);
		void isDebugRendering(void);
		void onFocusGained(void);
		void onFocusLost(void);
		void onGameEventNotification(UI::GameEventNotification);
		void onInternetUpdate(void);
		void onSetKeyboardHeight(float);
		void renderGameBehind(void);
		void renderOnlyWhenTopMost(void);
		void setAssociatedBlockPos(BlockPos const&);
		void setDebugRendering(bool);
		void setKeyboardHeight(float);
		void setSize(glm::detail::tvec2<float>);
		void setupAndRender(UIRenderContext &);
		void terminate(void);
		void tick(int,int);
		void toGUICoordinate(int,int,int &,int &);
		void ~ScreenView();
		void ~ScreenView();
};

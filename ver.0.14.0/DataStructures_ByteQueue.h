#pragma once
namespace DataStructures{
	class ByteQueue{
		public:
		void ByteQueue(void);
		void Clear(char const*,uint);
		void DecrementReadOffset(uint);
		void GetBytesWritten(void);
		void IncrementReadOffset(uint);
		void PeekContiguousBytes(uint *);
		void Print(void);
		void ReadBytes(char *,uint,bool);
		void WriteBytes(char const*,uint,char const*,uint);
		void ~ByteQueue();
		void Clear(void);
		void Insert(HuffmanEncodingTreeNode * const&);
		void Pop(void);
		void Pop(uint);
		void Swap(uint,uint);
		void Insert(DataStructures::Heap<ulong long,RakNet::InternalPacket *,false>::HeapNode const&,char const*,uint);
		void ~List();
		void Insert(DataStructures::RangeNode<RakNet::uint24_t> const&,char const*,uint);
		void Insert(DataStructures::RangeNode<RakNet::uint24_t> const&,uint,char const*,uint);
		void RemoveAtIndex(uint);
		void GetIndexOf(RakNet::PluginInterface2 * const&);
		void Insert(RakNet::PluginInterface2 * const&,char const*,uint);
		void ~List();
		void Insert(RakNet::RakNetGUID const&,char const*,uint);
		void ~List();
		void Insert(RakNet::RakNetSocket2 * const&,char const*,uint);
		void operator=(DataStructures::List<RakNet::RakNetSocket2 *> const&);
		void ~List();
		void RemoveAtIndex(uint);
		void Insert(RakNet::RakString::SharedString * const&,char const*,uint);
		void RemoveAtIndex(uint);
		void ~List();
		void RemoveAtIndex(uint);
		void Insert(RakNet::SystemAddress const&,char const*,uint);
		void ~List();
		void Insert(bool const&,char const*,uint);
		void Insert(uint const&,char const*,uint);
		void Preallocate(uint,char const*,uint);
		void Get(int const&);
		void NodeComparisonFunc(int const&,DataStructures::Map<int,RakNet::HuffmanEncodingTree *,&DataStructures::defaultMapKeyComparison<int>>::MapNode const&);
		void Set(int const&,RakNet::HuffmanEncodingTree * const&);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::InternalPacket*,char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::InternalPacketRefCountedData*,char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::Packet*,char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::RakPeer::BufferedCommandStruct*,char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::RakPeer::SocketQueryOutput*,char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::ReliabilityLayer::MessageNumberNode*,char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::RemoteClient **,char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::RemoteSystemIndex*,char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Release(RakNet::SystemAddress*,char const*,uint);
		void uint24_t const&,bool *,int (*);
		void StrAndBoolComp(char * const&,StrAndBool const&);
		void GetIndexFromKey(int const&,bool *,int (*);
		void GetIndexFromKey(ushort const&,bool *,int (*);
		void Push(HuffmanEncodingTreeNode * const&,char const*,uint);
		void Pop(void);
		void Push(RakNet::InternalPacket * const&,char const*,uint);
		void Pop(void);
		void Push(RakNet::Packet * const&,char const*,uint);
		void Size(void);
		void operator[](uint);
		void ~Queue();
		void Pop(void);
		void Push(RakNet::RNS2RecvStruct * const&,char const*,uint);
		void Size(void);
		void ~Queue();
		void Pop(void);
		void Push(RakNet::RakPeer::RequestedConnectionStruct * const&,char const*,uint);
		void RemoveAtIndex(uint);
		void Size(void);
		void operator[](uint);
		void ~Queue();
		void Pop(void);
		void Push(RakNet::ReliabilityLayer::DatagramHistoryNode const&,char const*,uint);
		void Size(void);
		void operator[](uint);
		void Pop(void);
		void Push(RakNet::SystemAddress const&,char const*,uint);
		void ~Queue();
		void Pop(void);
		void Push(bool const&,char const*,uint);
		void Size(void);
		void Deserialize(RakNet::BitStream *);
		void Insert(RakNet::uint24_t);
		void Serialize(RakNet::BitStream *,uint,bool);
		void ~RangeList();
		void uint24_t>(RakNet::uint24_t const&,DataStructures::RangeNode<RakNet::uint24_t> const&);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Deallocate(RakNet::RakPeer::BufferedCommandStruct*,char const*,uint);
		void Push(RakNet::RakPeer::BufferedCommandStruct*);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void Deallocate(RakNet::RakPeer::SocketQueryOutput*,char const*,uint);
		void Pop(void);
		void Push(RakNet::RakPeer::SocketQueryOutput*);
		void Clear(char const*,uint);
		void Allocate(char const*,uint);
		void Clear(char const*,uint);
		void PopInaccurate(void);
		void Push(RakNet::SystemAddress*);
		void ThreadsafeAllocatingQueue(void);
		void ~ThreadsafeAllocatingQueue();
	}
};

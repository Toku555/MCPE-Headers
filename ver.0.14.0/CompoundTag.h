#pragma once
class CompoundTag{
	public:
		CompoundTag(CompoundTag&&);
		CompoundTag(std::string const&);
		CompoundTag(void);
		void clone(void);
		void contains(std::string const&);
		void contains(std::string const&,int);
		void copy(void);
		void equals(Tag const&);
		void get(std::string const&);
		void getAllTags(std::vector<Tag *,std::allocator<Tag *>> &);
		void getBoolean(std::string const&);
		void getByte(std::string const&);
		void getByteArray(std::string const&);
		void getCompound(std::string const&);
		void getDouble(std::string const&);
		void getFloat(std::string const&);
		void getId(void);
		void getInt(std::string const&);
		void getInt64(std::string const&);
		void getIntArray(std::string const&);
		void getList(std::string const&);
		void getShort(std::string const&);
		void getString(std::string const&);
		void isEmpty(void);
		void load(IDataInput &);
		void operator=(CompoundTag&&);
		void print(std::string const&,PrintStream &);
		void put(std::string const&,std::unique_ptr<Tag,std::default_delete<Tag>>);
		void putBoolean(std::string const&,bool);
		void putByte(std::string const&,char);
		void putByteArray(std::string const&,TagMemoryChunk);
		void putCompound(std::string const&,std::unique_ptr<CompoundTag,std::default_delete<CompoundTag>>);
		void putDouble(std::string const&,float);
		void putFloat(std::string const&,float);
		void putInt(std::string const&,int);
		void putInt64(std::string const&,long long);
		void putShort(std::string const&,short);
		void putString(std::string const&,std::string const&);
		void rawView(void);
		void remove(std::string const&);
		void toString(void);
		void write(IDataOutput &);
		void ~CompoundTag();
		void ~CompoundTag();
};

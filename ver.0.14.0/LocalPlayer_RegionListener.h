#pragma once
namespace LocalPlayer{
	class RegionListener{
		public:
		void ~RegionListener();
		void ~RegionListener();
		void _calculateFlight(float,float,float);
		void _checkMovementStatistiscs(Vec3 const&);
		void _crit(Entity &);
		void _init(void);
		void _input(void);
		void _setRideInputFor(Entity &);
		void _updateArmorTypeHash(void);
		void _updateAutoJump(float,float,float,float);
		void actuallyHurt(int,EntityDamageSource const*);
		void addAdditionalSaveData(CompoundTag &);
		void addItemCreative(ItemInstance const*);
		void addRegionListener(LocalPlayer::RegionListener *);
		void aiStep(void);
		void chat(std::string const&);
		void clearMovementState(void);
		void closeScreen(void);
		void destroyRegion(void);
		void die(EntityDamageSource const&);
		void displayLocalizableMessage(std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void drop(ItemInstance const*,bool);
		void getBob(void);
		void getBobOld(void);
		void getControllingPlayer(void);
		void getFieldOfViewModifier(void);
		void getGameModeString(void);
		void getInventoryMenu(void);
		void getLoadingState(void);
		void getMinecraftClient(void);
		void getOPortalEffectTime(void);
		void getPortalEffectTime(void);
		void getPreloadingProgress(void);
		void getTelemetry(void);
		void getViewBlockRadius(void);
		void hurt(EntityDamageSource const&,int);
		void hurtTo(int);
		void isAutoJumpEnabled(void);
		void isInTrialMode(void);
		void isLocalPlayer(void);
		void move(Vec3 const&);
		void normalTick(void);
		void onDimensionChanged(void);
		void onGameEventNotification(UI::GameEventNotification);
		void onPrepChangeDimension(void);
		void openAnvil(BlockPos const&);
		void openBrewingStand(int,BlockPos const&);
		void openContainer(int,BlockPos const&);
		void openContainer(int,EntityUniqueID const&);
		void openDispenser(int,BlockPos const&,bool);
		void openEnchanter(int,BlockPos const&);
		void openFurnace(int,BlockPos const&);
		void openHopper(int,BlockPos const&);
		void openHopper(int,EntityUniqueID const&);
		void openTextEdit(BlockEntity *);
		void outOfWorld(void);
		void pickBlockCreative(HitResult const&);
		void readAdditionalSaveData(CompoundTag const&);
		void refreshContainer(IContainerManager &,std::vector<ItemInstance,std::allocator<ItemInstance>> const&);
		void removeRegionListener(LocalPlayer::RegionListener *);
		void requestChunkRadius(int);
		void respawn(void);
		void rideTick(void);
		void sendGameSessionHeartBeat(bool);
		void sendInput(void);
		void sendPosition(void);
		void setArmor(ArmorSlot,ItemInstance const*);
		void setContainerData(IContainerManager &,int,int);
		void setOPortalEffectTime(float);
		void setPortalEffectTime(float);
		void setPos(Vec3 const&);
		void setSneaking(bool);
		void setSprinting(bool);
		void slotChanged(IContainerManager &,int,ItemInstance const&,bool);
		void startCrafting(BlockPos const&);
		void startPaddling(Side);
		void startRiding(Entity &);
		void startSleepInBed(BlockPos const&);
		void stopLoading(void);
		void stopPaddling(Side);
		void stopRiding(bool);
		void stopSleepInBed(bool,bool);
		void swing(void);
		void tickWorld(Tick const&);
		void updateAi(void);
		void ~LocalPlayer();
		void ~LocalPlayer();
	}
};

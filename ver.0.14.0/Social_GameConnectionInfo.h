#pragma once
namespace Social{
	class GameConnectionInfo{
		public:
		void GameConnectionInfo(Social::GameConnectionInfo const&);
		void GameConnectionInfo(void);
		void typeAsString(void);
		void ~GameConnectionInfo();
		void addConnectionInfo(Social::GameConnectionInfo);
		void addGamerToMuteList(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>);
		void advertiseGame(void);
		void buildGameList(void);
		void buildGameListIfNeeded(bool);
		void changeMultiplayerState(Social::MultiplayerState,std::string const&,int,std::string const&);
		void checkIsInviteForCurrentGame(void);
		void fireEventMultiplayerConnectionStateChanged(bool,std::string const&,std::string const&,uint,uint,uint,std::string const&);
		void getGameList(void);
		void getInviteHandle(void);
		void getLocalConnectionInfo(void);
		void handleJoinLobbyCompleted(std::error_code,std::string &);
		void isBlockedPlayer(std::string const&);
		void isInviteEnabled(void);
		void isPlayerOnXboxLive(std::string const&);
		void leaveLiveGame(void);
		void needToHandleInvite(void);
		void needToRefreshMuteList(void);
		void onEnterLevel(Level *);
		void onExitLevel(uint);
		void refreshMuteList(void);
		void refreshMuteListIfNeeded(bool);
		void sendRoundStartEvent(void);
		void setGameHostInfo(Level *);
		void setLobbyProperties(void);
		void setShouldAdvertiseGame(bool,bool);
		void showInviteScreen(void);
		void showPlayerProfile(std::string const&);
		void stateToString(Social::MultiplayerState);
		void tick(bool);
		void tickMultiplayerManager(void);
		void updateClientConnectionStateInLobby(void);
		void updatePlayerStatus(std::string const&);
		void ~Multiplayer();
		void FileEventLogger(std::string);
		void ~FileEventLogger();
		void ~FileEventLogger();
		void HttpEventLogger(std::string);
		void debugWriteEventToFile(std::string const&);
		void getMaelstromMessageBody(std::string const&,Json::Value const&,Json::Value const&);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void sendEvent(std::string const&);
		void ~HttpEventLogger();
		void ~HttpEventLogger();
		void ~IEventListener();
		void ~IEventListener();
		void MaelstromEventLogger(std::string);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void ~MaelstromEventLogger();
		void ~MaelstromEventLogger();
		void updateMeasurement(Social::Telemetry::Measurement const&);
		void TelemetryEvent(Social::Telemetry::TelemetryEvent const&);
		void TelemetryEvent(std::string,std::unordered_map<std::string,Social::Telemetry::Property,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::Telemetry::Property>>> &);
		void addProperty(Social::Telemetry::Property const&);
		void addProperty<int>(std::string,int const&);
		void string>(std::string,std::string const&);
		void addProperty<uint>(std::string,uint const&);
		void hasMeasurements(void);
		void measurementsAsJsonValue(void);
		void operator==(Social::Telemetry::TelemetryEvent const&);
		void propertiesAsJsonValue(void);
		void updateMeasurements(Social::Telemetry::TelemetryEvent const&);
		void ~TelemetryEvent();
		void TelemetryManager(Social::UserManager &,std::string const&);
		void getCommonProperties(void);
		void getCommonProperty(std::string);
		void getGlobalProperty(std::string);
		void handleAggregation(std::vector<Social::Telemetry::TelemetryEvent,std::allocator<Social::Telemetry::TelemetryEvent>> &,Social::Telemetry::TelemetryEvent&);
		void needToSendAggregatedEvents(void);
		void onThrottledConnection(void);
		void removeCommonProperty(std::string);
		void removeGlobalProperty(std::string);
		void sendEvents(bool);
		void sendEvents(std::unordered_map<std::string,std::vector<Social::Telemetry::TelemetryEvent,std::allocator<Social::Telemetry::TelemetryEvent>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<Social::Telemetry::TelemetryEvent,std::allocator<Social::Telemetry::TelemetryEvent>>>>> &);
		void setGlobalProperty<float>(std::string,float const&);
		void string>(std::string,std::string const&);
		void setupCommonProperties(void);
		void tick(void);
		void ~TelemetryManager();
		void XboxLiveEventLogger(Social::UserManager &);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void ~XboxLiveEventLogger();
		void ~XboxLiveEventLogger();
		void UserManager(void);
		void checkPrivilege(int);
		void getCurrentGamertag(void);
		void getCurrentUser(void);
		void getCurrentXUID(void);
		void getSandbox(void);
		void getXblContext(void);
		void isSignedIn(void);
		void onSignOut(void);
		void onSuccessfulSignin(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void updateRichPresence(std::string);
		void ~UserManager();
		void XboxLiveGameInfo(Social::XboxLiveGameInfo const&);
		void addSupportedConnection(RakNet::SystemAddress);
		void addSupportedConnection(RakNet::SystemAddress,Social::ConnectionType);
		void addSupportedConnection(UPNPInfo &);
		void addSupportedConnection(std::string const&,std::string const&,int);
		void findConnectionMatchingType(Social::ConnectionType);
		void operator=(Social::XboxLiveGameInfo&&);
		void ~XboxLiveGameInfo();
	}
};

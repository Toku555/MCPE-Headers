#pragma once
class LevelRenderer{
	public:
		LevelRenderer(MinecraftClient *,std::shared_ptr<TextureAtlas>);
		void _addMaxXEndcapMesh(Vec3 &,Vec3 &,Vec3 &);
		void _addMaxZEndcapMesh(Vec3 &,Vec3 &,Vec3 &);
		void _addMinXEndcapMesh(Vec3 &,Vec3 &,Vec3 &);
		void _addMinZEndcapMesh(Vec3 &,Vec3 &,Vec3 &);
		void _advancedCutawayVisibilityCulling(Vec3 const&,FrustumCuller &,bool);
		void _advancedVisibilityCulling(Vec3 const&,FrustumCuller &,bool,ScreenCuller *);
		void _affectsTessellation(int);
		void _blockCanHaveOverlay(Block const&);
		void _buildImmediate(RenderChunk &);
		void _buildShadowOverlay(void);
		void _buildShadowVolume(void);
		void _buildSkyMesh(void);
		void _buildStarsMesh(void);
		void _buildSunAndMoonMeshes(void);
		void _buildSunAndMoonQuad(bool,int);
		void _chooseOverlayMaterial(Block::RenderLayer);
		void _computeCutawayBounds(void);
		void _computeEyePositions(void);
		void _cutawayVisibilityCulling(Vec3 const&,FrustumCuller &,bool);
		void _finishBuildingChunk(RenderChunk &);
		void _finishSortingChunkFaces(RenderChunk &);
		void _frustumVisibilityCulling(Vec3 const&,FrustumCuller &,bool,bool);
		void _getBlockRenderer(void);
		void _getOrCreateChunkAt(BlockPos const&,bool);
		void _initResources(void);
		void _queueChunk(RenderChunk &,float,bool);
		void _queueRenderEntitiesClient(BlockSource &,ChunkPos const&,FrustumCuller &,float);
		void _queueRenderEntitiesServer(BlockSource &,ChunkPos const&,FrustumCuller &,float);
		void _recreateTessellators(void);
		void _renderBlockEntityShadow(BlockEntity const&,float);
		void _renderBlockOverlay(BlockSource &,float,Block *,BlockPos const&);
		void _renderChunkQueue(std::vector<RenderChunk *,std::allocator<RenderChunk *>> const&,TerrainLayer,bool);
		void _renderCracksOverlay(BlockSource &,Block &,BlockPos const&,float);
		void _renderEntityShadow(Entity const&,float);
		void _renderShadow(float,Vec3 const&,float);
		void _renderStars(float);
		void _renderStencilShadowOverlayCube(float);
		void _renderSunOrMoon(float,bool);
		void _renderWaterHoles(float);
		void _setDirty(BlockPos const&,BlockPos const&,bool,bool);
		void _setDirty(BlockPos const&,bool,bool);
		void _setDirty(Pos const&,bool,bool);
		void _setupFog(Entity const&,int,float);
		void _skyDarkeningFactor(void);
		void _tryRebuild(Boxed<RenderChunk> &);
		void _updateColumnVisibility(BlockPos const&);
		void _updateEndCapMesh(void);
		void addParticle(ParticleType,Vec3 const&,Vec3 const&,int);
		void allChanged(void);
		void bobHurt(Matrix &,float);
		void bobView(Matrix &,float);
		void buildUnitCube(void);
		void gatherStats1(void);
		void getAmbientBrightness(void);
		void getCameraPosFromEntity(float,Entity const&);
		void getCutawayBounds(Vec3 &,Vec3 &);
		void getFogBrightness(float);
		void getFogStartDistance(void);
		void getFov(float,bool);
		void getNightVisionScale(Mob const&,float);
		void initializeEndcapLookupTexture(bool);
		void isAABBVisible(AABB const&);
		void isBlockVisible(BlockPos const&);
		void levelEvent(LevelEvent,Vec3 const&,int);
		void moveCameraToPlayer(Matrix &,float);
		void onAppResumed(void);
		void onAppSuspended(void);
		void onAreaChanged(BlockSource &,BlockPos const&,BlockPos const&);
		void onBlockChanged(BlockSource &,BlockPos const&,FullBlock,FullBlock,int);
		void onBrightnessChanged(BlockSource &,BlockPos const&);
		void onLowMemory(void);
		void onNewChunkFor(Player &,LevelChunk &);
		void onViewRadiusChanged(bool);
		void playSound(std::string const&,Vec3 const&,float,float);
		void renderChunks(TerrainLayer,float,bool);
		void renderCracks(BlockSource &,BlockPos const&,float,float);
		void renderEndCaps(void);
		void renderEntities(FrustumCuller &,float);
		void renderHitSelect(BlockSource &,BlockPos const&,float,bool);
		void renderLevel(Entity &,FrustumCuller &,float,float);
		void renderNameTags(float);
		void renderShadows(std::multimap<EntityRendererId,Entity *,std::less<EntityRendererId>,std::allocator<std::pair<EntityRendererId const,Entity *>>> const&,std::vector<BlockEntity *,std::allocator<BlockEntity *>> const&,float);
		void renderSky(Entity &,float);
		void renderWeather(float);
		void setDestroyProgress(BlockPos const&,float);
		void setDimension(Dimension *,bool,bool);
		void setLevel(Level *);
		void setupCamera(float,int);
		void setupClearColor(float);
		void startFrame(FrustumCuller &,float,float);
		void takePicture(Entity *,Entity *,bool,std::string const&);
		void tick(void);
		void tickFov(void);
		void tickRain(void);
		void updateFarChunksDistance(void);
		void updateViewArea(Entity &,float);
		void ~LevelRenderer();
		void ~LevelRenderer();
};

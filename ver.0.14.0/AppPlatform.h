#pragma once
class AppPlatform{
	public:
		AppPlatform(void);
		void HardwareInformation(void);
		void _fireAppFocusGained(void);
		void _fireAppFocusLost(void);
		void _fireAppResumed(void);
		void _fireAppSuspended(void);
		void _fireAppTerminated(void);
		void _fireLowMemory(void);
		void _tick(void);
		void buyGame(void);
		void checkLicense(void);
		void collectGraphicsHardwareDetails(void);
		void createUserInput(void);
		void discardBackbuffer(void);
		void finish(void);
		void getAssetFileFullPath(std::string const&);
		void getAvailableMemory(void);
		void getBroadcastAddresses(void);
		void getDateString(int);
		void getEdition(void);
		void getKeyFromKeyCode(int,int,int);
		void getKeyboardHeight(void);
		void getModelName(void);
		void getPixelsPerMillimeter(void);
		void getPlatformStringVar(int);
		void getPointerFocus(void);
		void getScreenHeight(void);
		void getScreenWidth(void);
		void getTotalMemory(void);
		void getUserInput(void);
		void getUserInputStatus(void);
		void hasBuyButtonWhenInvalidLicense(void);
		void hasIDEProfiler(void);
		void hideKeyboard(void);
		void hideMousePointer(void);
		void isKeyboardVisible(void);
		void isNetworkEnabled(bool);
		void isNetworkThrottled(void);
		void isPowerVR(void);
		void launchUri(std::string const&);
		void loadImage(ImageData &,std::string const&,bool);
		void loadPNG(ImageData &,std::string const&,bool);
		void loadTGA(ImageData &,std::string const&,bool);
		void loadTexture(std::string const&,bool);
		void pickFile(FilePickerSettings &);
		void readAssetFile(std::string const&);
		void registerUriListener(UriListener &);
		void setFullscreenMode(FullscreenMode);
		void setPointerFocus(bool);
		void setScreenSize(int,int);
		void setSleepEnabled(bool);
		void showDialog(int);
		void showKeyboard(std::string const&,int,bool,bool,Vec2 const&);
		void showMousePointer(void);
		void supportsFilePicking(void);
		void supportsVibration(void);
		void toggleSimulateTouchWithMouse(void);
		void unregisterUriListener(UriListener &);
		void updateTextBoxText(std::string const&);
		void uploadPlatformDependentData(int,void *);
		void useCenteredGUI(void);
		void useMetadataDrivenScreens(void);
		void useXboxControlHelpers(void);
		void usesLargeScreen(void);
		void vibrate(int);
		void ~AppPlatform();
		void ~AppPlatform();
};

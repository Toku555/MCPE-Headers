#pragma once
class Block{
	public:
		Block(Block const&);
		Block(std::string const&,int,Material const&);
		Block(std::string const&,int,TextureUVCoordinateSet,Material const&);
		Block(std::string const&,int,std::string const&,Material const&);
		void SoundType(std::string const&,float,float);
		void SoundType(std::string const&,std::string const&,float,float);
		void SoundType(std::string const&,std::string const&,std::string const&,float,float);
		void getBreakSound(void);
		void getPitch(void);
		void getPlaceSound(void);
		void getStepSound(void);
		void getVolume(void);
		void ~SoundType();
		void addAABB(AABB const&,AABB const*,std::vector<AABB,std::allocator<AABB>> &);
		void addAABBs(BlockSource &,BlockPos const&,AABB const*,std::vector<AABB,std::allocator<AABB>> &);
		void addCollisionShapes(BlockSource &,BlockPos const&,AABB const*,std::vector<AABB,std::allocator<AABB>> &,Entity *);
		void animateTick(BlockSource &,BlockPos const&,Random &);
		void asItemInstance(BlockSource &,BlockPos const&,int);
		void attack(Player *,BlockPos const&);
		void buildDescriptionName(ItemInstance const&);
		void calcGroundFriction(Mob &,BlockPos const&);
		void canBeBuiltOver(BlockSource &,BlockPos const&);
		void canBeSilkTouched(void);
		void canHaveExtraData(void);
		void canInstatick(void);
		void canSlide(void);
		void canSurvive(BlockSource &,BlockPos const&);
		void checkIsPathable(Entity &,BlockPos const&,BlockPos const&);
		void clip(BlockSource &,BlockPos const&,Vec3 const&,Vec3 const&,bool,int);
		void destroy(BlockSource &,BlockPos const&,int,Entity *);
		void dispense(BlockSource &,Container &,int,Vec3 const&,signed char);
		void entityInside(BlockSource &,BlockPos const&,Entity &);
		void getAABB(BlockSource &,BlockPos const&,AABB &,int,bool,int);
		void getBlockEntityType(void);
		void getBlockShape(void);
		void getBlockShape(void);
		void getCarriedTexture(signed char,int);
		void getCollisionShape(AABB &,BlockSource &,BlockPos const&,Entity *);
		void getColor(BlockSource &,BlockPos const&);
		void getColor(int);
		void getColorForParticle(BlockSource &,BlockPos const&,int);
		void getComparatorSignal(BlockSource &,BlockPos const&,signed char,int);
		void getCreativeCategory(void);
		void getDebugText(std::vector<std::string,std::allocator<std::string>> &);
		void getDescriptionId(void);
		void getDestroyProgress(Player &);
		void getDestroySpeed(void);
		void getDirectSignal(BlockSource &,BlockPos const&,int);
		void getExperienceDrop(Random &);
		void getExplosionResistance(Entity *);
		void getExplosionResistance(void);
		void getExtraRenderLayers(void);
		void getFaceTextureIsotropic(void);
		void getFriction(void);
		void getGravity(void);
		void getIconYOffset(void);
		void getLightEmission(BlockID);
		void getMapColor(FullBlock const&);
		void getMapColor(void);
		void getMaterial(void);
		void getMobToSpawn(BlockSource &,BlockPos const&);
		void getPlacementDataValue(Mob &,BlockPos const&,signed char,Vec3 const&,int);
		void getProperties(void);
		void getRedstoneProperty(BlockSource &,BlockPos const&);
		void getRenderLayer(BlockSource &,BlockPos const&);
		void getRenderLayer(void);
		void getResource(Random &,int,int);
		void getResourceCount(Random &,int,int);
		void getSecondPart(BlockSource &,BlockPos const&,BlockPos&);
		void getShadeBrightness(void);
		void getSilkTouchItemInstance(uchar);
		void getSoundType(void);
		void getSpawnResourcesAuxValue(uchar);
		void getTessellatedUVs(void);
		void getTexture(BlockSource &,BlockPos const&,signed char);
		void getTexture(signed char);
		void getTexture(signed char,int);
		void getTextureItem(std::string const&);
		void getTextureNum(int);
		void getTextureUVCoordinateSet(std::string const&,int);
		void getTextureUVs(void);
		void getThickness(void);
		void getTypeToSpawn(BlockSource &,EntityType,BlockPos const&);
		void getVisualShape(BlockSource &,BlockPos const&,AABB &,bool);
		void getVisualShape(uchar,AABB &,bool);
		void handleEntityInside(BlockSource &,BlockPos const&,Entity *,Vec3 &);
		void handleRain(BlockSource &,BlockPos const&,float);
		void hasBlockEntity(void);
		void hasComparatorSignal(void);
		void hasProperty(BlockProperty);
		void init(void);
		void initBlocks(void);
		void isAlphaTested(void);
		void isContainerBlock(void);
		void isCraftingBlock(void);
		void isCropBlock(void);
		void isDoorBlock(void);
		void isFaceVisible(BlockSource &,BlockPos const&,signed char);
		void isHeavy(void);
		void isHurtableBlock(void);
		void isInteractiveBlock(void);
		void isObstructingChests(BlockSource &,BlockPos const&);
		void isRedstoneAttachable(void);
		void isRedstoneBlock(void);
		void isSeasonTinted(BlockSource &,BlockPos const&);
		void isSignalSource(void);
		void isSolid(void);
		void isSolidBlockingBlock(void);
		void isTextureIsotropic(signed char);
		void isType(Block const*);
		void isUnbreakable(void);
		void isWaterBlocking(void);
		void lookupByName(std::string const&,bool);
		void mayConsumeFertilizer(BlockSource &);
		void mayPick(BlockSource &,int,bool);
		void mayPick(void);
		void mayPlace(BlockSource &,BlockPos const&);
		void mayPlace(BlockSource &,BlockPos const&,signed char);
		void mayPlaceOn(Block const&);
		void neighborChanged(BlockSource &,BlockPos const&,BlockPos const&);
		void onExploded(BlockSource &,BlockPos const&,Entity *);
		void onFallOn(BlockSource &,BlockPos const&,Entity *,float);
		void onFertilized(BlockSource &,BlockPos const&,Player *);
		void onGraphicsModeChanged(bool,bool);
		void onLoaded(BlockSource &,BlockPos const&);
		void onPlace(BlockSource &,BlockPos const&);
		void onRedstoneUpdate(BlockSource &,BlockPos const&,int,bool);
		void onRemove(BlockSource &,BlockPos const&);
		void onStepOn(Entity &,BlockPos const&);
		void playerDestroy(Player *,BlockPos const&,int);
		void playerWillDestroy(Player &,BlockPos const&,int);
		void popResource(BlockSource &,BlockPos const&,ItemInstance const&);
		void prepareRender(BlockSource &,BlockPos const&);
		void randomlyModifyPosition(BlockPos const&);
		void randomlyModifyPosition(BlockPos const&,int &);
		void setAllFacesIsotropic(void);
		void setCategory(CreativeItemCategory);
		void setDestroyTime(float);
		void setExplodeable(float);
		void setFriction(float);
		void setLightBlock(Brightness);
		void setLightEmission(float);
		void setMapColor(Color const&);
		void setNameId(std::string const&);
		void setSolid(bool);
		void setSoundType(Block::SoundType const&);
		void setTextureAtlas(std::shared_ptr<TextureAtlas>);
		void setTicking(bool);
		void setVisualShape(AABB const&);
		void setVisualShape(Vec3 const&,Vec3 const&);
		void shouldRenderFace(BlockSource &,BlockPos const&,signed char,AABB const&);
		void shouldStopFalling(Entity &);
		void spawnBurnResources(BlockSource &,float,float,float);
		void spawnResources(BlockSource &,BlockPos const&,int,float,int);
		void teardownBlocks(void);
		void tick(BlockSource &,BlockPos const&,Random &);
		void transformToValidBlockId(BlockID);
		void transformToValidBlockId(BlockID,BlockPos const&);
		void triggerEvent(BlockSource &,BlockPos const&,int,int);
		void tryToPlace(BlockSource &,BlockPos const&,uchar);
		void updateEntityAfterFallOn(Entity &);
		void use(Player &,BlockPos const&);
		void waterSpreadCausesSpawn(void);
		void ~Block();
		void ~Block();
};

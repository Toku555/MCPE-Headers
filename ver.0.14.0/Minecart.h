#pragma once
class Minecart{
	public:
		Minecart(BlockSource &);
		Minecart(BlockSource &,Vec3 const&);
		void activateMinecart(BlockPos const&,bool);
		void addAdditionalSaveData(CompoundTag &);
		void animateHurt(void);
		void applyNaturalSlowdown(void);
		void comeOffTrack(float);
		void createMinecart(BlockSource &,Vec3 const&,MinecartType);
		void destroy(EntityDamageSource const&,bool);
		void getAName(void);
		void getCustomName(void);
		void getDamage(void);
		void getDefaultDisplayBlock(void);
		void getDefaultDisplayData(void);
		void getDefaultDisplayOffset(void);
		void getDisplayBlock(void);
		void getDisplayData(void);
		void getDisplayOffset(void);
		void getEntityTypeId(void);
		void getHurtDir(void);
		void getHurtTime(void);
		void getPos(Vec3 &,Vec3);
		void getPosOffs(Vec3 &,Vec3,float);
		void getRideHeight(void);
		void getShadowHeightOffs(void);
		void getShadowRadius(void);
		void hasCustomDisplay(void);
		void hasCustomName(void);
		void hurt(EntityDamageSource const&,int);
		void isPickable(void);
		void isPushable(void);
		void lerpTo(Vec3 const&,Vec2 const&,int);
		void moveAlongTrack(BlockPos const&,float,float,int,int);
		void push(Entity &,bool);
		void push(Vec3 const&);
		void readAdditionalSaveData(CompoundTag const&);
		void setCustomDisplay(bool);
		void setCustomName(std::string const&);
		void setDamage(float);
		void setDisplayBlock(int);
		void setDisplayData(int);
		void setDisplayOffset(int);
		void setHurtDir(int);
		void setHurtTime(int);
		void ~Minecart();
		void ~Minecart();
};

#pragma once
class SkinRepository{
	public:
		SkinRepository(OfferRepository &,Options &,SkinGeometryGroup &,mce::TextureGroup &,ResourceLocation const&,ulong long);
		SkinRepository(OfferRepository &,Options &,SkinGeometryGroup &,mce::TextureGroup &,ResourceLocation const&,ulong long);
		void _doNameSwap(void);
		void _doNameSwap(void);
		void _isValidSkin(ResourceLocation const&);
		void _setDefaultSkin(void);
		void _setDefaultSkin(void);
		void addRecentSkin(Skin const*);
		void addRecentSkin(Skin const*);
		void getCustomSkinLocation(void);
		void getCustomSkinLocation(void);
		void getDefaultSkin(SkinRepository::DefaultSkin);
		void getDefaultSkin(SkinRepository::DefaultSkin);
		void getLastCustomSkinId(void);
		void getLastCustomSkinId(void);
		void getNumRecentSkins(void);
		void getNumRecentSkins(void);
		void getRecentSkins(void);
		void getRecentSkins(void);
		void getSelectedSkin(void);
		void getSelectedSkin(void);
		void getSkin(std::string const&);
		void getSkin(std::string const&);
		void getSkinPackByOffer(Offer const*);
		void getSkinPackByOffer(Offer const*);
		void getSkinPacksByType(SkinPack::SkinPackType);
		void getSkinPacksByType(SkinPack::SkinPackType);
		void hasValidCustomSkin(void);
		void hasValidCustomSkin(void);
		void onImagePickingCanceled(void);
		void onImagePickingCanceled(void);
		void onImagePickingSuccess(std::string const&);
		void onImagePickingSuccess(std::string const&);
		void function<void ();
		void function<void ();
		void saveRecentSkins(void);
		void saveRecentSkins(void);
		void setLastCustomSkin(Skin const&);
		void setLastCustomSkin(Skin const&);
		void setSkin(Skin const&,bool);
		void setSkin(Skin const&,bool);
		void storeCustomSkin(ResourceLocation const&);
		void storeCustomSkin(ResourceLocation const&);
		void ~SkinRepository();
		void ~SkinRepository();
		void ~SkinRepository();
		void ~SkinRepository();
};

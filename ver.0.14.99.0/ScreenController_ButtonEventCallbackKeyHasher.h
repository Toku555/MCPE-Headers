#pragma once
namespace ScreenController{
	class ButtonEventCallbackKeyHasher{
		public:
		void operator();
		ScreenController(NameRegistry &);
		ScreenController(NameRegistry &);
		void _getNameRegistry(void);
		void _getNameRegistry(void);
		void _handleAnimationEvent(AnimationEventData &);
		void _handleButtonEvent(ScreenEvent &);
		void _handleButtonEvent(ScreenEvent &);
		void _handleEvent(ScreenEvent);
		void _handleEvent(ScreenEvent);
		void _handleFocusMoveEvent(FocusMoveScreenEventData &);
		void _handleInputModeChangedEvent(InputModeChangeScreenEventData &);
		void _handlePointerHeldEvent(PointerHeldScreenEventData &);
		void _handleSliderChangeEvent(SliderChangeEventData &);
		void _handleTextEditEvent(TextEditScreenEventData &);
		void _handleToggleChangeEvent(ToggleChangeEventData &);
		void _registerSubController(std::shared_ptr<ScreenController>);
		void _registerSubController(std::shared_ptr<ScreenController>);
		void addStaticScreenVars(Json::Value &);
		void addStaticScreenVars(Json::Value &);
		void bind(std::string const&,uint,int,std::string const&,uint,std::string const&,UIPropertyBag &);
		void bind(std::string const&,uint,int,std::string const&,uint,std::string const&,UIPropertyBag &);
		void bind(std::string const&,uint,std::string const&,UIPropertyBag &);
		void bind(std::string const&,uint,std::string const&,UIPropertyBag &);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<Color ();
		void function<Color ();
		void function<float ();
		void function<float ();
		void function<float ();
		void function<float ();
		void function<float ();
		void function<float ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void tvec2<int> ();
		void tvec2<int> ();
		void function<int ();
		void function<int ();
		void function<int ();
		void function<int ();
		void function<int ();
		void function<int ();
		void string ();
		void string ();
		void string ();
		void string ();
		void string ();
		void string ();
		void canExit(void);
		void canExit(void);
		void getAdditionalScreenInfo(void);
		void getAdditionalScreenInfo(void);
		void getCallbackInterval(void);
		void getCallbackInterval(void);
		void getTelemetryProperty(std::string &,std::string &);
		void getTelemetryProperty(std::string &,std::string &);
		void handleEvent(ScreenEvent);
		void handleEvent(ScreenEvent);
		void handleGameEventNotification(ui::GameEventNotification);
		void handleGameEventNotification(ui::GameEventNotification);
		void handleLicenseChanged(void);
		void handleLicenseChanged(void);
		void onOpen(void);
		void onOpen(void);
		void onRender(void);
		void onRender(void);
		void onTerminate(void);
		void onTerminate(void);
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void setAssociatedBlockPos(BlockPos const&);
		void setAssociatedBlockPos(BlockPos const&);
		void setAssociatedEntityUniqueID(EntityUniqueID);
		void setAssociatedEntityUniqueID(EntityUniqueID);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void setSuspendInput(bool);
		void setSuspendInput(bool);
		void setViewCommand(ScreenViewCommand);
		void setViewCommand(ScreenViewCommand);
		void tick(void);
		void tick(void);
		void tryExit(void);
		void tryExit(void);
		void ~ScreenController();
		void ~ScreenController();
		void ~ScreenController();
		void ~ScreenController();
	}
};

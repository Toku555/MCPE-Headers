#pragma once
class Dimension{
	public:
		Dimension(Level &,DimensionId,short);
		Dimension(Level &,DimensionId,short);
		void _createGenerator(GeneratorType);
		void _createGenerator(GeneratorType);
		void createNew(DimensionId,Level &);
		void createNew(DimensionId,Level &);
		void getBiomes(void);
		void getBiomes(void);
		void getBlockSourceDEPRECATEDUSEPLAYERREGIONINSTEAD(void);
		void getBlockSourceDEPRECATEDUSEPLAYERREGIONINSTEAD(void);
		void getBrightnessRamp(void);
		void getBrightnessRamp(void);
		void getChunkSource(void);
		void getChunkSource(void);
		void getCircuitSystem(void);
		void getCircuitSystem(void);
		void getClearColorScale(void);
		void getClearColorScale(void);
		void getCloudColor(float);
		void getCloudColor(float);
		void getCloudHeight(void);
		void getCloudHeight(void);
		void getEntity(EntityUniqueID,bool);
		void getEntity(EntityUniqueID,bool);
		void getEntityIdMap(void);
		void getEntityIdMap(void);
		void getEntityIdMapConst(void);
		void getEntityIdMapConst(void);
		void getFogColor(float);
		void getFogColor(float);
		void getFogDistanceScale(void);
		void getFogDistanceScale(void);
		void getId(void);
		void getId(void);
		void getLevel(void);
		void getLevel(void);
		void getLevelConst(void);
		void getLevelConst(void);
		void getMoonBrightness(void);
		void getMoonBrightness(void);
		void getMoonPhase(void);
		void getMoonPhase(void);
		void getOldSkyDarken(float);
		void getOldSkyDarken(float);
		void getSeasons(void);
		void getSeasons(void);
		void getSkyColor(BlockSource &,BlockPos const&,float);
		void getSkyColor(BlockSource &,BlockPos const&,float);
		void getSkyColor(Entity const&,float);
		void getSkyColor(Entity const&,float);
		void getSkyDarken(float);
		void getSkyDarken(float);
		void getSkyDarken(void);
		void getSkyDarken(void);
		void getSpawnYPosition(void);
		void getSpawnYPosition(void);
		void getStarBrightness(float);
		void getStarBrightness(float);
		void getSunAngle(float);
		void getSunAngle(float);
		void getSunIntensity(float,Entity const&,float);
		void getSunIntensity(float,Entity const&,float);
		void getSunlightDirection(float);
		void getSunriseColor(float);
		void getSunriseColor(float);
		void getTimeOfDay(float);
		void getTimeOfDay(float);
		void getTimeOfDay(int,float);
		void getTimeOfDay(int,float);
		void getWeather(void);
		void getWeather(void);
		void hasBedrockFog(void);
		void hasBedrockFog(void);
		void hasCeiling(void);
		void hasCeiling(void);
		void hasGround(void);
		void hasGround(void);
		void init(void);
		void init(void);
		void isDay(void);
		void isDay(void);
		void isFoggyAt(int,int);
		void isFoggyAt(int,int);
		void isNaturalDimension(void);
		void isNaturalDimension(void);
		void isRedstoneTick(void);
		void isRedstoneTick(void);
		void isUltraWarm(void);
		void isUltraWarm(void);
		void isValidSpawn(int,int);
		void isValidSpawn(int,int);
		void load(CompoundTag const&);
		void load(CompoundTag const&);
		void mayRespawn(void);
		void mayRespawn(void);
		void onBlockChanged(BlockSource &,BlockPos const&,FullBlock,FullBlock,int);
		void onBlockChanged(BlockSource &,BlockPos const&,FullBlock,FullBlock,int);
		void onBlockEvent(BlockSource &,int,int,int,int,int);
		void onBlockEvent(BlockSource &,int,int,int,int,int);
		void onNewChunkFor(Player &,LevelChunk &);
		void onNewChunkFor(Player &,LevelChunk &);
		void save(CompoundTag &);
		void save(CompoundTag &);
		void sendBroadcast(Packet const&,Player *);
		void sendBroadcast(Packet const&,Player *);
		void sendPacketForEntity(Entity const&,Packet const&,Player const*);
		void sendPacketForEntity(Entity const&,Packet const&,Player const*);
		void sendPacketForPosition(BlockPos const&,Packet const&,Player const*);
		void sendPacketForPosition(BlockPos const&,Packet const&,Player const*);
		void setBrightnessRamp(uint,float);
		void setBrightnessRamp(uint,float);
		void setCeiling(bool);
		void setCeiling(bool);
		void setUltraWarm(bool);
		void setUltraWarm(bool);
		void tick(void);
		void tick(void);
		void tickRedstone(void);
		void tickRedstone(void);
		void transferEntity(Vec3 const&,std::unique_ptr<CompoundTag,std::default_delete<CompoundTag>>);
		void transferEntity(Vec3 const&,std::unique_ptr<CompoundTag,std::default_delete<CompoundTag>>);
		void updateLightRamp(void);
		void updateLightRamp(void);
		void ~Dimension();
		void ~Dimension();
		void ~Dimension();
		void ~Dimension();
};

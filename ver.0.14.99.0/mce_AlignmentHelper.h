#pragma once
namespace mce{
	class AlignmentHelper{
		public:
		void getAlignedOffset(uint,uint);
		void getAlignedOffset(uint,uint);
		void Attribute(uint,uint,mce::VertexField);
		void Attribute(uint,uint,mce::VertexField);
		void Attribute(void);
		void getLocation(void);
		void getLocation(void);
		void getVertexField(void);
		void getVertexField(void);
		void operator==(mce::Attribute const&);
		void operator==(mce::Attribute const&);
		void bindBlendState(mce::RenderContext &);
		void bindBlendState(mce::RenderContext &);
		void createBlendState(mce::RenderContext &,mce::BlendStateDescription const&);
		void createBlendState(mce::RenderContext &,mce::BlendStateDescription const&);
		void bindBlendState(mce::RenderContext &);
		void bindBlendState(mce::RenderContext &);
		void createBlendState(mce::RenderContext &,mce::BlendStateDescription const&);
		void createBlendState(mce::RenderContext &,mce::BlendStateDescription const&);
		void BlendStateDescription(void);
		void BlendStateDescription(void);
		void operator!=(mce::BlendStateDescription const&);
		void operator==(mce::BlendStateDescription const&);
		void operator==(mce::BlendStateDescription const&);
		void bindBlendState(mce::RenderContext &,bool);
		void bindBlendState(mce::RenderContext &,bool);
		void createBlendState(mce::RenderContext &,mce::BlendStateDescription const&);
		void createBlendState(mce::RenderContext &,mce::BlendStateDescription const&);
		void Buffer(mce::Buffer&&);
		void Buffer(void);
		void Buffer(void);
		void bindBuffer(mce::RenderContext &);
		void bindBuffer(mce::RenderContext &);
		void createBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createDynamicIndexBuffer(mce::RenderContext &,uint,uint);
		void createDynamicIndexBuffer(mce::RenderContext &,uint,uint);
		void createDynamicVertexBuffer(mce::RenderContext &,uint);
		void createIndexBuffer(mce::RenderContext &,uint,void const*,uint);
		void createIndexBuffer(mce::RenderContext &,uint,void const*,uint);
		void createVertexBuffer(mce::RenderContext &,uint,void const*,uint);
		void createVertexBuffer(mce::RenderContext &,uint,void const*,uint);
		void getInternalBufferSize(void);
		void isValid(void);
		void isValid(void);
		void operator=(mce::Buffer&&);
		void operator=(mce::Buffer&&);
		void recreateBuffer(mce::RenderContext &,uint,void const*,uint);
		void recreateBuffer(mce::RenderContext &,uint,void const*,uint);
		void releaseBuffer(void);
		void releaseBuffer(void);
		void updateBuffer(mce::RenderContext &,uint,void const*,uint);
		void updateBuffer(mce::RenderContext &,uint,void const*,uint);
		void ~Buffer();
		void ~Buffer();
		void BufferBase(mce::BufferBase&&);
		void BufferBase(void);
		void BufferBase(void);
		void createBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void getInternalBufferSize(void);
		void getInternalBufferSize(void);
		void operator=(mce::BufferBase&&);
		void operator=(mce::BufferBase&&);
		void releaseBuffer(void);
		void releaseBuffer(void);
		void updateBuffer(mce::RenderContext &,uint,void const*,uint);
		void updateBuffer(mce::RenderContext &,uint,void const*,uint);
		void ~BufferBase();
		void ~BufferBase();
		void BufferOGL(mce::BufferOGL&&);
		void BufferOGL(mce::BufferOGL&&);
		void BufferOGL(void);
		void BufferOGL(void);
		void bindBuffer(mce::RenderContext &);
		void createBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void isValid(void);
		void isValid(void);
		void operator=(mce::BufferOGL&&);
		void operator=(mce::BufferOGL&&);
		void recreateBuffer(mce::RenderContext &,uint,void const*,uint);
		void releaseBuffer(void);
		void releaseBuffer(void);
		void updateBuffer(mce::RenderContext &,uint,void const*,uint,mce::MapType);
		void ~BufferOGL();
		void ~BufferOGL();
		void ConstantBufferContainer(mce::ConstantBufferContainer&&);
		void ConstantBufferContainer(mce::ConstantBufferContainer&&);
		void ConstantBufferContainer(void);
		void ConstantBufferContainer(void);
		void allocateRenderContextBuffer(mce::RenderContext &);
		void allocateRenderContextBuffer(mce::RenderContext &);
		void bindConstantBuffer(mce::RenderContext &,uint,uint);
		void finalizeConstantBufferLayout(void);
		void finalizeConstantBufferLayout(void);
		void getConstantBufferName(void);
		void getConstantBufferName(void);
		void getConstantBufferSize(void);
		void getUnspecializedShaderConstant(std::string const&);
		void getUnspecializedShaderConstant(std::string const&);
		void isDirty(void);
		void registerReflectedShaderParameter(mce::UniformMetaData const&);
		void registerReflectedShaderParameter(mce::UniformMetaData const&);
		void sync(mce::RenderContext &);
		void sync(mce::RenderContext &);
		void ~ConstantBufferContainer();
		void ~ConstantBufferContainer();
		void ConstantBufferContainerBase(mce::ConstantBufferContainerBase&&);
		void ConstantBufferContainerBase(mce::ConstantBufferContainerBase&&);
		void ConstantBufferContainerBase(void);
		void ConstantBufferContainerBase(void);
		void allocateRenderContextBuffer(mce::RenderContext &);
		void allocateRenderContextBuffer(mce::RenderContext &);
		void bindConstantBuffer(mce::RenderContext &,uint,uint);
		void bindConstantBuffer(mce::RenderContext &,uint,uint);
		void finalizeConstantBufferLayout(void);
		void finalizeConstantBufferLayout(void);
		void getConstantBufferName(void);
		void getConstantBufferName(void);
		void getConstantBufferSize(void);
		void getConstantBufferSize(void);
		void isDirty(void);
		void isDirty(void);
		void registerReflectedShaderParameter(mce::UniformMetaData const&);
		void registerReflectedShaderParameter(mce::UniformMetaData const&);
		void registerShaderParameter(mce::ShaderConstantBase const&);
		void registerShaderParameter(mce::ShaderConstantBase const&);
		void reserveMemoryForShaderConstants(uint,uint);
		void reserveMemoryForShaderConstants(uint,uint);
		void sync(mce::RenderContext &);
		void ~ConstantBufferContainerBase();
		void ~ConstantBufferContainerBase();
		void ConstantBufferContainerOGL(mce::ConstantBufferContainerOGL&&);
		void ConstantBufferContainerOGL(mce::ConstantBufferContainerOGL&&);
		void ConstantBufferContainerOGL(void);
		void ConstantBufferContainerOGL(void);
		void sync(mce::RenderContext &);
		void sync(mce::RenderContext &);
		void ~ConstantBufferContainerOGL();
		void ~ConstantBufferContainerOGL();
		void ConstantBufferMetaData(void);
		void ConstantBufferMetaData(void);
		void getConstantBufferName(void);
		void getConstantBufferName(void);
		void getRequiredSpaceForUniforms(void);
		void getRequiredSpaceForUniforms(void);
		void getUniformMetaDataByIndex(uint);
		void getUniformMetaDataByName(std::string const&);
		void ~ConstantBufferMetaData();
		void ~ConstantBufferMetaData();
		void ConstantBufferMetaDataManager(void);
		void ConstantBufferMetaDataManager(void);
		void allocateConstantBufferContainers(mce::GlobalConstantBufferManager &);
		void allocateConstantBufferContainers(mce::GlobalConstantBufferManager &);
		void findConstantBuffer(std::string const&);
		void findUniformMetaData(std::string const&);
		void findUniformMetaData(std::string const&);
		void loadJsonFile(mce::GlobalConstantBufferManager &,std::string const&);
		void loadJsonFile(mce::GlobalConstantBufferManager &,std::string const&);
		void ~ConstantBufferMetaDataManager();
		void ~ConstantBufferMetaDataManager();
		void bindDepthStencilState(mce::RenderContext &);
		void bindDepthStencilState(mce::RenderContext &);
		void createDepthState(mce::RenderContext &,mce::DepthStencilStateDescription const&);
		void createDepthState(mce::RenderContext &,mce::DepthStencilStateDescription const&);
		void bindDepthStencilState(mce::RenderContext &);
		void bindDepthStencilState(mce::RenderContext &);
		void createDepthState(mce::RenderContext &,mce::DepthStencilStateDescription const&);
		void createDepthState(mce::RenderContext &,mce::DepthStencilStateDescription const&);
		void setStencilRef(mce::RenderContext &);
		void setStencilRef(mce::RenderContext &);
		void DepthStencilStateDescription(void);
		void DepthStencilStateDescription(void);
		void operator!=(mce::DepthStencilStateDescription const&);
		void operator==(mce::DepthStencilStateDescription const&);
		void operator==(mce::DepthStencilStateDescription const&);
		void DepthStencilStateOGL(void);
		void DepthStencilStateOGL(void);
		void bindDepthStencilState(mce::RenderContext &,bool);
		void bindDepthStencilState(mce::RenderContext &,bool);
		void createDepthState(mce::RenderContext &,mce::DepthStencilStateDescription const&);
		void createDepthState(mce::RenderContext &,mce::DepthStencilStateDescription const&);
		void DeviceInformation(void);
		void DeviceInformation(void);
		void findChipsetInfo(void);
		void findChipsetInfo(void);
		void getChipsetName(void);
		void getChipsetVendorName(void);
		void getGraphicsExtensions(void);
		void getNativeScreenHeight(void);
		void getNativeScreenWidth(void);
		void DeviceInformationBase(void);
		void DeviceInformationBase(void);
		void findChipsetInfo(void);
		void getChipsetInfo(void);
		void getChipsetName(void);
		void getChipsetName(void);
		void getChipsetVendorName(void);
		void getChipsetVendorName(void);
		void getGraphicsExtensions(void);
		void getGraphicsExtensions(void);
		void getGraphicsVersion(void);
		void getNativeScreenHeight(void);
		void getNativeScreenHeight(void);
		void getNativeScreenWidth(void);
		void getNativeScreenWidth(void);
		void DeviceInformationOGL(void);
		void DeviceInformationOGL(void);
		void findChipsetInfo(void);
		void findChipsetInfo(void);
		void EnableScissorTest(bool,bool);
		void EnableScissorTest(bool,bool);
		void EnableScissorTest(float,float,float,float,bool);
		void EnableScissorTest(float,float,float,float,bool);
		void ~EnableScissorTest();
		void ~EnableScissorTest();
		void EntityConstants(void);
		void EntityConstants(void);
		void init(void);
		void init(void);
		void FrameBufferAttachment(mce::FrameBufferAttachment&&);
		void FrameBufferAttachment(void);
		void FrameBufferAttachment(void);
		void bindFrameBufferAttachment(void);
		void createFrameBufferAttachment(mce::RenderContext &);
		void createFrameBufferAttachment(mce::RenderContext &);
		void createFrameBufferAttachment(mce::RenderContext &,mce::Texture &&,uchar);
		void createFrameBufferAttachment(mce::RenderContext &,mce::Texture &&,uchar);
		void ~FrameBufferAttachment();
		void ~FrameBufferAttachment();
		void FrameBufferAttachmentBase(mce::FrameBufferAttachmentBase&&);
		void FrameBufferAttachmentBase(mce::FrameBufferAttachmentBase&&);
		void FrameBufferAttachmentBase(void);
		void FrameBufferAttachmentBase(void);
		void allocateTexture(mce::RenderContext &);
		void allocateTexture(mce::RenderContext &);
		void bindFrameBufferAttachment(void);
		void bindFrameBufferAttachment(void);
		void createFrameBufferAttachment(mce::RenderContext &);
		void createFrameBufferAttachment(mce::RenderContext &);
		void createFrameBufferAttachment(mce::RenderContext &,mce::Texture &&,uchar);
		void createFrameBufferAttachment(mce::RenderContext &,mce::Texture &&,uchar);
		void getFrameBufferAttachmentDescription(void);
		void getFrameBufferAttachmentDescription(void);
		void getTexture(void);
		void ~FrameBufferAttachmentBase();
		void ~FrameBufferAttachmentBase();
		void FrameBufferAttachmentDescription(uint,uint);
		void FrameBufferAttachmentDescription(void);
		void FrameBufferAttachmentDescription(void);
		void setTextureFormatAndAttachmentType(mce::TextureFormat);
		void setTextureFormatAndAttachmentType(mce::TextureFormat);
		void FrameBufferAttachmentOGL(mce::FrameBufferAttachmentOGL&&);
		void FrameBufferAttachmentOGL(mce::FrameBufferAttachmentOGL&&);
		void FrameBufferAttachmentOGL(void);
		void FrameBufferAttachmentOGL(void);
		void allocateRenderBuffer(void);
		void bindRenderBuffer(void);
		void checkBinding(void);
		void createFrameBufferAttachment(mce::RenderContext &);
		void createFrameBufferAttachment(mce::RenderContext &);
		void createFrameBufferAttachment(mce::RenderContext &,mce::Texture &&,uchar);
		void createFrameBufferAttachment(mce::RenderContext &,mce::Texture &&,uchar);
		void createRenderBuffer(void);
		void destroyFrameBufferAttachment(void);
		void destroyRenderBuffer(void);
		void setAttachmentIndexAndClearMask(void);
		void setBackingTexture(void);
		void setResolveSourceAttachment(void);
		void setResolveSourceAttachment(void);
		void ~FrameBufferAttachmentOGL();
		void ~FrameBufferAttachmentOGL();
		void FrameBufferDescription(void);
		void FrameBufferDescription(void);
		void FrameBufferObject(mce::FrameBufferObject&&);
		void FrameBufferObject(void);
		void FrameBufferObject(void);
		void bindFrameBuffer(void);
		void bindFrameBuffer(void);
		void clearDepthStencilBuffer(float,float);
		void clearDepthStencilBuffer(void);
		void clearDepthStencilBuffer(void);
		void clearFrameBuffer(Color const&);
		void clearFrameBuffer(Color const&);
		void clearFrameBuffer(void);
		void clearFrameBuffer(void);
		void clearStencilBuffer(void);
		void clearStencilBuffer(void);
		void createFrameBuffer(mce::RenderContext &,mce::FrameBufferDescription const&);
		void createFrameBuffer(mce::RenderContext &,mce::FrameBufferDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&,mce::Texture &&,uchar);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&,mce::Texture &&,uchar);
		void discardFrameBuffer(mce::FrameBufferAttachmentIdentifier);
		void finalizeFrameBuffer(void);
		void finalizeFrameBuffer(void);
		void resolveFrameBuffer(mce::FrameBufferObject const&);
		void resolveFrameBuffer(mce::FrameBufferObject const&);
		void resolveFrameBuffer(void);
		void resolveFrameBuffer(void);
		void setResolveSource(mce::RenderContext &,mce::FrameBufferObject const&);
		void ~FrameBufferObject();
		void ~FrameBufferObject();
		void FrameBufferObjectBase(mce::FrameBufferObjectBase&&);
		void FrameBufferObjectBase(void);
		void FrameBufferObjectBase(void);
		void bindFrameBuffer(void);
		void bindFrameBuffer(void);
		void clearDepthStencilBuffer(float,float);
		void clearDepthStencilBuffer(float,float);
		void clearFrameBuffer(Color const&);
		void clearFrameBuffer(Color const&);
		void clearStencilBuffer(void);
		void clearStencilBuffer(void);
		void createFrameBuffer(mce::RenderContext &,mce::FrameBufferDescription const&);
		void createFrameBuffer(mce::RenderContext &,mce::FrameBufferDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&,mce::Texture &&,uchar);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&,mce::Texture &&,uchar);
		void finalizeFrameBuffer(void);
		void finalizeFrameBuffer(void);
		void getFrameBufferDescription(void);
		void getFrameBufferDescription(void);
		void resolveFrameBuffer(mce::FrameBufferObject const&);
		void resolveFrameBuffer(mce::FrameBufferObject const&);
		void resolveFrameBuffer(void);
		void resolveFrameBuffer(void);
		void setResolveSource(mce::RenderContext &,mce::FrameBufferObject const&);
		void setResolveSource(mce::RenderContext &,mce::FrameBufferObject const&);
		void setupAttachmentParametersFromParent(mce::FrameBufferAttachment &,mce::FrameBufferAttachmentDescription const&);
		void setupFrameBufferAttachment(mce::FrameBufferAttachment &,mce::FrameBufferAttachmentDescription const&);
		void ~FrameBufferObjectBase();
		void ~FrameBufferObjectBase();
		void FrameBufferObjectOGL(mce::FrameBufferObjectOGL&&);
		void FrameBufferObjectOGL(mce::FrameBufferObjectOGL&&);
		void FrameBufferObjectOGL(void);
		void FrameBufferObjectOGL(void);
		void bindFrameBuffer(void);
		void bindFrameBuffer(void);
		void clearDepthStencilBuffer(float,float);
		void clearDepthStencilBuffer(float,float);
		void clearFrameBuffer(Color const&);
		void clearFrameBuffer(Color const&);
		void clearFrameBufferInternal(Color const&,uint);
		void clearFrameBufferInternal(Color const&,uint);
		void clearStencilBuffer(void);
		void clearStencilBuffer(void);
		void createFrameBuffer(mce::RenderContext &,mce::FrameBufferDescription const&);
		void createFrameBuffer(mce::RenderContext &,mce::FrameBufferDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&,mce::Texture &&,uchar);
		void createFrameBufferAttachment(mce::RenderContext &,mce::FrameBufferAttachmentDescription const&,mce::Texture &&,uchar);
		void destroyFrameBuffer(void);
		void discardFrameBuffer(uint,mce::FrameBufferAttachmentIdentifier const*);
		void finalizeFrameBuffer(void);
		void finalizeFrameBuffer(void);
		void isBound(void);
		void isBound(void);
		void resolveFrameBuffer(mce::FrameBufferObject const&);
		void resolveFrameBuffer(mce::FrameBufferObject const&);
		void resolveFrameBuffer(void);
		void resolveFrameBuffer(void);
		void setResolveSource(mce::RenderContext &,mce::FrameBufferObject const&);
		void setResolveSource(mce::RenderContext &,mce::FrameBufferObject const&);
		void ~FrameBufferObjectOGL();
		void ~FrameBufferObjectOGL();
		void GlobalConstantBufferManager(void);
		void GlobalConstantBufferManager(void);
		void allocateAndSetupConstantBuffersFromMetadata(mce::RenderContext &);
		void allocateAndSetupConstantBuffersFromMetadata(mce::RenderContext &);
		void findConstantBufferContainer(std::string const&);
		void findConstantBufferContainer(std::string const&);
		void refreshWorldConstants(void);
		void refreshWorldConstants(void);
		void ~GlobalConstantBufferManager();
		void ~GlobalConstantBufferManager();
		void init(bool);
		void init(bool);
		void HoloConstants(void);
		void HoloConstants(void);
		void init(void);
		void init(void);
		void ImageDescription(void);
		void getSizeInBytes(void);
		void getSizeInBytes(void);
		void ImmediateBuffer(void);
		void ImmediateBuffer(void);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void isValid(void);
		void isValid(void);
		void releaseBuffer(void);
		void releaseBuffer(void);
		void updateBuffer(mce::RenderContext &,uint,void *&,uint);
		void updateBuffer(mce::RenderContext &,uint,void *&,uint);
		void ImmediateBufferOGL(void);
		void ImmediateBufferOGL(void);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void createDynamicBuffer(mce::RenderContext &,uint,void const*,uint,mce::BufferType);
		void updateBuffer(mce::RenderContext &,uint,void *&,uint);
		void IsDriverWithBrokenCentroid(void);
		void IsDriverWithBrokenCentroid(void);
		void getOpenGLMaskFromFrameBufferAttachmentType(mce::FrameBufferAttachmentType);
		void getOpenGLMaskFromFrameBufferAttachmentType(mce::FrameBufferAttachmentType);
		void MaterialPtr(mce::MaterialPtr&&);
		void MaterialPtr(mce::RenderMaterialGroup &,std::string const&);
		void MaterialPtr(mce::RenderMaterialGroup &,std::string const&);
		void MaterialPtr(void);
		void MaterialPtr(void);
		void _deref(void);
		void _move(mce::MaterialPtr&&);
		void onGroupReloaded(void);
		void onGroupReloaded(void);
		void operator=(mce::MaterialPtr&&);
		void operator=(mce::MaterialPtr&&);
		void ~MaterialPtr();
		void ~MaterialPtr();
		void getBestHorizDirFromViewMatrix(glm::detail::tmat4x4<float> const&);
		void getBestHorizDirFromViewMatrix(glm::detail::tmat4x4<float> const&);
		void interpolateTransforms(glm::detail::tmat4x4<float> &,glm::detail::tmat4x4<float> const&,glm::detail::tmat4x4<float> const&,float);
		void interpolateTransforms(glm::detail::tmat4x4<float> &,glm::detail::tmat4x4<float> const&,glm::detail::tmat4x4<float> const&,float);
		void Mesh(mce::Mesh&&);
		void Mesh(mce::Mesh&&);
		void Mesh(mce::VertexFormat const&,uint,uint,uchar,mce::PrimitiveMode,uchar *,bool);
		void Mesh(mce::VertexFormat const&,uint,uint,uchar,mce::PrimitiveMode,uchar *,bool);
		void Mesh(void);
		void Mesh(void);
		void _move(mce::Mesh&);
		void clearGlobalBuffers(void);
		void clearGlobalBuffers(void);
		void hasIndices(void);
		void hasIndices(void);
		void isTemporary(void);
		void isValid(void);
		void isValid(void);
		void loadIndexBuffer(uint,void const*,uint);
		void loadIndexBuffer(uint,void const*,uint);
		void loadRawData(mce::RenderContext &,uchar *);
		void loadRawData(mce::RenderContext &,uchar *);
		void operator bool(void);
		void operator bool(void);
		void operator=(mce::Mesh&&);
		void operator=(mce::Mesh&&);
		void releaseIndexBuffer(void);
		void render(mce::MaterialPtr const&,mce::TexturePtr const&,mce::TexturePtr const&,mce::TexturePtr const&,uint,uint);
		void render(mce::MaterialPtr const&,mce::TexturePtr const&,mce::TexturePtr const&,mce::TexturePtr const&,uint,uint);
		void render(mce::MaterialPtr const&,mce::TexturePtr const&,mce::TexturePtr const&,uint,uint);
		void render(mce::MaterialPtr const&,mce::TexturePtr const&,mce::TexturePtr const&,uint,uint);
		void render(mce::MaterialPtr const&,mce::TexturePtr const&,uint,uint);
		void render(mce::MaterialPtr const&,mce::TexturePtr const&,uint,uint);
		void render(mce::MaterialPtr const&,uint,uint);
		void render(mce::MaterialPtr const&,uint,uint);
		void reset(void);
		void reset(void);
		void setIndexBufferUsageMode(mce::IndexBufferUsageMode);
		void setIndexBufferUsageMode(mce::IndexBufferUsageMode);
		void ~Mesh();
		void ~Mesh();
		void MultisampledRenderStageWithFrameBufferObject(void);
		void MultisampledRenderStageWithFrameBufferObject(void);
		void postRender(RenderGraphContext &);
		void postRender(RenderGraphContext &);
		void preRender(RenderGraphContext &);
		void preRender(RenderGraphContext &);
		void setResolveRenderStageSource(mce::RenderStageWithFrameBufferObject *);
		void ~MultisampledRenderStageWithFrameBufferObject();
		void ~MultisampledRenderStageWithFrameBufferObject();
		void PerFrameConstants(void);
		void PerFrameConstants(void);
		void init(void);
		void init(void);
		void destroyInstance(void);
		void getGlobalQuadBuffer(mce::RenderContext &,uint);
		void getGlobalQuadBuffer(mce::RenderContext &,uint);
		void getInstance(mce::RenderContext &,uint);
		void getInstance(mce::RenderContext &,uint);
		void onAppSuspended(void);
		void onAppSuspended(void);
		void onAppTerminated(void);
		void onAppTerminated(void);
		void ~QuadIndexBuffer();
		void ~QuadIndexBuffer();
		void ~QuadIndexBuffer();
		void ~QuadIndexBuffer();
		void RasterizerState(void);
		void RasterizerState(void);
		void bindRasterizerState(mce::RenderContext &);
		void bindRasterizerState(mce::RenderContext &);
		void createRasterizerStateDescription(mce::RenderContext &,mce::RasterizerStateDescription const&);
		void createRasterizerStateDescription(mce::RenderContext &,mce::RasterizerStateDescription const&);
		void setScissorRect(mce::RenderContext &,float,float,float,float);
		void setScissorRect(mce::RenderContext &,float,float,float,float);
		void ~RasterizerState();
		void ~RasterizerState();
		void bindRasterizerState(mce::RenderContext &);
		void bindRasterizerState(mce::RenderContext &);
		void createRasterizerStateDescription(mce::RenderContext &,mce::RasterizerStateDescription const&);
		void createRasterizerStateDescription(mce::RenderContext &,mce::RasterizerStateDescription const&);
		void RasterizerStateDescription(void);
		void RasterizerStateDescription(void);
		void operator!=(mce::RasterizerStateDescription const&);
		void operator==(mce::RasterizerStateDescription const&);
		void operator==(mce::RasterizerStateDescription const&);
		void ~RasterizerStateDescription();
		void ~RasterizerStateDescription();
		void bindRasterizerState(mce::RenderContext &,bool);
		void bindRasterizerState(mce::RenderContext &,bool);
		void createRasterizerStateDescription(mce::RenderContext &,mce::RasterizerStateDescription const&);
		void createRasterizerStateDescription(mce::RenderContext &,mce::RasterizerStateDescription const&);
		void setScissorRect(mce::RenderContext &,float,float,float,float);
		void setScissorRect(mce::RenderContext &,float,float,float,float);
		void RenderChunkConstants(void);
		void RenderChunkConstants(void);
		void init(void);
		void init(void);
		void RenderContext(void);
		void RenderContext(void);
		void beginFrame(void);
		void beginFrame(void);
		void captureScreenAsRGB(std::string &,int &,int &);
		void captureScreenAsRGB(std::string &,int &,int &);
		void clearContextState(void);
		void clearContextState(void);
		void clearDepthStencilBuffer(void);
		void clearDepthStencilBuffer(void);
		void clearFrameBuffer(Color const&);
		void clearFrameBuffer(Color const&);
		void clearStencilBuffer(void);
		void createWindowSizeDependentResources(void);
		void createWindowSizeDependentResources(void);
		void discardBackbuffer(void);
		void draw(mce::PrimitiveMode,uint,uint);
		void draw(mce::PrimitiveMode,uint,uint);
		void drawIndexed(mce::PrimitiveMode,uint);
		void drawIndexed(mce::PrimitiveMode,uint,uint);
		void drawIndexed(mce::PrimitiveMode,uint,uint);
		void endFrame(void);
		void endFrame(void);
		void flush(void);
		void getDepthRange(void);
		void getDepthRange(void);
		void getMaxVertexCount(void);
		void getMaxVertexCount(void);
		void isWithinFrame(void);
		void isWithinFrame(void);
		void lostContext(void);
		void setDepthRange(float,float);
		void setDepthRange(float,float);
		void setRenderTarget(void);
		void setRenderTarget(void);
		void setViewport(uint,uint,float,float);
		void setViewport(uint,uint,float,float);
		void swapBuffers(void);
		void unbindAllTextures(void);
		void ~RenderContext();
		void ~RenderContext();
		void RenderContextBase(void);
		void RenderContextBase(void);
		void beginFrame(void);
		void clearContextState(void);
		void clearContextState(void);
		void createWindowSizeDependentResources(void);
		void createWindowSizeDependentResources(void);
		void endFrame(void);
		void getDevice(void);
		void getDevice(void);
		void getRenderTargetSize(void);
		void getRenderTargetSize(void);
		void getStencilReferenceFromParameter(uchar);
		void getStencilReferenceFromParameter(uchar);
		void getStencilReferenceFromRenderContext(void);
		void getStencilReferenceFromRenderContext(void);
		void getSwapChain(void);
		void getSwapChain(void);
		void isHolographicMode(void);
		void isHolographicMode(void);
		void isStereoEnabled(void);
		void isStereoEnabled(void);
		void lostContext(void);
		void lostContext(void);
		void setHolographicMode(bool);
		void setHolographicMode(bool);
		void setRenderTarget(void);
		void setRenderTarget(void);
		void setStencilReference(uchar);
		void unbindAllTextures(void);
		void unbindAllTextures(void);
		void ~RenderContextBase();
		void ~RenderContextBase();
		void get(void);
		void get(void);
		void getAsConst(void);
		void getAsConst(void);
		void RenderContextOGL(void);
		void RenderContextOGL(void);
		void captureScreenAsRGB(std::string &,int &,int &);
		void captureScreenAsRGB(std::string &,int &,int &);
		void clearContextState(void);
		void clearDepthStencilBuffer(void);
		void clearDepthStencilBuffer(void);
		void clearFrameBuffer(Color const&);
		void clearFrameBuffer(Color const&);
		void clearStencilBuffer(void);
		void clearStencilBuffer(void);
		void discardBackbuffer(void);
		void discardBackbuffer(void);
		void draw(mce::PrimitiveMode,uint,uint);
		void draw(mce::PrimitiveMode,uint,uint);
		void drawIndexed(mce::PrimitiveMode,uint);
		void drawIndexed(mce::PrimitiveMode,uint);
		void drawIndexed(mce::PrimitiveMode,uint,uint);
		void drawIndexed(mce::PrimitiveMode,uint,uint);
		void flush(void);
		void flush(void);
		void getDepthRange(void);
		void getDepthRange(void);
		void getMaxVertexCount(void);
		void getMaxVertexCount(void);
		void lostContext(void);
		void lostContext(void);
		void setDepthRange(float,float);
		void setDepthRange(float,float);
		void setRenderTarget(void);
		void setRenderTarget(void);
		void setViewport(uint,uint,float,float);
		void setViewport(uint,uint,float,float);
		void swapBuffers(void);
		void swapBuffers(void);
		void unbindAllTextures(void);
		void unbindAllTextures(void);
		void ~RenderContextOGL();
		void ~RenderContextOGL();
		void RenderContextStateBase(void);
		void RenderContextStateBase(void);
		void removeIfBound(mce::TextureBase const&);
		void removeIfBound(mce::TextureBase const&);
		void RenderDevice(void);
		void RenderDevice(void);
		void checkFeatureSupport(mce::RenderFeature);
		void checkFeatureSupport(mce::RenderFeature);
		void createDevice(mce::RenderContext &);
		void createDevice(mce::RenderContext &);
		void deviceWasLostOnPresent(void);
		void deviceWasLostOnPresent(void);
		void getClosestSupportedSampleDescription(mce::TextureFormat,mce::SampleDescription const&);
		void getClosestSupportedSampleDescription(mce::TextureFormat,mce::SampleDescription const&);
		void getMultisampleQualityLevels(mce::TextureFormat,std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void getMultisampleQualityLevels(mce::TextureFormat,std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void getRenderContext(void);
		void getRenderContext(void);
		void getRenderContextAsConst(void);
		void getRenderContextAsConst(void);
		void lostDevice(void);
		void ~RenderDevice();
		void ~RenderDevice();
		void RenderDeviceBase(void);
		void RenderDeviceBase(void);
		void checkFeatureSupport(mce::RenderFeature);
		void createDevice(mce::RenderContext &);
		void createDevice(mce::RenderContext &);
		void createRenderContext(void);
		void deviceWasLostOnPresent(void);
		void deviceWasLostOnPresent(void);
		void getAttributeList(uint);
		void getClosestSupportedSampleDescription(mce::TextureFormat,mce::SampleDescription const&);
		void getClosestSupportedSampleDescription(mce::TextureFormat,mce::SampleDescription const&);
		void getDeviceInformation(void);
		void getDeviceInformation(void);
		void getMultisampleQualityLevels(mce::TextureFormat,std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void getRenderContext(void);
		void getRenderContext(void);
		void getRenderContextAsConst(void);
		void getRenderContextAsConst(void);
		void initializeFrameBuffer(mce::SwapChain const&,mce::RenderContext &);
		void lostDevice(void);
		void lostDevice(void);
		void registerOrGetAttributeListIndex(std::vector<mce::Attribute,std::allocator<mce::Attribute>> const&);
		void registerOrGetAttributeListIndex(std::vector<mce::Attribute,std::allocator<mce::Attribute>> const&);
		void ~RenderDeviceBase();
		void ~RenderDeviceBase();
		void checkFeatureSupport(mce::RenderFeature);
		void checkFeatureSupport(mce::RenderFeature);
		void createDevice(mce::RenderContext &);
		void createDevice(mce::RenderContext &);
		void getMultisampleQualityLevels(mce::TextureFormat,std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void getMultisampleQualityLevels(mce::TextureFormat,std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void addRenderStage(EyeRenderingModeBit,std::unique_ptr<mce::RenderStage,std::default_delete<mce::RenderStage>>);
		void addRenderStage(EyeRenderingModeBit,std::unique_ptr<mce::RenderStage,std::default_delete<mce::RenderStage>>);
		void addScreenToRenderGraph(std::shared_ptr<AbstractScreen> &);
		void addScreenToRenderGraph(std::shared_ptr<AbstractScreen> &);
		void cleanupRenderScreens(void);
		void cleanupRenderScreens(void);
		void cleanupRenderStage(void);
		void cleanupRenderStage(void);
		void clearRenderGraph(void);
		void clearRenderGraph(void);
		void render(RenderGraphContext &);
		void render(RenderGraphContext &);
		void RenderMaterial(Json::Value const&,mce::RenderMaterial const&);
		void RenderMaterial(Json::Value const&,mce::RenderMaterial const&);
		void RenderMaterial(mce::RenderMaterial const&);
		void RenderMaterial(mce::RenderMaterial const&);
		void RenderMaterial(void);
		void RenderMaterial(void);
		void SpliceShaderPath(std::string &);
		void _buildHeader(Json::Value const&);
		void _buildHeader(Json::Value const&);
		void _parseStateName(std::string const&);
		void addState(mce::RS);
		void compileShader(void);
		void compileShader(void);
		void initContext(void);
		void initContext(void);
		void useWith(mce::RenderContext &,mce::VertexFormat const&,void *);
		void useWith(mce::RenderContext &,mce::VertexFormat const&,void *);
		void ~RenderMaterial();
		void ~RenderMaterial();
		void RenderMaterialGroup(void);
		void RenderMaterialGroup(void);
		void _addRef(mce::MaterialPtr &);
		void _addRef(mce::MaterialPtr &);
		void _fireGroupDestroyed(void);
		void _fireGroupReloaded(void);
		void _getMaterial(std::string const&);
		void _getMaterial(std::string const&);
		void _getMaterialOrDefault(std::string const&,mce::RenderMaterial &);
		void _getMaterialPtr(std::string const&);
		void _loadList(void);
		void _loadList(void);
		void _loadMaterialSet(Json::Value const&,mce::RenderMaterial &,std::string const&);
		void _loadMaterialSet(Json::Value const&,mce::RenderMaterial &,std::string const&);
		void _material(std::string const&,std::string const&);
		void _material(std::string const&,std::string const&);
		void _removeRef(mce::MaterialPtr &);
		void _removeRef(mce::MaterialPtr &);
		void getMaterial(std::string const&);
		void getMaterial(std::string const&);
		void loadList(std::string const&);
		void loadList(std::string const&);
		void onAppResumed(void);
		void onAppResumed(void);
		void onAppSuspended(void);
		void onAppSuspended(void);
		void startLoadAsync(void);
		void startLoadAsync(void);
		void ~RenderMaterialGroup();
		void ~RenderMaterialGroup();
		void ~RenderMaterialGroup();
		void ~RenderMaterialGroup();
		void RenderStage(void);
		void RenderStage(void);
		void getEyeRenderingModeBits(void);
		void getEyeRenderingModeBits(void);
		void postRender(RenderGraphContext &);
		void preRender(RenderGraphContext &);
		void render(RenderGraphContext &);
		void render(RenderGraphContext &);
		void stageWasUsed(void);
		void stageWasUsed(void);
		void ~RenderStage();
		void ~RenderStage();
		void ~RenderStage();
		void ~RenderStage();
		void postRender(RenderGraphContext &);
		void postRender(RenderGraphContext &);
		void preRender(RenderGraphContext &);
		void preRender(RenderGraphContext &);
		void ~RenderStageWithDefaultBackBuffer();
		void ~RenderStageWithDefaultBackBuffer();
		void postRender(RenderGraphContext &);
		void postRender(RenderGraphContext &);
		void preRender(RenderGraphContext &);
		void preRender(RenderGraphContext &);
		void setupStage(RenderGraphContext &,bool);
		void setupStage(RenderGraphContext &,bool);
		void ~RenderStageWithFrameBufferObject();
		void ~RenderStageWithFrameBufferObject();
		void ~RenderStageWithFrameBufferObject();
		void ~RenderStageWithFrameBufferObject();
		void RendererSettings(void);
		void RendererSettings(void);
		void operator==(mce::SampleDescription const&);
		void operator==(mce::SampleDescription const&);
		void bindSamplerState(mce::RenderContext &);
		void bindSamplerState(mce::RenderContext &);
		void createSamplerState(mce::RenderContext &,mce::SamplerStateDescription const&,ushort);
		void createSamplerState(mce::RenderContext &,mce::SamplerStateDescription const&,ushort);
		void bindSamplerState(mce::RenderContext &);
		void bindSamplerState(mce::RenderContext &);
		void createSamplerState(mce::RenderContext &,mce::SamplerStateDescription const&,ushort);
		void createSamplerState(mce::RenderContext &,mce::SamplerStateDescription const&,ushort);
		void SamplerStateDescription(void);
		void SamplerStateDescription(void);
		void operator!=(mce::SamplerStateDescription const&);
		void operator==(mce::SamplerStateDescription const&);
		void SamplerStateOGL(void);
		void SamplerStateOGL(void);
		void bindSamplerState(mce::RenderContext &,bool);
		void createSamplerState(mce::RenderContext &,mce::SamplerStateDescription const&,ushort);
		void createSamplerState(mce::RenderContext &,mce::SamplerStateDescription const&,ushort);
		void Shader(mce::ShaderProgram &,mce::ShaderProgram &,mce::ShaderProgram &);
		void Shader(mce::ShaderProgram &,mce::ShaderProgram &,mce::ShaderProgram &);
		void bindShader(mce::RenderContext &,mce::VertexFormat const&,void *,uint);
		void bindShader(mce::RenderContext &,mce::VertexFormat const&,void *,uint);
		void compileAndLinkShader(void);
		void compileAndLinkShader(void);
		void finalizeShaderUniforms(void);
		void finalizeShaderUniforms(void);
		void freeCompilerResources(void);
		void freeCompilerResources(void);
		void isBuiltFrom(std::string const&,std::string const&,std::string const&,std::string const&);
		void isBuiltFrom(std::string const&,std::string const&,std::string const&,std::string const&);
		void resetLastProgram(void);
		void resetLastProgram(void);
		void ~Shader();
		void ~Shader();
		void ShaderBase(mce::ShaderProgram &,mce::ShaderProgram &,mce::ShaderProgram &);
		void ShaderBase(mce::ShaderProgram &,mce::ShaderProgram &,mce::ShaderProgram &);
		void bindShader(mce::RenderContext &,mce::VertexFormat const&,void *,uint);
		void getAttributeForName(std::string const&,uint);
		void getAttributeForName(std::string const&,uint);
		void isBuiltFrom(std::string const&,std::string const&,std::string const&,std::string const&);
		void isBuiltFrom(std::string const&,std::string const&,std::string const&,std::string const&);
		void reflectShader(mce::RenderDevice &);
		void validateVertexFormat(mce::VertexFormat const&);
		void validateVertexFormat(mce::VertexFormat const&);
		void ~ShaderBase();
		void ~ShaderBase();
		void ShaderConstantBase(void);
		void ShaderConstantBase(void);
		void ShaderConstantBase(void);
		void getConstantSize(void);
		void getConstantSize(void);
		void getElementsExtent(void);
		void getName(void);
		void getName(void);
		void getPrimitiveSize(void);
		void getType(void);
		void getType(void);
		void isDirty(void);
		void isDirty(void);
		void operator==(mce::ShaderConstantBase const&);
		void operator==(mce::ShaderConstantBase const&);
		void ~ShaderConstantBase();
		void ~ShaderConstantBase();
		void ~ShaderConstantBase();
		void ~ShaderConstantBase();
		void ~ShaderConstantBase();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantFloat1();
		void ~ShaderConstantFloat1();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantFloat2();
		void ~ShaderConstantFloat2();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantFloat3();
		void ~ShaderConstantFloat3();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantFloat4();
		void ~ShaderConstantFloat4();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantInt1();
		void ~ShaderConstantInt1();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantInt2();
		void ~ShaderConstantInt2();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantInt3();
		void ~ShaderConstantInt3();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantInt4();
		void ~ShaderConstantInt4();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantMatrix2x2();
		void ~ShaderConstantMatrix2x2();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantMatrix3x3();
		void ~ShaderConstantMatrix3x3();
		void syncUniform(int);
		void syncUniform(int);
		void ~ShaderConstantMatrix4x4();
		void ~ShaderConstantMatrix4x4();
		void syncUniform(int);
		void syncUniform(int);
		void ShaderConstants(void);
		void ShaderConstants(void);
		void init(void);
		void init(void);
		void setShaderColors(void);
		void setShaderColors(void);
		void setTextureDimensions(glm::detail::tvec3<float> const&);
		void setTextureDimensions(glm::detail::tvec3<float> const&);
		void ShaderGroup(void);
		void ShaderGroup(void);
		void destroyInstance(void);
		void destroyInstance(void);
		void getInstance(void);
		void getInstance(void);
		void getShaderProgram(mce::ShaderType,std::string const&,std::string const&);
		void getShaderProgram(mce::ShaderType,std::string const&,std::string const&);
		void loadShader(std::string const&,std::string const&,std::string const&,std::string const&);
		void loadShader(std::string const&,std::string const&,std::string const&,std::string const&);
		void onAppSuspended(void);
		void onAppSuspended(void);
		void ~ShaderGroup();
		void ~ShaderGroup();
		void ~ShaderGroup();
		void ~ShaderGroup();
		void ShaderOGL(mce::ShaderProgram &,mce::ShaderProgram &,mce::ShaderProgram &);
		void ShaderOGL(mce::ShaderProgram &,mce::ShaderProgram &,mce::ShaderProgram &);
		void bindShader(mce::RenderContext &,mce::VertexFormat const&,void *,uint);
		void bindVertexPointers(mce::VertexFormat const&,void *);
		void bindVertexPointers(mce::VertexFormat const&,void *);
		void compileAndLinkShader(void);
		void compileAndLinkShader(void);
		void createAndAttachPrograms(void);
		void deleteShader(void);
		void finalizeShaderUniforms(void);
		void finalizeShaderUniforms(void);
		void freeCompilerResources(void);
		void freeCompilerResources(void);
		void linkShader(void);
		void refelectShaderAttributes(void);
		void reflectShader(void);
		void reflectShaderUniforms(void);
		void resetLastProgram(void);
		void resetLastProgram(void);
		void ~ShaderOGL();
		void ~ShaderOGL();
		void sizeInBytesFromShaderPrimitiveType(mce::ShaderPrimitiveTypes);
		void sizeInBytesFromShaderPrimitiveType(mce::ShaderPrimitiveTypes);
		void IsValid(void);
		void IsValid(void);
		void ShaderProgram(mce::ShaderType,std::string const&,std::string const&,std::string const&);
		void ShaderProgram(mce::ShaderType,std::string const&,std::string const&,std::string const&);
		void ~ShaderProgram();
		void ~ShaderProgram();
		void ShaderProgramBase(std::string const&,std::string const&,mce::ShaderType);
		void ShaderProgramBase(std::string const&,std::string const&,mce::ShaderType);
		void ShaderProgramOGL(mce::ShaderType,std::string const&,std::string const&,std::string const&);
		void deleteShader(void);
		void getUniformNames(void);
		void ~ShaderProgramOGL();
		void ~ShaderProgramOGL();
		void ShaderUniformOGL(std::string const&,int,int,mce::ShaderPrimitiveTypes);
		void ShaderUniformOGL(std::string const&,int,int,mce::ShaderPrimitiveTypes);
		void bind(bool);
		void bind(bool);
		void StencilFaceDescription(void);
		void StencilFaceDescription(void);
		void operator==(mce::StencilFaceDescription const&);
		void operator==(mce::StencilFaceDescription const&);
		void createSwapChain(mce::RenderDevice &,mce::SwapChainDescription const&);
		void getClosestSupportedSampleDescription(mce::SampleDescription const&);
		void getClosestSupportedSampleDescription(mce::SampleDescription const&);
		void getMultisampleQualityLevels(std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void isMultisampledSwapChain(void);
		void present(void);
		void releaseSwapChain(void);
		void resizeBuffers(mce::RenderDevice &,uint,uint);
		void SwapChainBase(void);
		void SwapChainBase(void);
		void createSwapChain(mce::RenderDevice &,mce::SwapChainDescription const&);
		void createSwapChain(mce::RenderDevice &,mce::SwapChainDescription const&);
		void getClosestSupportedSampleDescription(mce::SampleDescription const&);
		void getClosestSupportedSampleDescription(mce::SampleDescription const&);
		void getMultisampleQualityLevels(std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void getMultisampleQualityLevels(std::vector<mce::SampleDescription,std::allocator<mce::SampleDescription>> &);
		void getSwapChainDescription(void);
		void isMultisampledSwapChain(void);
		void isMultisampledSwapChain(void);
		void releaseSwapChain(void);
		void resizeBuffers(uint,uint);
		void resizeBuffers(uint,uint);
		void createSwapChain(mce::RenderDevice &,mce::SwapChainDescription const&);
		void createSwapChain(mce::RenderDevice &,mce::SwapChainDescription const&);
		void present(void);
		void present(void);
		void releaseSwapChain(void);
		void releaseSwapChain(void);
		void resizeBuffers(mce::RenderDevice &,uint,uint);
		void resizeBuffers(mce::RenderDevice &,uint,uint);
		void Texture(uint);
		void Texture(uint,mce::TextureDescription const&);
		void Texture(uint,mce::TextureDescription const&);
		void Texture(void);
		void Texture(void);
		void bindTexture(mce::RenderContext &,uint,uint);
		void bindTexture(mce::RenderContext &,uint,uint);
		void copyTexture(mce::RenderContext &,mce::Texture*,uint,uint,uint,uint);
		void createTexture(mce::RenderContext &,mce::TextureDescription const&);
		void createTexture(mce::RenderContext &,mce::TextureDescription const&);
		void deleteTexture(void);
		void deleteTexture(void);
		void getDescription(void);
		void getDescription(void);
		void getInternalTexture(void);
		void getInternalTexture(void);
		void isCreated(void);
		void isCreated(void);
		void loadMipMap(mce::RenderContext &,void const*,uint);
		void lock(mce::RenderContext &);
		void operator=(mce::Texture&&);
		void operator=(mce::Texture&&);
		void ownsResource(void);
		void subBuffer(mce::RenderContext &,void const*);
		void subBuffer(mce::RenderContext &,void const*);
		void subBuffer(mce::RenderContext &,void const*,uint,uint,uint,uint,uint);
		void supportsMipMaps(void);
		void unbindTexture(mce::RenderContext &,uint);
		void unbindTexture(mce::RenderContext &,uint);
		void unlock(mce::RenderContext &);
		void ~Texture();
		void ~Texture();
		void TextureBase(void);
		void TextureBase(void);
		void bindTexture(mce::RenderContext &,uint,uint);
		void bindTexture(mce::RenderContext &,uint,uint);
		void createTexture(mce::TextureDescription const&);
		void createTexture(mce::TextureDescription const&);
		void deleteTexture(void);
		void deleteTexture(void);
		void getDescription(void);
		void getDescription(void);
		void isCreated(void);
		void isCreated(void);
		void ownsResource(void);
		void ownsResource(void);
		void unbindTexture(mce::RenderContext &,uint);
		void unbindTexture(mce::RenderContext &,uint);
		void ~TextureBase();
		void ~TextureBase();
		void TextureDescription(void);
		void TextureDescription(void);
		void TextureDescription(void);
		void TextureGroup(void);
		void TextureGroup(void);
		void _addRef(mce::TexturePtr &);
		void _addRef(mce::TexturePtr &);
		void _getTexture(ResourceLocation const&);
		void _getTexture(ResourceLocation const&);
		void _removeRef(mce::TexturePtr &);
		void _removeRef(mce::TexturePtr &);
		void addEmptyTexture(ResourceLocation const&,int,int);
		void addEmptyTexture(ResourceLocation const&,int,int);
		void addManualTexture(TexturePair &);
		void addManualTexture(TexturePair &);
		void addTickingTexture(std::unique_ptr<TickingTexture,std::default_delete<TickingTexture>>);
		void addTickingTexture(std::unique_ptr<TickingTexture,std::default_delete<TickingTexture>>);
		void createEmptyTexture(ResourceLocation const&,mce::TextureDescription const&);
		void createEmptyTexture(ResourceLocation const&,mce::TextureDescription const&);
		void findOrLoadTexture(ResourceLocation const&);
		void getLocationFor(DynamicTexture);
		void getLocationFor(DynamicTexture);
		void getTexture(DynamicTexture);
		void getTexture(DynamicTexture);
		void getTexture(ResourceLocation const&);
		void getTexture(ResourceLocation const&);
		void getTexture(TextureData const&);
		void getTexture(TextureData const&);
		void getTexturePair(ResourceLocation const&);
		void getTexturePair(ResourceLocation const&);
		void getTexturePair(mce::TexturePtr const&);
		void getTexturePair(mce::TexturePtr const&);
		void getTickingTexture(int);
		void getTickingTexture(int);
		void getTickingTextureCount(void);
		void getTickingTextureCount(void);
		void isLoaded(ResourceLocation const&);
		void isLoaded(ResourceLocation const&);
		void function<void ();
		void function<void ();
		void loadTexture(ResourceLocation const&,bool);
		void loadTexture(ResourceLocation const&,bool);
		void reloadAll(void);
		void reloadAll(void);
		void removeManualTextureData(TexturePair &);
		void removeManualTextureData(TexturePair &);
		void removeTickingTextures(void);
		void removeTickingTextures(void);
		void softUnloadTexture(ResourceLocation const&);
		void softUnloadTexture(ResourceLocation const&);
		void tick(void);
		void tick(void);
		void unloadAll(void);
		void unloadAll(void);
		void unloadTexture(ResourceLocation const&);
		void unloadTexture(ResourceLocation const&);
		void uploadTexture(ResourceLocation const&,TexturePair &&,bool);
		void uploadTexture(ResourceLocation const&,TexturePair &&,bool);
		void ~TextureGroup();
		void ~TextureGroup();
		void frameBufferAttachmentTypeFromTextureFormat(mce::TextureFormat);
		void frameBufferAttachmentTypeFromTextureFormat(mce::TextureFormat);
		void textureFormatFromIndividualBits(int,int,int,int);
		void textureFormatFromIndividualBits(int,int,int,int);
		void textureFormatToByteStride(mce::TextureFormat);
		void getOpenGLInternalTextureFormat(mce::TextureFormat);
		void getOpenGLInternalTextureFormat(mce::TextureFormat);
		void getOpenGLSizedInternalFormatFromTextureFormat(mce::TextureFormat);
		void getOpenGLSizedInternalFormatFromTextureFormat(mce::TextureFormat);
		void getOpenGLTextureFormatFromTextureFormat(mce::TextureFormat);
		void getOpenGLTextureFormatFromTextureFormat(mce::TextureFormat);
		void getOpenGLTextureTargetFromTextureDescription(mce::TextureDescription const&);
		void getOpenGLTextureTargetFromTextureDescription(mce::TextureDescription const&);
		void getOpenGLTextureTypeFromTextureFormat(mce::TextureFormat);
		void getOpenGLTextureTypeFromTextureFormat(mce::TextureFormat);
		void TextureOGL(mce::TextureOGL&&);
		void TextureOGL(uint);
		void TextureOGL(uint);
		void TextureOGL(void);
		void TextureOGL(void);
		void bindTexture(mce::RenderContext &,uint,uint);
		void copyTexture(mce::RenderContext &,mce::Texture *,uint,uint,uint,uint);
		void copyTexture(mce::RenderContext &,mce::Texture *,uint,uint,uint,uint);
		void createMipStorage(mce::RenderContext &,void const*,uint,uint,uint);
		void createMipStorage(mce::RenderContext &,void const*,uint,uint,uint);
		void createTexture(mce::RenderContext &,mce::TextureDescription const&);
		void createTexture(mce::RenderContext &,mce::TextureDescription const&);
		void deleteTexture(void);
		void deleteTexture(void);
		void getInternalTexture(void);
		void getInternalTexture(void);
		void lock(mce::RenderContext &);
		void lock(mce::RenderContext &);
		void operator=(mce::TextureOGL&&);
		void operator=(mce::TextureOGL&&);
		void setFilteringMode(mce::TextureFiltering);
		void setFilteringMode(mce::TextureFiltering);
		void setWrappingMode(mce::TextureWrapping);
		void setWrappingMode(mce::TextureWrapping);
		void subBuffer(mce::RenderContext &,void const*);
		void subBuffer(mce::RenderContext &,void const*);
		void subBuffer(mce::RenderContext &,void const*,uint,uint,uint,uint,uint);
		void subBuffer(mce::RenderContext &,void const*,uint,uint,uint,uint,uint);
		void supportsMipMaps(void);
		void supportsMipMaps(void);
		void unbindTexture(mce::RenderContext &,uint);
		void unbindTexture(mce::RenderContext &,uint);
		void unlock(mce::RenderContext &);
		void unlock(mce::RenderContext &);
		void ~TextureOGL();
		void ~TextureOGL();
		void TexturePtr(mce::TextureGroup &,ResourceLocation const&);
		void TexturePtr(mce::TextureGroup &,ResourceLocation const&);
		void TexturePtr(mce::TexturePtr&&);
		void TexturePtr(mce::TexturePtr&&);
		void TexturePtr(void);
		void TexturePtr(void);
		void _deref(void);
		void _move(mce::TexturePtr&&);
		void _move(mce::TexturePtr&&);
		void clone(void);
		void clone(void);
		void get(void);
		void get(void);
		void getGroup(void);
		void getGroup(void);
		void hashCode(void);
		void hashCode(void);
		void makeTemporaryWrapper(mce::Texture &);
		void makeTemporaryWrapper(mce::Texture &);
		void onGroupDestroyed(void);
		void onGroupDestroyed(void);
		void onGroupReloaded(void);
		void operator bool(void);
		void operator bool(void);
		void operator*(void);
		void operator*(void);
		void operator->(void);
		void operator->(void);
		void operator->(void);
		void operator->(void);
		void operator=(mce::TexturePtr&&);
		void operator=(mce::TexturePtr&&);
		void ~TexturePtr();
		void ~TexturePtr();
		void fromString(std::string const&);
		void fromString(std::string const&);
		void toString(void);
		void UniformMetaData(void);
		void UniformMetaData(void);
		void getElementsExtent(void);
		void getUniformPrimitiveSize(void);
		void getUniformSize(void);
		void getUniformSize(void);
		void ~UniformMetaData();
		void ~UniformMetaData();
		void VertexFormat(void);
		void VertexFormat(void);
		void enableField(mce::VertexField);
		void enableField(mce::VertexField);
		void getFieldOffset(mce::VertexField);
		void getFieldOffset(mce::VertexField);
		void getFieldOffset(mce::VertexField,void *);
		void getFieldOffset(mce::VertexField,void *);
		void getID(void);
		void getVertexSize(void);
		void getVertexSize(void);
		void hasField(mce::VertexField);
		void hasField(mce::VertexField);
		void operator bool(void);
		void operator bool(void);
		void operator!=(mce::VertexFormat const&);
		void operator<(mce::VertexFormat const&);
		void operator==(mce::VertexFormat const&);
		void WeatherConstants(void);
		void WeatherConstants(void);
		void init(void);
		void init(void);
		void WorldConstants(void);
		void WorldConstants(void);
		void init(void);
		void init(void);
		void refreshWorldConstants(void);
		void refreshWorldConstants(void);
		void WorldConstantsHolographic(void);
		void WorldConstantsHolographic(void);
		void _adjustViewMatsForStereo(Matrix &,Matrix &,Matrix const&);
		void _setConstantsForHolographicDrawing(Matrix const&);
		void _setConstantsForHolographicDrawing(Matrix const&);
		void _setConstantsForHolographicDrawing_DualPass(Matrix const&,bool);
		void _setConstantsForHolographicDrawing_DualPass(Matrix const&,bool);
		void _setConstantsForNormalDrawing(Matrix const&);
		void _setConstantsForNormalDrawing(Matrix const&);
		void _setConstantsForTextureDrawing(Matrix const&);
		void _setConstantsForTextureDrawing(Matrix const&);
		void _setConstantsForTextureDrawing_DualPass(Matrix const&,bool);
		void _setConstantsForTextureDrawing_DualPass(Matrix const&,bool);
		void getLeftShiftMat(void);
		void getLeftShiftMat(void);
		void getMatrixPatch(Matrix &);
		void getMatrixPatch(Matrix &);
		void init(bool);
		void init(bool);
		void refreshWorldConstants(bool,bool);
		void refreshWorldConstants(bool,bool);
		void resetViewProjOverride(void);
		void resetViewProjOverride(void);
		void setLeftAndRightShiftMats(Matrix &,Matrix &);
		void setLeftAndRightShiftMats(Matrix &,Matrix &);
		void setMatrixPatch(Matrix const&);
		void setMatrixPatch(Matrix const&);
		void setRenderTextureStereo(bool);
		void setRenderTextureStereo(bool);
		void setViewProjOverrides(Matrix &,Matrix &,Matrix &,Matrix &);
		void setViewProjOverrides(Matrix &,Matrix &,Matrix &,Matrix &);
		void _getParent(std::string const&,std::string const&);
		void _getParent(std::string const&,std::string const&);
		void _isMaterialGroup(Json::Value const&);
		void glInvalidateFramebufferMCE(uint,int,uint const*);
		void glInvalidateFramebufferMCE(uint,int,uint const*);
		void glTargetFromBufferType(mce::BufferType);
		void glTargetFromBufferType(mce::BufferType);
		void initGLExtension(void);
		void initGLExtension(void);
		void splitString(std::string const&,char);
	}
};

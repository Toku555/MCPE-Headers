#pragma once
class PlayScreenModel{
	public:
		PlayScreenModel(MinecraftClient &);
		PlayScreenModel(MinecraftClient &);
		void _fetchInviteCount(void);
		void _fetchRealmsPlayerCounts(void);
		void _fetchRealmsWorlds(void);
		void _fetchRealmsWorlds(void);
		void _fetchTrialAvailability(void);
		void _initializeRealmsWorlds(void);
		void _isValidWorld(int,WorldType,NetworkWorldType);
		void _populateLocalWorlds(void);
		void _populateLocalWorlds(void);
		void _populateNetworkWorlds(void);
		void _populateNetworkWorlds(void);
		void _populateRealmsWorlds(void);
		void _populateRealmsWorlds(void);
		void _removeExternalNetworkWorld(int);
		void _removeLocalWorld(int);
		void _removeLocalWorld(int);
		void _resetUpdateIntervals(void);
		void _setIsDirty(bool);
		void _sortRealmsWorlds(std::string,std::vector<Realms::World,std::allocator<Realms::World>> &);
		void _sortRealmsWorlds(std::string,std::vector<Realms::World,std::allocator<Realms::World>> &);
		void _startExternalNetworkWorld(int);
		void _startExternalNetworkWorld(int);
		void _startLocalWorld(int);
		void _startLocalWorld(int);
		void _startRealmsWorld(int);
		void _startRealmsWorld(int);
		void _startRemoteNetworkWorld(int);
		void _startRemoteNetworkWorld(int);
		void _startXBLiveNetworkWorld(int);
		void _startXBLiveNetworkWorld(int);
		void _updateOwnerInfo(void);
		void _updateOwnerInfo(void);
		void _willCauseDataLossUponSave(int,WorldType);
		void _willCauseDataLossUponSave(int,WorldType);
		void areExternalAndRemoteServerSame(ExternalServer &,PingedCompatibleServer);
		void areExternalAndRemoteServerSame(ExternalServer &,PingedCompatibleServer);
		void getLocalWorldAtIndex(int);
		void getLocalWorldAtIndex(int);
		void getNetworkWorldAtIndex(int,NetworkWorldType);
		void getNetworkWorldAtIndex(int,NetworkWorldType);
		void getPendingInviteCount(void);
		void getPendingInviteCount(void);
		void getRealmTrialAvailable(void);
		void getRealmTrialAvailable(void);
		void getRealmWorldAtIndex(int);
		void getRealmWorldAtIndex(int);
		void getRealmsCompatibility(void);
		void getRealmsCompatibility(void);
		void getRealmsCompatibilityCheckComplete(void);
		void getRealmsCompatibilityCheckComplete(void);
		void getRealmsFirstFetchComplete(void);
		void getRealmsFirstFetchComplete(void);
		void getRealmsStatus(void);
		void getRealmsStatus(void);
		void getWorldCount(WorldType,NetworkWorldType);
		void getWorldCount(WorldType,NetworkWorldType);
		void handleEditRealm(int);
		void handleEditRealm(int);
		void handleLeaveRealm(int);
		void handleLeaveRealm(int);
		void handleStartRealm(int);
		void handleStartRealm(int);
		void importLevel(void);
		void importLevel(void);
		void isDirty(void);
		void isDirty(void);
		void isEduMode(void);
		void navigateToAddExternalScreen(void);
		void navigateToAddExternalScreen(void);
		void navigateToCreateWorldScreen(WorldType);
		void navigateToCreateWorldScreen(WorldType);
		void navigateToEditWorldScreen(int);
		void navigateToEditWorldScreen(int);
		void refresh(WorldType);
		void refresh(WorldType);
		void removeWorld(int,WorldType,NetworkWorldType);
		void removeWorld(int,WorldType,NetworkWorldType);
		void repopulateLocalWorlds(void);
		void repopulateLocalWorlds(void);
		void setForceUpdate(void);
		void setForceUpdate(void);
		void startWorld(int,WorldType,NetworkWorldType);
		void startWorld(int,WorldType,NetworkWorldType);
		void startWorldSearch(void);
		void startWorldSearch(void);
		void tickRealms(void);
		void tickRealms(void);
		void ~PlayScreenModel();
		void ~PlayScreenModel();
		void ~PlayScreenModel();
		void ~PlayScreenModel();
};

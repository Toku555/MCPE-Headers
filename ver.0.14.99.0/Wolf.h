#pragma once
class Wolf{
	public:
		Wolf(BlockSource &);
		Wolf(BlockSource &);
		Wolf(BlockSource &);
		void _avoidSnowBury(void);
		void _avoidSnowBury(void);
		void _getAmbientSound(void);
		void _getAmbientSound(void);
		void _getDeathSound(void);
		void _getDeathSound(void);
		void _getHurtSound(void);
		void _getHurtSound(void);
		void _isHurt(void);
		void _playStepSound(BlockPos const&,int);
		void _playStepSound(BlockPos const&,int);
		void _setTameableAttributes(void);
		void _setTameableAttributes(void);
		void addAdditionalSaveData(CompoundTag &);
		void addAdditionalSaveData(CompoundTag &);
		void addRider(Entity &);
		void addRider(Entity &);
		void canAddRider(Entity &);
		void canAddRider(Entity &);
		void canBeLeashed(void);
		void canBeLeashed(void);
		void canInteractWith(Player &);
		void canInteractWith(Player &);
		void canMate(Animal const&);
		void canMate(Animal const&);
		void createBreedOffspring(Animal &);
		void createBreedOffspring(Animal &);
		void doHurtTarget(Entity *);
		void doHurtTarget(Entity *);
		void getBodyRollAngle(float,float);
		void getBodyRollAngle(float,float);
		void getCollarColor(void);
		void getCollarColor(void);
		void getEntityTypeId(void);
		void getEntityTypeId(void);
		void getHeadRollAngle(float);
		void getHeadRollAngle(float);
		void getInteractText(Player &);
		void getInteractText(Player &);
		void getRideHeight(void);
		void getRideHeight(void);
		void getTailAngle(float);
		void getTailAngle(float);
		void getWetShade(float);
		void handleEntityEvent(EntityEvent,int);
		void handleEntityEvent(EntityEvent,int);
		void hurt(EntityDamageSource const&,int);
		void hurt(EntityDamageSource const&,int);
		void interactWithPlayer(Player &);
		void interactWithPlayer(Player &);
		void isAlliedTo(Mob *);
		void isAlliedTo(Mob *);
		void isAngry(void);
		void isAngry(void);
		void isFood(ItemInstance const&);
		void isFood(ItemInstance const&);
		void isInterested(void);
		void isWet(void);
		void newServerAiStep(void);
		void newServerAiStep(void);
		void normalTick(void);
		void normalTick(void);
		void postProcessOffspring(Animal &,Animal &);
		void postProcessOffspring(Animal &,Animal &);
		void readAdditionalSaveData(CompoundTag const&);
		void readAdditionalSaveData(CompoundTag const&);
		void registerAttributes(void);
		void registerAttributes(void);
		void setAngry(bool);
		void setCollarColor(PaletteColor);
		void setCollarColor(PaletteColor);
		void setInterested(bool);
		void setInterested(bool);
		void setOwner(EntityUniqueID);
		void setOwner(EntityUniqueID);
		void setTarget(Mob *);
		void setTarget(Mob *);
		void setWet(bool);
		void shouldDespawn(void);
		void shouldDespawn(void);
		void ~Wolf();
		void ~Wolf();
};

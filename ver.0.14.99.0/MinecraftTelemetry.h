#pragma once
class MinecraftTelemetry{
	public:
		MinecraftTelemetry(Social::UserManager &,std::string const&);
		MinecraftTelemetry(Social::UserManager &,std::string const&);
		void _OnSignIn(void);
		void _OnSignOut(void);
		void _hasNeverVisitedBiome(int);
		void _hasNeverVisitedBiome(int);
		void _loadVisitedBiomes(void);
		void _loadVisitedBiomes(void);
		void _saveVisitedBiomes(void);
		void _saveVisitedBiomes(void);
		void addListener(std::unique_ptr<Social::Telemetry::IEventListener,std::default_delete<Social::Telemetry::IEventListener>>);
		void anonymizeIPAddress(std::string const&);
		void anonymizeIPAddress(std::string const&);
		void fireEventAwardAchievement(Player *,MinecraftTelemetry::AchievementIds);
		void fireEventAwardAchievement(Player *,MinecraftTelemetry::AchievementIds);
		void fireEventBlockBroken(Player *,FullBlock &);
		void fireEventBlockBroken(Player *,FullBlock &);
		void fireEventBlockPlaced(Player *,FullBlock const&);
		void fireEventBlockPlaced(Player *,FullBlock const&);
		void fireEventCauldronUsed(Player *,short,uint,short);
		void fireEventCauldronUsed(Player *,short,uint,short);
		void fireEventConnectionFailed(MinecraftTelemetry::ConnectionFailureReason);
		void fireEventConnectionFailed(MinecraftTelemetry::ConnectionFailureReason);
		void fireEventCraftingSessionEnd(Player *);
		void fireEventCraftingSessionEnd(Player *);
		void fireEventCraftingSessionStart(Player *,uint);
		void fireEventCraftingSessionStart(Player *,uint);
		void fireEventEndOfDay(Player *,Level &);
		void fireEventEndOfDay(Player *,Level &);
		void fireEventFirstTimeClientOpen(void);
		void fireEventGameSessionComplete(Player *,MinecraftClient *,Level &,ulong long);
		void fireEventGameSessionComplete(Player *,MinecraftClient *,Level &,ulong long);
		void fireEventGameSessionStart(Player *,MinecraftClient *,Level &,std::string const&);
		void fireEventGameSessionStart(Player *,MinecraftClient *,Level &,std::string const&);
		void fireEventHardwareInfo(void);
		void fireEventHardwareInfo(void);
		void fireEventItemAcquired(Player *,ItemInstance const&,uint,MinecraftTelemetry::AcquisitionMethod);
		void fireEventItemAcquired(Player *,ItemInstance const&,uint,MinecraftTelemetry::AcquisitionMethod);
		void fireEventItemCrafted(Player *,ItemInstance const&);
		void fireEventItemCrafted(Player *,ItemInstance const&);
		void fireEventItemDestroyed(Player *,ItemInstance const&,uint);
		void fireEventItemDropped(Player *,ItemInstance const&);
		void fireEventItemDropped(Player *,ItemInstance const&);
		void fireEventItemEnchanted(Player *,ItemInstance const&,ulong long);
		void fireEventItemSmelted(Player *,ItemInstance const&,ItemInstance const&);
		void fireEventItemSmelted(Player *,ItemInstance const&,ItemInstance const&);
		void fireEventItemUsed(Player *,ItemInstance const&,MinecraftTelemetry::UseMethod);
		void fireEventItemUsed(Player *,ItemInstance const&,MinecraftTelemetry::UseMethod);
		void fireEventJoinCanceled(LoadingState);
		void fireEventJoinCanceled(LoadingState);
		void fireEventJukeboxUsed(Player *,ItemInstance const&);
		void fireEventMenuShown(Player *,uint,uint);
		void fireEventMobInteracted(Player *,Mob &,MinecraftTelemetry::InteractionType);
		void fireEventMobInteracted(Player *,Mob &,MinecraftTelemetry::InteractionType);
		void fireEventMobKilled(Player *,Entity *,Mob &,uint);
		void fireEventMobKilled(Player *,Entity *,Mob &,uint);
		void fireEventMultiplayerConnectionStateChanged(bool,std::string const&,std::string const&,uint,uint,uint,std::string const&);
		void fireEventMultiplayerConnectionStateChanged(bool,std::string const&,std::string const&,uint,uint,uint,std::string const&);
		void fireEventMultiplayerRoundEnd(Player *,int);
		void fireEventMultiplayerRoundEnd(Player *,int);
		void fireEventMultiplayerRoundStart(Player *,Level &,std::string const&,int,std::string const&,int);
		void fireEventMultiplayerRoundStart(Player *,Level &,std::string const&,int,std::string const&,int);
		void fireEventOptionsUpdated(Options &);
		void fireEventOptionsUpdated(Options &);
		void fireEventPerformanceMetrics(ProfilerLiteTelemetry const&);
		void fireEventPerformanceMetrics(ProfilerLiteTelemetry const&);
		void fireEventPlayerBounced(Player *,FullBlock const&,int);
		void fireEventPlayerBounced(Player *,FullBlock const&,int);
		void fireEventPlayerTravelled(Player *,float);
		void fireEventPlayerTravelled(Player *,float);
		void fireEventPortalBuilt(Player *,DimensionId);
		void fireEventPortalBuilt(Player *,DimensionId);
		void fireEventPortalUsed(Player *,DimensionId,DimensionId);
		void fireEventPortalUsed(Player *,DimensionId,DimensionId);
		void fireEventPotionBrewed(Player *,ItemInstance const&,uint);
		void fireEventPotionBrewed(Player *,ItemInstance const&,uint);
		void fireEventScreenChanged(std::string const&,std::string const&,std::string const&);
		void fireEventScreenChanged(std::string const&,std::string const&,std::string const&);
		void fireEventSetValidForAcheivements(Player *,bool);
		void fireEventSetValidForAcheivements(Player *,bool);
		void fireEventSignInToXboxLive(std::string const&);
		void fireEventSignInToXboxLive(std::string const&);
		void fireEventSignOutOfXboxLive(void);
		void fireEventSignOutOfXboxLive(void);
		void fireEventSpecialMobBuilt(Player *,Mob &);
		void fireEventStartClient(void);
		void fireEventStartClient(void);
		void fireEventStartWorld(std::string const&,std::string const&);
		void fireEventStartWorld(std::string const&,std::string const&);
		void fireEventStoreOfferPurchaseAttempt(MinecraftClient &,Offer const&);
		void fireEventStoreOfferPurchaseAttempt(MinecraftClient &,Offer const&);
		void fireEventStoreOfferPurchaseResolved(MinecraftClient &,Offer const&,bool);
		void fireEventStoreOfferPurchaseResolved(MinecraftClient &,Offer const&,bool);
		void fireEventUploadSkin(std::string const&,std::string const&);
		void fireEventVehicleExited(Player *,uint,ulong long);
		void fireEventVehicleExited(Player *,uint,ulong long);
		void fireEventWorldGenerated(std::string const&,LevelSettings const&);
		void fireEventWorldGenerated(std::string const&,LevelSettings const&);
		void fireEventWorldLoaded(Player *,LevelData &);
		void fireEventWorldLoaded(Player *,LevelData &);
		void fireEventWorldUnloaded(Player *,LevelData const&,uint);
		void forceSendEvents(void);
		void forceSendEvents(void);
		void getTelemetryManager(void);
		void tick(void);
		void tick(void);
};

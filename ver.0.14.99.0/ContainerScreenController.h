#pragma once
class ContainerScreenController{
	public:
		ContainerScreenController(std::shared_ptr<MinecraftScreenModel>);
		ContainerScreenController(std::shared_ptr<MinecraftScreenModel>);
		void _canStartSplit(std::string const&,int);
		void _getAutoPlaceOrder(std::string const&);
		void _getButtonADescription(void);
		void _getButtonADescription(void);
		void _getButtonXDescription(void);
		void _getButtonXDescription(void);
		void _getCoalesceOrder(std::string const&);
		void _getCollectionIndex(UIPropertyBag *);
		void _getCollectionIndex(UIPropertyBag *);
		void _getCollectionName(UIPropertyBag *);
		void _getCollectionName(UIPropertyBag *);
		void _getInventorySelectedItemId(void);
		void _getShouldSelectedItemStackProgressBarBeVisible(void);
		void _getStackCount(int);
		void _getStackItemColor(ItemInstance const*);
		void _getStackItemCount(ItemInstance const*);
		void _handleAutoPlace(std::string const&,int);
		void _handleButtonIsHeld(std::string const&,int,bool);
		void _handleButtonIsHeld(std::string const&,int,bool);
		void _handleCoalesceStack(std::string const&);
		void _handleCoalesceStack(std::string const&);
		void _handleDropItem(std::string const&,int,DropItemAmount);
		void _handleDropItem(std::string const&,int,DropItemAmount);
		void _handleDropSelectedItem(DropItemAmount);
		void _handleHeldButton(int);
		void _handleSplit(std::string const&,int);
		void _handleTakeAllPlaceAll(std::string const&,int);
		void _handleTakeAmount(int,std::string const&,int);
		void _handleTakeHalfPlaceOne(std::string const&,int);
		void _handleTakePlace(short,std::string const&,int);
		void _handleTakePlace(short,std::string const&,int);
		void _onContainerSlotHovered(std::string const&,int);
		void _onContainerSlotHovered(std::string const&,int);
		void _registerBindings(void);
		void _registerBindings(void);
		void _registerEventHandlers(void);
		void _registerEventHandlers(void);
		void _releaseHeldButton(std::string const&,int,short);
		void _releaseHeldButton(std::string const&,int,short);
		void _resetHeldButton(void);
		void _resetSplitStack(void);
		void _selectionActive(void);
		void _selectionActive(void);
		void _updateHeldButtonStackTaken(void);
		void createContainerManagerController<AnvilContainerManagerModel,AnvilContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<AnvilContainerManagerModel,AnvilContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<BrewingStandContainerManagerModel,BrewingStandContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<BrewingStandContainerManagerModel,BrewingStandContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<ChestContainerManagerModel,ChestContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<ChestContainerManagerModel,ChestContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<ChestContainerManagerModel,ChestContainerManagerController,EntityUniqueID const&>(EntityUniqueID const&);
		void createContainerManagerController<ChestContainerManagerModel,ChestContainerManagerController,EntityUniqueID const&>(EntityUniqueID const&);
		void createContainerManagerController<CraftingContainerManagerModel,CraftingContainerManagerController,bool &,BlockPos &>(bool &,BlockPos &);
		void createContainerManagerController<CraftingContainerManagerModel,CraftingContainerManagerController,bool &,BlockPos &>(bool &,BlockPos &);
		void createContainerManagerController<DispenserContainerManagerModel,LevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<DispenserContainerManagerModel,LevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<DropperContainerManagerModel,LevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<DropperContainerManagerModel,LevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<EnchantingContainerManagerModel,EnchantingContainerManagerController,BlockPos const&>(BlockPos const&);
		void createContainerManagerController<EnchantingContainerManagerModel,EnchantingContainerManagerController,BlockPos const&>(BlockPos const&);
		void createContainerManagerController<FurnaceContainerManagerModel,FurnaceContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<FurnaceContainerManagerModel,FurnaceContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<HopperContainerManagerModel,LevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<HopperContainerManagerModel,LevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<HopperContainerManagerModel,LevelContainerManagerController,EntityUniqueID const&>(EntityUniqueID const&);
		void createContainerManagerController<HopperContainerManagerModel,LevelContainerManagerController,EntityUniqueID const&>(EntityUniqueID const&);
		void createContainerManagerController<HorseContainerManagerModel,HorseContainerManagerController,EntityUniqueID const&,bool &>(EntityUniqueID const&,bool &);
		void createContainerManagerController<HorseContainerManagerModel,HorseContainerManagerController,EntityUniqueID const&,bool &>(EntityUniqueID const&,bool &);
		void createContainerManagerController<HorseContainerManagerModel,PocketHorseContainerManagerController,EntityUniqueID const&,bool &>(EntityUniqueID const&,bool &);
		void createContainerManagerController<HorseContainerManagerModel,PocketHorseContainerManagerController,EntityUniqueID const&,bool &>(EntityUniqueID const&,bool &);
		void createContainerManagerController<PocketDispenserContainerManagerModel,PocketLevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<PocketDispenserContainerManagerModel,PocketLevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<PocketDropperContainerManagerModel,PocketLevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<PocketDropperContainerManagerModel,PocketLevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<PocketHopperContainerManagerModel,PocketLevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<PocketHopperContainerManagerModel,PocketLevelContainerManagerController,BlockPos &>(BlockPos &);
		void createContainerManagerController<PocketHopperContainerManagerModel,PocketLevelContainerManagerController,EntityUniqueID const&>(EntityUniqueID const&);
		void createContainerManagerController<PocketHopperContainerManagerModel,PocketLevelContainerManagerController,EntityUniqueID const&>(EntityUniqueID const&);
		void getCallbackInterval(void);
		void getCallbackInterval(void);
		void getItemInstance(std::string const&,int);
		void handleGameEventNotification(ui::GameEventNotification);
		void handleGameEventNotification(ui::GameEventNotification);
		void onOpen(void);
		void onOpen(void);
		void setAssociatedBlockPos(BlockPos const&);
		void setAssociatedBlockPos(BlockPos const&);
		void setAssociatedEntityUniqueID(EntityUniqueID);
		void setAssociatedEntityUniqueID(EntityUniqueID);
		void tick(void);
		void tick(void);
		void ~ContainerScreenController();
		void ~ContainerScreenController();
		void ~ContainerScreenController();
		void ~ContainerScreenController();
};

#pragma once
class FocusManager{
	public:
		FocusManager(void);
		FocusManager(void);
		void _assignFocusGridInformation(std::shared_ptr<UIControl> const&);
		void _assignFocusGridInformation(std::shared_ptr<UIControl> const&);
		void _calculateSweepDirectionAngleAndCorner(SweepDescription const&,glm::detail::tvec2<float> &,float &,glm::detail::tvec2<float> &);
		void _calculateSweepDirectionAngleAndCorner(SweepDescription const&,glm::detail::tvec2<float> &,float &,glm::detail::tvec2<float> &);
		void _findFocusControlIndex(std::shared_ptr<UIControl> &);
		void _findFocusToControlAngleAndDist(SweepDescription const&,glm::detail::tvec2<float> const&,glm::detail::tvec2<float> const&,glm::detail::tvec2<float>&,float &);
		void _getControlAtFocusPoint(SweepDescription const&,std::vector<std::shared_ptr<UIControl>,std::allocator<std::shared_ptr<UIControl>>> const&);
		void _getControlAtFocusPoint(SweepDescription const&,std::vector<std::shared_ptr<UIControl>,std::allocator<std::shared_ptr<UIControl>>> const&);
		void _initializeFocusControl(std::shared_ptr<UIControl> const&);
		void _intersectAABB(glm::detail::tvec2<float> const&,glm::detail::tvec2<float> const&,glm::detail::tvec2<float> const&,glm::detail::tvec2<float> const&);
		void _intersectAABB(glm::detail::tvec2<float> const&,glm::detail::tvec2<float> const&,glm::detail::tvec2<float> const&,glm::detail::tvec2<float> const&);
		void _prepareForWrap(SweepDescription &);
		void _setFocusControl(int);
		void _setFocusControl(int);
		void _sweepForControl(SweepDescription const&,std::vector<std::shared_ptr<UIControl>,std::allocator<std::shared_ptr<UIControl>>> const&,bool);
		void _sweepForControlDirectional(SweepDescription const&,std::vector<std::shared_ptr<UIControl>,std::allocator<std::shared_ptr<UIControl>>> const&,bool);
		void _sweepForControlDirectional(SweepDescription const&,std::vector<std::shared_ptr<UIControl>,std::allocator<std::shared_ptr<UIControl>>> const&,bool);
		void _sweepToNextFocusObject(ui::CardinalDirection,bool,glm::detail::tvec2<float> const&);
		void _sweepToNextFocusObject(ui::CardinalDirection,bool,glm::detail::tvec2<float> const&);
		void _validateFocusControl(void);
		void _validateFocusControl(void);
		void defaultFocus(void);
		void defaultFocus(void);
		void focusPositionCaptured(void);
		void focusPositionCaptured(void);
		void getFocusedControl(void);
		void getFocusedControl(void);
		void hasFocusedControl(void);
		void hasRequestedFocusReset(void);
		void hasRequestedFocusReset(void);
		void isActive(void);
		void isActive(void);
		void moveFocus(ui::CardinalDirection);
		void moveFocus(ui::CardinalDirection);
		void requestFocusReset(bool);
		void requestFocusReset(bool);
		void setActive(bool);
		void setActive(bool);
		void setFocusPosition(glm::detail::tvec2<float> const&);
		void setFocusPosition(glm::detail::tvec2<float> const&);
		void setFocusPositionCaptured(bool);
		void setFocusPositionCaptured(bool);
		void setSize(glm::detail::tvec2<float> const&);
		void setSize(glm::detail::tvec2<float> const&);
		void update(VisualTree &,std::shared_ptr<UIControl> &);
		void update(VisualTree &,std::shared_ptr<UIControl> &);
		void ~FocusManager();
		void ~FocusManager();
};

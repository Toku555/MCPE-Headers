#pragma once
class MinecraftScreenModel{
	public:
		MinecraftScreenModel(MinecraftClient &);
		MinecraftScreenModel(MinecraftClient &);
		MinecraftScreenModel(MinecraftClient &);
		void _getSkin(int,int,int);
		void _getSkinPack(int,int);
		void abortAllRealmsRequests(void);
		void abortAllRealmsRequests(void);
		void function<void ();
		void function<void ();
		void addRecentSkin(MinecraftScreenModel::SkinInfo const&);
		void addRecentSkin(MinecraftScreenModel::SkinInfo const&);
		void asyncLoadSounds(void);
		void asyncLoadSounds(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void cancelJoinGame(LoadingState);
		void cancelJoinGame(LoadingState);
		void function<void ();
		void function<void ();
		void createJpegCommentWriter(void);
		void createJpegCommentWriter(void);
		void createRealmsWorld(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier,bool,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void createRealmsWorld(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier,bool,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void deleteContainerManager(void);
		void deleteContainerManager(void);
		void distanceSqrFromPlayerToBlockCenter(Vec3 const&);
		void doNotSignIntoXbl(void);
		void doNotSignIntoXbl(void);
		void dropItemsFromPlayer(ItemInstance const*,int);
		void dropItemsFromPlayer(ItemInstance const*,int);
		void exportScreenshotsToZipFile(void);
		void exportScreenshotsToZipFile(void);
		void function<void ();
		void function<void ();
		void fetchScreenshotsPath(void);
		void fetchScreenshotsPath(void);
		void fireEventScreenChanged(void);
		void fireEventScreenChanged(void);
		void fireEventStartWorld(std::string const&,std::string const&);
		void fireEventStartWorld(std::string const&,std::string const&);
		void forceChunckBuildout(void);
		void forceChunckBuildout(void);
		void getAchievementData(void);
		void getAchievementData(void);
		void getArchiverState(void);
		void getBlockAt(BlockPos);
		void getCurrentGamertag(void);
		void getCurrentGamertag(void);
		void getCurrentToast(void);
		void getCurrentToast(void);
		void getCurrentXUID(void);
		void getCurrentXUID(void);
		void getCustomSkinIndex(void);
		void getCustomSkinIndex(void);
		void getCustomSkinInfo(SkinRepository::DefaultSkin);
		void getCustomSkinInfo(SkinRepository::DefaultSkin);
		void getDevCreateRealmWithoutPurchase(void);
		void getDevCreateRealmWithoutPurchase(void);
		void getDevelopmentVersionString(void);
		void getDevelopmentVersionString(void);
		void getFeaturedOfferCategory(void);
		void getFeaturedOfferCategory(void);
		void getFeaturedOfferIndex(void);
		void getFeaturedOfferIndex(void);
		void getFeaturedOfferLocationForKeyArt(void);
		void getFeaturedOfferLocationForKeyArt(void);
		void getFeaturedOfferPrice(void);
		void getFeaturedOfferPrice(void);
		void getFont(void);
		void getHoloInput(void);
		void getHoloInput(void);
		void getHotbarSlotCount(void);
		void getHotbarSlotCount(void);
		void getInventorySlot(void);
		void getInventorySlot(void);
		void getInventorySlotCount(void);
		void getLinkedSlotCount(void);
		void getLocalPlayer(void);
		void getLocalPlayer(void);
		void getNameRegistry(void);
		void getNameRegistry(void);
		void getNewGuiChatMessages(void);
		void getNewGuiChatMessages(void);
		void getNewPopupItemText(std::string &,bool &,bool &);
		void getNewPopupItemText(std::string &,bool &,bool &);
		void getNextToast(void);
		void getNextToast(void);
		void getNumOfferCategories(void);
		void getNumOfferCategories(void);
		void getNumOffersInCategory(int);
		void getNumOffersInCategory(int);
		void getNumRecentSkins(void);
		void getNumRecentSkins(void);
		void getNumSkinPacks(int);
		void getNumSkinPacks(int);
		void getOfferCategoryName(int);
		void getOfferCategoryName(int);
		void getOfferIndexBySkinPackIndex(int,int);
		void getOfferLocationForKeyArt(int,int);
		void getOfferLocationForKeyArt(int,int);
		void getOfferName(int,int);
		void getOfferName(int,int);
		void getOfferPrice(int,int);
		void getOfferPrice(int,int);
		void getOfferSerializableName(int,int);
		void getOfferUnlocked(int,int);
		void getOfferUnlocked(int,int);
		void getPickRange(void);
		void getPickRange(void);
		void getPlayerName(void);
		void getPlayerName(void);
		void getPlayerPositionText(void);
		void getPlayerPositionText(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void getRealmsOfferPrice(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void getRealmsOfferPrice(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void getRecentSkinInfoByIndex(int);
		void getRecentSkinInfoByIndex(int);
		void getResourcePackArtByIndex(int,int);
		void getResourcePackArtByIndex(int,int);
		void getSelectedSkinInfo(void);
		void getSelectedSkinInfo(void);
		void getSkinIndexByType(SkinRepository::DefaultSkin);
		void getSkinIndexByType(SkinRepository::DefaultSkin);
		void getSkinLocked(MinecraftScreenModel::SkinInfo const&);
		void getSkinLocked(MinecraftScreenModel::SkinInfo const&);
		void getSkinName(MinecraftScreenModel::SkinInfo const&);
		void getSkinName(MinecraftScreenModel::SkinInfo const&);
		void getSkinPackIndexByOfferIndex(int);
		void getSkinPackLocationForKeyArt(int);
		void getSkinPackLocationForKeyArt(int);
		void getSkinPackName(int,int);
		void getSkinPackName(int,int);
		void getSkinPackPrice(int);
		void getSkinPackPrice(int);
		void getSkinPackSerializableName(int,int);
		void getSkinPackSerializableName(int,int);
		void getSkinPackSize(int,int);
		void getSkinPackSize(int,int);
		void getSkinPackUnlocked(int);
		void getSkinPackUnlocked(int);
		void getSkinSerializableName(MinecraftScreenModel::SkinInfo const&);
		void getSkinSerializableName(MinecraftScreenModel::SkinInfo const&);
		void getStoreId(void);
		void getStoreId(void);
		void getStoreRequiresRestoreButton(void);
		void getStoreRequiresRestoreButton(void);
		void getStoreSupportsSubscriptions(void);
		void getStoreSupportsSubscriptions(void);
		void function<void ();
		void function<void ();
		void getTipText(std::string &);
		void getTipText(std::string &);
		void getVRShowComfortSelectScreen(void);
		void getVRShowComfortSelectScreen(void);
		void getVersionString(void);
		void getVersionString(void);
		void getXboxLiveFriends(void);
		void getXboxLiveFriends(void);
		void getXuidsInLobby(void);
		void getXuidsInLobby(void);
		void handleGameEventNotification(ui::GameEventNotification);
		void handleGameEventNotification(ui::GameEventNotification);
		void handleHideGuiButtonPress(void);
		void handleHideGuiButtonPress(void);
		void hasLocalPlayer(void);
		void hasLocalPlayer(void);
		void function<void ();
		void function<void ();
		void invitePlayers(std::vector<std::string,std::allocator<std::string>> const&);
		void invitePlayers(std::vector<std::string,std::allocator<std::string>> const&);
		void isAchievementDataCached(void);
		void isAchievementDataCached(void);
		void isDirty(void);
		void isDirty(void);
		void isEnabledTouchOrHolographic(void);
		void isEnabledTouchOrHolographic(void);
		void isHolographic(void);
		void isHolographic(void);
		void isInputModeGamepad(void);
		void isInputModeGamepad(void);
		void isLeftHanded(void);
		void isLeftHanded(void);
		void isNetworkEnabled(void);
		void isNetworkEnabled(void);
		void isNotVLRMode(void);
		void isNotVLRMode(void);
		void isPlayerSignedIn(void);
		void isPlayerSignedIn(void);
		void isPlayerValid(void);
		void isPlayerValid(void);
		void isRealityFullVRMode(void);
		void isRealityFullVRMode(void);
		void isRealmsCompatibilityCheckComplete(void);
		void isRealmsCompatibilityCheckComplete(void);
		void isRealmsEnabled(void);
		void isRealmsEnabled(void);
		void function<void ();
		void function<void ();
		void isRealmsTrialStoreOfferAvailable(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void isRealmsTrialStoreOfferAvailable(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void isSignedIn(void);
		void isVRComfortControlMode(void);
		void isVRComfortControlMode(void);
		void isVRMode(void);
		void isValidRealmName(std::string);
		void isValidRealmName(std::string);
		void joinRealmsGame(char const*,int);
		void joinRealmsGame(char const*,int);
		void function<void ();
		void function<void ();
		void leaveGame(void);
		void leaveGame(void);
		void function<void ();
		void function<void ();
		void leaveScreen(void);
		void leaveScreen(void);
		void linkPlayerToScreen(void);
		void linkPlayerToScreen(void);
		void linkScreenToPlayer(void);
		void linkScreenToPlayer(void);
		void function<void ();
		void function<void ();
		void navigateToAchievementScreen(void);
		void navigateToAchievementScreen(void);
		void navigateToAddFriendScreen(void);
		void navigateToAddFriendScreen(void);
		void navigateToDisconnectScreen(std::string const&,std::string const&);
		void navigateToDisconnectScreen(std::string const&,std::string const&);
		void navigateToGamePlayScreen(void);
		void navigateToGamePlayScreen(void);
		void navigateToInventoryScreen(void);
		void navigateToInventoryScreen(void);
		void navigateToInviteScreen(void);
		void navigateToLanguageScreen(void);
		void navigateToLanguageScreen(void);
		void navigateToLeaveLevelScreen(void);
		void navigateToLeaveLevelScreen(void);
		void navigateToOptionsScreen(bool,int);
		void navigateToOptionsScreen(bool,int);
		void navigateToPauseScreen(void);
		void navigateToPauseScreen(void);
		void navigateToPlayScreen(void);
		void navigateToPlayScreen(void);
		void navigateToPortfolioScreen(void);
		void navigateToProgressScreen(std::string const&,std::string const&,std::unique_ptr<ProgressHandler,std::default_delete<ProgressHandler>>,bool);
		void navigateToProgressScreen(std::string const&,std::string const&,std::unique_ptr<ProgressHandler,std::default_delete<ProgressHandler>>,bool);
		void navigateToPurchaseOfferScreen(int,int);
		void navigateToPurchaseOfferScreen(int,int);
		void navigateToRealmsCreateScreen(bool);
		void navigateToRealmsCreateScreen(bool);
		void navigateToRealmsInvitationScreen(Realms::World const&);
		void navigateToRealmsInvitationScreen(Realms::World const&);
		void navigateToRealmsPendingInvitesScreen(bool);
		void navigateToRealmsPendingInvitesScreen(bool);
		void navigateToRealmsSettingsScreen(Realms::World const&);
		void navigateToRealmsSettingsScreen(Realms::World const&);
		void navigateToResourcePacksScreen(void);
		void navigateToResourcePacksScreen(void);
		void function<void ();
		void function<void ();
		void navigateToSkinPackUpsellScreen(int,int);
		void navigateToSkinPackUpsellScreen(int,int);
		void navigateToSkinPickerScreen(void);
		void navigateToSkinPickerScreen(void);
		void navigateToStartScreen(void);
		void navigateToStartScreen(void);
		void navigateToStoreScreen(void);
		void navigateToStoreScreen(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void openUriLink(std::string const&);
		void openUriLink(std::string const&);
		void purchaseGame(void);
		void purchaseGame(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void pushVRInformationScreen(void);
		void pushVRInformationScreen(void);
		void pushVRSchemeScreen(bool);
		void pushVRSchemeScreen(bool);
		void quit(void);
		void quit(void);
		void realmsCompatibility(void);
		void realmsCompatibility(void);
		void realmsCompatibilityStatus(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void sendTrialWelcomeMessage(void);
		void sendTrialWelcomeMessage(void);
		void setIsDirty(bool);
		void setIsDirty(bool);
		void setLanguage(void);
		void setLanguage(void);
		void setLastCustomSkin(MinecraftScreenModel::SkinInfo const&);
		void setLastCustomSkin(MinecraftScreenModel::SkinInfo const&);
		void setLastSelectedSlot(int);
		void setLastSelectedSlot(int);
		void setRealmsCompatibility(RealmsAPI::Compatibility);
		void setRealmsCompatibility(RealmsAPI::Compatibility);
		void function<void ();
		void function<void ();
		void setScreenFadeAlpha(float,float);
		void setScreenFadeAlpha(float,float);
		void setSelectedSkin(MinecraftScreenModel::SkinInfo const&);
		void setSelectedSkin(MinecraftScreenModel::SkinInfo const&);
		void setSuspendInput(bool);
		void setSuspendInput(bool);
		void setVRControlMode(bool);
		void setVRControlMode(bool);
		void shouldDisplayPlayerPosition(void);
		void shouldDisplayPlayerPosition(void);
		void shouldPushVRControlScreen(void);
		void shouldPushVRControlScreen(void);
		void function<void ();
		void function<void ();
		void showSignInButton(void);
		void showSignInButton(void);
		void signOut(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void ~MinecraftScreenModel();
		void ~MinecraftScreenModel();
		void ~MinecraftScreenModel();
		void ~MinecraftScreenModel();
};

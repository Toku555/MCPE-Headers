#pragma once
namespace Social{
	class ClientConnectionState{
		public:
		void fromJson(web::json::value const&);
		void fromJson(web::json::value const&);
		void toJson(void);
		void toJson(void);
		void GameConnectionInfo(Social::ConnectionType,RakNet::SystemAddress);
		void fromJson(web::json::value const&);
		void fromJson(web::json::value const&);
		void toJson(void);
		void toJson(void);
		void typeAsString(void);
		void typeAsString(void);
		void ~GameConnectionInfo();
		void GetDisplayPicture(web::uri const&,Social::ImageService::image_size);
		void GetDisplayPicture(web::uri const&,Social::ImageService::image_size);
		void ImageService(Social::UserManager &,std::string const&,bool);
		void ImageService(Social::UserManager &,std::string const&,bool);
		void _clearImageCache(void);
		void _clearImageCache(void);
		void InviteUriListener(Social::Multiplayer &);
		void InviteUriListener(Social::Multiplayer &);
		void onUri(ActivationUri const&);
		void onUri(ActivationUri const&);
		void ~InviteUriListener();
		void ~InviteUriListener();
		void function<void ();
		void function<void ();
		void ProcessExecutionQueue(void);
		void ProcessExecutionQueue(void);
		void addConnectionInfo(Social::GameConnectionInfo);
		void addConnectionInfo(Social::GameConnectionInfo);
		void addGamerToMuteList(std::string);
		void addGamerToMuteList(std::string);
		void advertiseGame(void);
		void buildGameList(void);
		void buildGameList(void);
		void buildGameListIfNeeded(bool);
		void changeMultiplayerState(Social::MultiplayerState,std::string const&,int,std::string const&);
		void changeMultiplayerState(Social::MultiplayerState,std::string const&,int,std::string const&);
		void checkIsInviteForCurrentGame(void);
		void checkIsInviteForCurrentGame(void);
		void clearInviteHandle(void);
		void clearInviteHandle(void);
		void getGameList(void);
		void getGameList(void);
		void getInviteHandle(void);
		void getInviteHandle(void);
		void getLocalConnectionInfo(void);
		void getLocalConnectionInfo(void);
		void getXuidsInLobby(void);
		void getXuidsInLobby(void);
		void handleJoinLobbyCompleted(std::error_code,std::string const&);
		void handleJoinLobbyCompleted(std::error_code,std::string const&);
		void handleMemberPropertyChanged(std::string,web::json::value const&);
		void handleMemberPropertyChanged(std::string,web::json::value const&);
		void handleSessionPropertyChanged(web::json::value const&);
		void handleSessionPropertyChanged(web::json::value const&);
		void invitePlayers(std::vector<std::string,std::allocator<std::string>> const&);
		void invitePlayers(std::vector<std::string,std::allocator<std::string>> const&);
		void isBlockedPlayer(std::string const&);
		void isBlockedPlayer(std::string const&);
		void isInviteEnabled(void);
		void isInviteEnabled(void);
		void isPlayerOnXboxLive(std::string const&);
		void isPlayerOnXboxLive(std::string const&);
		void function<void ();
		void function<void ();
		void leaveLiveGame(void);
		void leaveLiveGame(void);
		void needToHandleInvite(void);
		void needToHandleInvite(void);
		void needToRefreshMuteList(void);
		void onConnectionStateChanged(std::string const&,std::string const&,uint,uint,uint,std::string const&);
		void onConnectionStateChanged(std::string const&,std::string const&,uint,uint,uint,std::string const&);
		void onEnterLevel(Level *);
		void onEnterLevel(Level *);
		void onExitLevel(uint);
		void onExitLevel(uint);
		void refreshMuteList(void);
		void refreshMuteList(void);
		void refreshMuteListIfNeeded(bool);
		void sendRoundStartEvent(void);
		void sendRoundStartEvent(void);
		void setGameHostInfo(Level *);
		void setGameHostInfo(Level *);
		void setInviteHandle(std::string const&,bool);
		void setInviteHandle(std::string const&,bool);
		void setLobbyProperties(void);
		void setLobbyProperties(void);
		void setShouldAdvertiseGame(bool,bool);
		void setShouldAdvertiseGame(bool,bool);
		void showPlayerProfile(std::string const&);
		void showPlayerProfile(std::string const&);
		void stateToString(Social::MultiplayerState);
		void tick(bool);
		void tick(bool);
		void tickMultiplayerManager(void);
		void tickMultiplayerManager(void);
		void updateClientConnectionStateInLobby(void);
		void updateClientConnectionStateInLobby(void);
		void updatePlayerStatus(std::string const&);
		void ~Multiplayer();
		void ~Multiplayer();
		void ~Multiplayer();
		void ~Multiplayer();
		void ServiceConfigFile(std::string);
		void ServiceConfigFile(std::string);
		void _GetValueFromJson(web::json::value &,std::string,std::string &);
		void getRealmsEndpoint(void);
		void getRealmsEndpoint(void);
		void getRealmsEndpointPayment(void);
		void getRealmsEndpointPayment(void);
		void getRelyingParty(void);
		void getRelyingParty(void);
		void getRelyingPartyPayment(void);
		void getRelyingPartyPayment(void);
		void getXboxLiveSandbox(void);
		void getXboxLiveSandbox(void);
		void readConfigFromFile(void);
		void readConfigFromFile(void);
		void ~ServiceConfigFile();
		void ~ServiceConfigFile();
		void AggregationEventListener(uint,uint,uint,uint);
		void AggregationEventListener(void);
		void AggregationEventListener(void);
		void _handleAggregation(std::vector<Social::Telemetry::TelemetryEvent,std::allocator<Social::Telemetry::TelemetryEvent>> &,Social::Telemetry::TelemetryEvent&);
		void _needToSendAggregatedEvents(void);
		void _sendEvents(std::unordered_map<std::string,std::vector<Social::Telemetry::TelemetryEvent,std::allocator<Social::Telemetry::TelemetryEvent>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<Social::Telemetry::TelemetryEvent,std::allocator<Social::Telemetry::TelemetryEvent>>>>> &);
		void recordEvent(Social::Telemetry::TelemetryEvent,bool);
		void recordEvent(Social::Telemetry::TelemetryEvent,bool);
		void sendEvents(bool);
		void sendEvents(bool);
		void ~AggregationEventListener();
		void ~AggregationEventListener();
		void ~AggregationEventListener();
		void ~AggregationEventListener();
		void FileEventLogger(std::string);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void ~FileEventLogger();
		void ~FileEventLogger();
		void ~FileEventLogger();
		void ~FileEventLogger();
		void HttpEventLogger(std::string);
		void debugWriteEventToFile(std::string const&);
		void getMaelstromEventBody(std::string const&,Json::Value const&,Json::Value const&);
		void getMaelstromEventBody(std::string const&,Json::Value const&,Json::Value const&);
		void getMaelstromMessageBody(std::string const&,Json::Value const&,Json::Value const&);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void sendEvent(std::string const&);
		void ~HttpEventLogger();
		void ~HttpEventLogger();
		void ~HttpEventLogger();
		void ~HttpEventLogger();
		void MaelstromEventLogger(std::string);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void ~MaelstromEventLogger();
		void ~MaelstromEventLogger();
		void ~MaelstromEventLogger();
		void ~MaelstromEventLogger();
		void updateMeasurement(Social::Telemetry::Measurement const&);
		void updateMeasurement(Social::Telemetry::Measurement const&);
		void operator==(Social::Telemetry::Property const&);
		void operator==(Social::Telemetry::Property const&);
		void TelemetryEvent(Social::Telemetry::TelemetryEvent const&);
		void TelemetryEvent(Social::Telemetry::TelemetryEvent const&);
		void TelemetryEvent(std::string,std::unordered_map<std::string,Social::Telemetry::Property,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::Telemetry::Property>>> &);
		void TelemetryEvent(std::string,std::unordered_map<std::string,Social::Telemetry::Property,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::Telemetry::Property>>> &);
		void addMeasurement<float>(std::string,Social::Telemetry::Measurement::AggregationType,float const&);
		void addMeasurement<float>(std::string,Social::Telemetry::Measurement::AggregationType,float const&);
		void addMeasurement<int>(std::string,Social::Telemetry::Measurement::AggregationType,int const&);
		void addMeasurement<int>(std::string,Social::Telemetry::Measurement::AggregationType,int const&);
		void addMeasurement<uchar>(std::string,Social::Telemetry::Measurement::AggregationType,uchar const&);
		void addMeasurement<uchar>(std::string,Social::Telemetry::Measurement::AggregationType,uchar const&);
		void addMeasurement<uint>(std::string,Social::Telemetry::Measurement::AggregationType,uint const&);
		void addMeasurement<uint>(std::string,Social::Telemetry::Measurement::AggregationType,uint const&);
		void addProperty<BlockID>(std::string,BlockID const&);
		void addProperty<BlockID>(std::string,BlockID const&);
		void addProperty<DimensionId>(std::string,DimensionId const&);
		void addProperty<DimensionId>(std::string,DimensionId const&);
		void addProperty<bool>(std::string,bool const&);
		void addProperty<bool>(std::string,bool const&);
		void addProperty<char const*>(std::string,char const* const&);
		void addProperty<char const*>(std::string,char const* const&);
		void addProperty<double>(std::string,double const&);
		void addProperty<double>(std::string,double const&);
		void addProperty<int>(std::string,int const&);
		void addProperty<int>(std::string,int const&);
		void addProperty<long long>(std::string,long long const&);
		void addProperty<long long>(std::string,long long const&);
		void addProperty<short>(std::string,short const&);
		void addProperty<short>(std::string,short const&);
		void string>(std::string,std::string const&);
		void string>(std::string,std::string const&);
		void addProperty<uchar>(std::string,uchar const&);
		void addProperty<uchar>(std::string,uchar const&);
		void addProperty<uint>(std::string,uint const&);
		void addProperty<uint>(std::string,uint const&);
		void hasMeasurements(void);
		void hasMeasurements(void);
		void measurementsAsJsonValue(void);
		void measurementsAsJsonValue(void);
		void operator==(Social::Telemetry::TelemetryEvent const&);
		void operator==(Social::Telemetry::TelemetryEvent const&);
		void propertiesAsJsonValue(void);
		void propertiesAsJsonValue(void);
		void updateMeasurements(Social::Telemetry::TelemetryEvent const&);
		void updateMeasurements(Social::Telemetry::TelemetryEvent const&);
		void ~TelemetryEvent();
		void ~TelemetryEvent();
		void TelemetryManager(Social::UserManager &,std::string const&);
		void TelemetryManager(Social::UserManager &,std::string const&);
		void addListener(std::unique_ptr<Social::Telemetry::IEventListener,std::default_delete<Social::Telemetry::IEventListener>>);
		void addListener(std::unique_ptr<Social::Telemetry::IEventListener,std::default_delete<Social::Telemetry::IEventListener>>);
		void getCommonProperties(void);
		void getCommonProperties(void);
		void getCommonProperty(std::string);
		void getCommonProperty(std::string);
		void getGlobalProperty(std::string);
		void getGlobalProperty(std::string);
		void onThrottledConnection(void);
		void recordEvent(Social::Telemetry::TelemetryEvent);
		void recordEvent(Social::Telemetry::TelemetryEvent);
		void removeCommonProperty(std::string);
		void removeCommonProperty(std::string);
		void removeGlobalProperty(std::string);
		void removeGlobalProperty(std::string);
		void sendEvents(bool);
		void sendEvents(bool);
		void setCommonProperty<DimensionId>(std::string,DimensionId const&);
		void setCommonProperty<DimensionId>(std::string,DimensionId const&);
		void setCommonProperty<bool>(std::string,bool const&);
		void setCommonProperty<bool>(std::string,bool const&);
		void setCommonProperty<int>(std::string,int const&);
		void setCommonProperty<int>(std::string,int const&);
		void string>(std::string,std::string const&);
		void string>(std::string,std::string const&);
		void setCommonProperty<uint>(std::string,uint const&);
		void setCommonProperty<uint>(std::string,uint const&);
		void setGlobalProperty<bool>(std::string,bool const&);
		void setGlobalProperty<bool>(std::string,bool const&);
		void setGlobalProperty<float>(std::string,float const&);
		void setGlobalProperty<float>(std::string,float const&);
		void setGlobalProperty<int>(std::string,int const&);
		void setGlobalProperty<int>(std::string,int const&);
		void string>(std::string,std::string const&);
		void string>(std::string,std::string const&);
		void setGlobalProperty<uint>(std::string,uint const&);
		void setGlobalProperty<uint>(std::string,uint const&);
		void setupCommonProperties(void);
		void setupCommonProperties(void);
		void tick(void);
		void tick(void);
		void XboxLiveEventLogger(std::string,Social::UserManager &);
		void XboxLiveEventLogger(std::string,Social::UserManager &);
		void debugWriteEventToFile(std::string const&,web::json::value const&,web::json::value const&);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void sendEvent(Social::Telemetry::TelemetryEvent const&);
		void ~XboxLiveEventLogger();
		void ~XboxLiveEventLogger();
		void ~XboxLiveEventLogger();
		void ~XboxLiveEventLogger();
		void convertJsonTypes(Json::Value);
		void convertJsonTypes(Json::Value);
		void UserManager(void);
		void UserManager(void);
		void _populateAchievementData(void);
		void _processAchievementPage(xbox::services::achievements::achievements_result &);
		void _processAchievementPage(xbox::services::achievements::achievements_result &);
		void _sortAchievementData(void);
		void _sortAchievementData(void);
		void _updateAchievementData(void);
		void _updateAchievementData(void);
		void checkPrivilege(int);
		void checkPrivilege(int);
		void function<void ();
		void function<void ();
		void getCurrentGamertag(void);
		void getCurrentGamertag(void);
		void getCurrentUser(void);
		void getCurrentUser(void);
		void getCurrentXUID(void);
		void getCurrentXUID(void);
		void getMPScid(void);
		void getMPScid(void);
		void getMPTitleId(void);
		void getMPTitleId(void);
		void getPlayerAchievementData(void);
		void getPlayerAchievementData(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void getSandbox(void);
		void getScid(void);
		void getTitleId(void);
		void getXblContext(void);
		void getXblContext(void);
		void getXboxLiveFriends(void);
		void getXboxLiveFriends(void);
		void isAchievementDataCached(void);
		void isAchievementDataCached(void);
		void isSignedIn(void);
		void isSignedIn(void);
		void isTitleIdMinecraftAnyPlatform(uint);
		void isTitleIdMinecraftAnyPlatform(uint);
		void onAppResumed(void);
		void onAppResumed(void);
		void onAppSuspended(void);
		void onAppSuspended(void);
		void onSignOut(void);
		void onSignOut(void);
		void onSuccessfulSignin(void);
		void onSuccessfulSignin(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void setLocale(void);
		void setLocale(void);
		void function<void ();
		void function<void ();
		void signOut(void);
		void signOut(void);
		void function<void ();
		void function<void ();
		void tick(void);
		void tick(void);
		void updateRichPresence(std::string);
		void updateRichPresence(std::string);
		void ~UserManager();
		void ~UserManager();
		void ~UserManager();
		void ~UserManager();
		void XboxLiveGameInfo(Social::XboxLiveGameInfo const&);
		void XboxLiveGameInfo(Social::XboxLiveGameInfo const&);
		void addSupportedConnection(UPNPInfo &);
		void addSupportedConnection(std::string const&,std::string const&,int);
		void createFromSessionProperties(web::json::value const&);
		void createFromSessionProperties(web::json::value const&);
		void findConnectionMatchingType(Social::ConnectionType);
		void findConnectionMatchingType(Social::ConnectionType);
		void getConnectionsAsJson(void);
		void getConnectionsAsJson(void);
		void getOptimumConnection(void);
		void getOptimumConnection(void);
		void ~XboxLiveGameInfo();
		void ~XboxLiveGameInfo();
		void XboxLiveUserInfo(Social::UserManager &);
		void XboxLiveUserInfo(Social::UserManager &);
		void _OnSignIn(void);
		void _OnSignOut(void);
		void _choosePresenceInfo(xbox::services::presence::presence_record const&,std::string &,std::string &,std::string &,uint &);
		void _choosePresenceInfo(xbox::services::presence::presence_record const&,std::string &,std::string &,std::string &,uint &);
		void _getProfile(std::string const&);
		void _getProfile(std::string const&);
		void function<void ();
		void function<void ();
		void _getProfiles(std::vector<std::string,std::allocator<std::string>> const&);
		void _getProfiles(std::vector<std::string,std::allocator<std::string>> const&);
		void function<void ();
		void function<void ();
		void _getXboxLiveFriends(void);
		void _getXboxLiveFriends(void);
		void _processFriends(std::vector<xbox::services::social::xbox_social_relationship,std::allocator<xbox::services::social::xbox_social_relationship>> const&,std::vector&<pplx::task<void>,std::allocator<pplx::task>>);
		void _processFriends(std::vector<xbox::services::social::xbox_social_relationship,std::allocator<xbox::services::social::xbox_social_relationship>> const&,std::vector&<pplx::task<void>,std::allocator<pplx::task>>);
		void _processPresences(std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>> const&,std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>> &);
		void _processPresences(std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>> const&,std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>> &);
		void _processProfiles(std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>> const&,std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>> &);
		void _processProfiles(std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>> const&,std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>> &);
		void _processXuids(std::vector<std::string,std::allocator<std::string>> const&,std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>> &,std::vector&<pplx::task<void>,std::allocator<pplx::task>>);
		void _processXuids(std::vector<std::string,std::allocator<std::string>> const&,std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>> &,std::vector&<pplx::task<void>,std::allocator<pplx::task>>);
		void _refresh(void);
		void _refresh(void);
		void ~XboxLiveUserInfo();
		void ~XboxLiveUserInfo();
		void XboxProfile(Social::XboxProfile const&);
		void XboxProfile(Social::XboxProfile const&);
		void ~XboxProfile();
		void ~XboxProfile();
	}
};

#pragma once
namespace j{
	class std{
		public:
		void _Hash_bytes(void const*,uint,uint);
		void _M_erase(uint,std::__detail::_Hash_node_base *,std::__detail::_Hash_node<std::pair<BlockPos const,std::unique_ptr<DoorInfo,std::default_delete<DoorInfo>>>,true> *);
		void _M_erase(std::integral_constant<bool,true>,ChunkBlockPos const&);
		void _M_erase(uint,std::__detail::_Hash_node_base *,std::__detail::_Hash_node<std::pair<ChunkPos const,std::unique_ptr<LevelChunk,std::default_delete<LevelChunk>>>,true> *);
		void _M_insert_unique_node(uint,uint,std::__detail::_Hash_node<ContainerListener *,false> *);
		void _M_erase(std::integral_constant<bool,true>,EntityUniqueID const&);
		void _M_insert_unique_node(uint,uint,std::__detail::_Hash_node<GeometryPtr *,false> *);
		void clear(void);
		void _M_insert_unique_node(uint,uint,std::__detail::_Hash_node<ResourcePackListener *,false> *);
		void _M_insert_unique_node(uint,uint,std::__detail::_Hash_node<_TickPtr *,false> *);
		void _M_insert_unique_node(uint,uint,std::__detail::_Hash_node<int,false> *);
		void _M_erase(uint,std::__detail::_Hash_node_base *,std::__detail::_Hash_node<std::pair<int const,std::unique_ptr<RestCaller::InternalRequest,std::default_delete<RestCaller::InternalRequest>>>,false> *);
		void _M_insert_unique_node(uint,uint,std::__detail::_Hash_node<mce::MaterialPtr *,false> *);
		void _M_erase(std::integral_constant<bool,true>,std::string const&);
		void _M_move_assign(std::_Hashtable<std::string,std::pair<std::string const,std::string>,std::allocator<std::pair<std::string const,std::string>>,std::__detail::_Select1st,std::equal_to<std::string>,std::hash<std::string>,std::__detail::_Mod_range_hashing,std::__detail::_Default_ranged_hash,std::__detail::_Prime_rehash_policy,std::__detail::_Hashtable_traits<true,false,true>>&&,std::integral_constant<bool,true>);
		void operator=(std::_Hashtable<std::string,std::pair<std::string const,std::string>,std::allocator<std::pair<std::string const,std::string>>,std::__detail::_Select1st,std::equal_to<std::string>,std::hash<std::string>,std::__detail::_Mod_range_hashing,std::__detail::_Default_ranged_hash,std::__detail::_Prime_rehash_policy,std::__detail::_Hashtable_traits<true,false,true>> const&);
		void clear(void);
		void operator=(std::_Hashtable<std::string,std::pair<std::string const,xbox::services::tournaments::tournament_team_result>,std::allocator<std::pair<std::string const,xbox::services::tournaments::tournament_team_result>>,std::__detail::_Select1st,std::equal_to<std::string>,std::hash<std::string>,std::__detail::_Mod_range_hashing,std::__detail::_Default_ranged_hash,std::__detail::_Prime_rehash_policy,std::__detail::_Hashtable_traits<true,false,true>> const&);
		void _Mem_fn<void (websocketpp::client<websocketpp::config::asio_client>::*);
		void _Mem_fn<void (websocketpp::client<websocketpp::config::asio_tls_client>::*);
		void _M_erase_aux(std::_Rb_tree_const_iterator<std::pair<ResourceLocation const,TexturePair>>);
		void operator();
		void operator();
		void _M_add_character_class(std::string const&,bool);
		void _M_add_collating_element(std::string const&);
		void _M_add_equivalence_class(std::string const&);
		void _M_add_character_class(std::string const&,bool);
		void _M_add_collating_element(std::string const&);
		void _M_add_equivalence_class(std::string const&);
		void _M_make_range(char,char);
		void _M_add_char(char);
		void _M_add_character_class(std::string const&,bool);
		void _M_add_collating_element(std::string const&);
		void _M_add_equivalence_class(std::string const&);
		void _M_add_char(char);
		void _M_add_character_class(std::string const&,bool);
		void _M_add_collating_element(std::string const&);
		void _M_add_equivalence_class(std::string const&);
		void _M_make_range(char,char);
		void _M_dfs<false>(long);
		void _M_dfs<true>(long);
		void _M_dfs<false>(long);
		void _M_dfs<true>(long);
		void function<void ();
		void Property> const&>(std::pair<std::string const,Social::Telemetry::Property> const&);
		void XboxProfile> const&>(std::pair<std::string const,Social::XboxProfile> const&);
		void string> const&>(std::pair<std::string const,std::string> const&);
		void multiplayer_session_reference> const&>(std::pair<std::string const,xbox::services::multiplayer::multiplayer_session_reference> const&);
		void tournament_team_result> const&>(std::pair<std::string const,xbox::services::tournaments::tournament_team_result> const&);
		void operator[](ResourceLocation const&);
		void at(std::string const&);
		void at(std::string const&);
		void _M_eat_escape_awk(void);
		void _Iter_comp_iter<bool (*);
		void _Iter_less_iter>(__gnu_cxx::__normal_iterator<LevelSummary *,std::vector<LevelSummary,std::allocator<LevelSummary>>>,__gnu_cxx::__normal_iterator<LevelSummary *,std::vector<LevelSummary,std::allocator<LevelSummary>>>,__gnu_cxx::__ops::_Iter_less_iter);
		void _Iter_comp_iter<bool (*);
		void char_traits<char>>(std::basic_ostream<char,std::char_traits<char>> &,char const*,int);
		void __shared_ptr<IContainerManager,(__gnu_cxx::_Lock_policy);
		void __throw_regex_error(std::regex_constants::error_type);
		void ~bad_cast();
		void clear(std::_Ios_Iostate);
		void ViewRequest ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void generic_category(void);
		void allocator<TextureAtlasTile>>>>(__gnu_cxx::__normal_iterator<TextureAtlasTile *,std::vector<TextureAtlasTile,std::allocator<TextureAtlasTile>>>,__gnu_cxx::__normal_iterator<TextureAtlasTile *,std::vector<TextureAtlasTile,std::allocator<TextureAtlasTile>>>);
		void ~length_error();
		void ~out_of_range();
		void ~runtime_error();
		void _M_mutate(uint,uint,uint);
		void _M_mutate(uint,uint,uint);
		void _M_mutate(uint,uint,uint);
		void append(char const*,uint);
		void append(char const*,uint);
		void append(char const*,uint);
		void append(std::string const&);
		void assign(char const*,uint);
		void assign(char const*,uint);
		void assign(std::string const&);
		void assign(std::string const&);
		void assign(std::string const&);
		void erase(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void resize(uint,char);
		void swap(std::string &);
		void swap(std::string &);
		void swap(std::string &);
		void swap<AchievementData>(AchievementData &,AchievementData &);
		void swap<LevelSummary>(LevelSummary &,LevelSummary &);
		void PhotoRecord>(PortfolioScreenController::PhotoRecord &,PortfolioScreenController::PhotoRecord &);
		void _M_emplace_back_aux<AchievementData const&>(AchievementData const&);
		void operator=(std::vector<AchievementData,std::allocator<AchievementData>> const&);
		void Stats>>>>(__gnu_cxx::__normal_iterator<BatchPacket::Stats*,std::vector<BatchPacket::Stats,std::allocator<BatchPacket::Stats>>>,__gnu_cxx::__normal_iterator<BatchPacket::Stats*,std::vector<BatchPacket::Stats,std::allocator<BatchPacket::Stats>>>,__gnu_cxx::__normal_iterator<BatchPacket::Stats*,std::vector<BatchPacket::Stats,std::allocator<BatchPacket::Stats>>>,std::forward_iterator_tag);
		void _M_emplace_back_aux<BlockPos const&>(BlockPos const&);
		void _M_erase_at_end(CItem*);
		void _M_emplace_back_aux<EntityLink&>(EntityLink&);
		void operator=(std::vector<GuiMessage,std::allocator<GuiMessage>> const&);
		void _M_default_append(uint);
		void _M_emplace_back_aux<ItemInstance const&>(ItemInstance const&);
		void _M_emplace_back_aux<ItemInstance const&>(ItemInstance const&);
		void PathArgument const&>(Json::PathArgument const&);
		void _M_emplace_back_aux<VariableRef,float &,LayoutRuleTermType>(VariableRef,float &,LayoutRuleTermType &&);
		void _M_emplace_back_aux<VariableRef,float,LayoutRuleTermType>(VariableRef,float,LayoutRuleTermType &&);
		void string const&>(RectangleArea const&,Color &,std::string const&);
		void _M_default_append(uint);
		void operator=(std::vector<Options::Option const*,std::allocator<Options::Option const*>> const&);
		void Ingredient const&>(PotionBrewing::Ingredient const&);
		void GameConnectionInfo const&>(Social::GameConnectionInfo const&);
		void _M_emplace_back_aux<TemporalAttributeBuff const&>(TemporalAttributeBuff const&);
		void _M_erase(__gnu_cxx::__normal_iterator<TemporalAttributeBuff*,std::vector<TemporalAttributeBuff,std::allocator<TemporalAttributeBuff>>>);
		void _M_emplace_back_aux<VariableRef const&>(VariableRef const&);
		void _M_emplace_back_aux<VariableRef&>(VariableRef&);
		void NamedUuid>(Whitelist::NamedUuid &&);
		void NamedXuid>(Whitelist::NamedXuid &&);
		void _M_erase(__gnu_cxx::__normal_iterator<Whitelist::NamedXuid*,std::vector<Whitelist::NamedXuid,std::allocator<Whitelist::NamedXuid>>>,__gnu_cxx::__normal_iterator<Whitelist::NamedXuid*,std::vector<Whitelist::NamedXuid,std::allocator<Whitelist::NamedXuid>>>);
		void operator=(std::vector<short,std::allocator<short>> const&);
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void ViewRequest ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void _M_erase(__gnu_cxx::__normal_iterator<std::pair<MapItemSavedData::TrackedMapEntity::UniqueId,std::shared_ptr<MapDecoration>>*,std::vector<std::pair<MapItemSavedData::TrackedMapEntity::UniqueId,std::shared_ptr<MapDecoration>>,std::allocator<std::pair<MapItemSavedData::TrackedMapEntity::UniqueId,std::shared_ptr<MapDecoration>>>>>);
		void shared_ptr<AbstractScreen> const&>(std::shared_ptr<AbstractScreen> const&);
		void shared_ptr<GuiElement> const&>(std::shared_ptr<GuiElement> const&);
		void shared_ptr<ResourcePack> const&>(std::shared_ptr<ResourcePack> const&);
		void shared_ptr<ScreenController> const&>(std::shared_ptr<ScreenController> const&);
		void shared_ptr<UIControl>&>(std::shared_ptr<UIControl>&);
		void _M_default_append(uint);
		void string const&>(std::string const&);
		void string const&>(std::string const&);
		void string const&>(std::string const&);
		void operator=(std::vector<std::string,std::allocator<std::string>> const&);
		void operator=(std::vector<std::sub_match<__gnu_cxx::__normal_iterator<char const*,std::string>>,std::allocator<std::sub_match<__gnu_cxx::__normal_iterator<char const*,std::string>>>> const&);
		void default_delete<CustomParticle>>>(std::unique_ptr<CustomParticle,std::default_delete<CustomParticle>> &&);
		void default_delete<Entity>>>(std::unique_ptr<Entity,std::default_delete<Entity>> &&);
		void default_delete<Material>>>(std::unique_ptr<Material,std::default_delete<Material>> &&);
		void default_delete<Tag>>>(std::unique_ptr<Tag,std::default_delete<Tag>> &&);
		void default_delete<TickingTexture>>>(std::unique_ptr<TickingTexture,std::default_delete<TickingTexture>> &&);
		void RenderStage>>>(std::unique_ptr<mce::RenderStage,std::default_delete<mce::RenderStage>> &&);
		void _M_default_append(uint);
		void operator=(std::vector<ui::AxisOffset,std::allocator<ui::AxisOffset>> const&);
		void signature_policy const&>(xbox::services::system::signature_policy const&);
		void operator=(std::vector<xbox::services::system::token_identity_type,std::allocator<xbox::services::system::token_identity_type>> const&);
		void vector(std::vector<xbox::services::tournaments::tournament_team,std::allocator<xbox::services::tournaments::tournament_team>> const&);
	}
};

#pragma once
class Item{
	public:
		Item(std::string const&,short);
		Item(std::string const&,short);
		Item(std::string const&,short);
		void getTierItem(void);
		void getTierItem(void);
		void _textMatch(std::string const&,std::string const&,bool);
		void addBlockItems(void);
		void addBlockItems(void);
		void addCreativeItem(Block *,short);
		void addCreativeItem(Item*,short);
		void addCreativeItem(ItemInstance const&);
		void addCreativeItem(ItemInstance const&);
		void addCreativeItem(short,short);
		void appendFormattedHovertext(ItemInstance const&,Player const&,std::string &,bool);
		void appendFormattedHovertext(ItemInstance const&,Player const&,std::string &,bool);
		void buildDescriptionName(ItemInstance const&);
		void buildDescriptionName(ItemInstance const&);
		void buildEffectDescriptionName(ItemInstance const&);
		void buildEffectDescriptionName(ItemInstance const&);
		void canBeDepleted(void);
		void canBeDepleted(void);
		void canDestroyInCreative(void);
		void canDestroyInCreative(void);
		void canDestroySpecial(Block const*);
		void canDestroySpecial(Block const*);
		void destroySpeedBonus(ItemInstance const*);
		void destroySpeedBonus(ItemInstance const*);
		void dispense(BlockSource &,Container &,int,Vec3 const&,signed char);
		void dispense(BlockSource &,Container &,int,Vec3 const&,signed char);
		void getAnimationFrameFor(Mob &);
		void getAnimationFrameFor(Mob &);
		void getAttackDamage(void);
		void getAttackDamage(void);
		void getColor(ItemInstance const&);
		void getColor(ItemInstance const&);
		void getDestroySpeed(ItemInstance *,Block *);
		void getDestroySpeed(ItemInstance *,Block *);
		void getEnchantSlot(void);
		void getEnchantSlot(void);
		void getEnchantValue(void);
		void getEnchantValue(void);
		void getIcon(int,int,bool);
		void getIcon(int,int,bool);
		void getIconYOffset(void);
		void getIconYOffset(void);
		void getInteractText(Player const&);
		void getInteractText(Player const&);
		void getLevelDataForAuxValue(int);
		void getLevelDataForAuxValue(int);
		void getMaxDamage(void);
		void getMaxDamage(void);
		void getMaxStackSize(ItemInstance const*);
		void getMaxStackSize(ItemInstance const*);
		void getTextureItem(std::string const&);
		void getTextureItem(std::string const&);
		void getTextureUVCoordinateSet(std::string const&,int);
		void getTextureUVCoordinateSet(std::string const&,int);
		void hurtEnemy(ItemInstance *,Mob *,Mob *);
		void hurtEnemy(ItemInstance *,Mob *,Mob *);
		void init(Json::Value &);
		void init(Json::Value &);
		void initCreativeItems(void);
		void initCreativeItems(void);
		void initItems(void);
		void initItems(void);
		void interactEnemy(ItemInstance *,Mob *,Player *);
		void interactEnemy(ItemInstance *,Mob *,Player *);
		void inventoryTick(ItemInstance &,Level &,Entity &,int,bool);
		void inventoryTick(ItemInstance &,Level &,Entity &,int,bool);
		void isArmor(void);
		void isArmor(void);
		void isComplex(void);
		void isComplex(void);
		void isDye(void);
		void isDye(void);
		void isEmissive(int);
		void isEmissive(int);
		void isGlint(ItemInstance const*);
		void isGlint(ItemInstance const*);
		void isHandEquipped(void);
		void isHandEquipped(void);
		void isLiquidClipItem(int);
		void isLiquidClipItem(int);
		void isMirroredArt(void);
		void isMirroredArt(void);
		void isStackedByData(void);
		void isStackedByData(void);
		void isThrowable(void);
		void isThrowable(void);
		void isValidRepairItem(ItemInstance const&,ItemInstance const&);
		void isValidRepairItem(ItemInstance const&,ItemInstance const&);
		void lookupByName(std::string const&,bool);
		void lookupByName(std::string const&,bool);
		void mineBlock(ItemInstance *,BlockID,int,int,int,Mob *);
		void mineBlock(ItemInstance *,BlockID,int,int,int,Mob *);
		void onCraftedBy(ItemInstance &,Level &,Player &);
		void onCraftedBy(ItemInstance &,Level &,Player &);
		void readUserData(ItemInstance *,IDataInput &);
		void readUserData(ItemInstance *,IDataInput &);
		void releaseUsing(ItemInstance *,Player *,int);
		void releaseUsing(ItemInstance *,Player *,int);
		void requiresInteract(void);
		void requiresInteract(void);
		void setCategory(CreativeItemCategory);
		void setCategory(CreativeItemCategory);
		void setHandEquipped(void);
		void setHandEquipped(void);
		void setIcon(TextureUVCoordinateSet const&);
		void setIcon(TextureUVCoordinateSet const&);
		void setIcon(std::string const&,int);
		void setIcon(std::string const&,int);
		void setMaxDamage(int);
		void setMaxDamage(int);
		void setMaxStackSize(uchar);
		void setMaxStackSize(uchar);
		void setMaxUseDuration(int);
		void setMaxUseDuration(int);
		void setStackedByData(bool);
		void setStackedByData(bool);
		void setTextureAtlas(std::shared_ptr<TextureAtlas>);
		void setTextureAtlas(std::shared_ptr<TextureAtlas>);
		void setUseAnimation(UseAnimation);
		void setUseAnimation(UseAnimation);
		void teardownItems(void);
		void use(ItemInstance &,Player &);
		void use(ItemInstance &,Player &);
		void useOn(ItemInstance *,Player *,int,int,int,signed char,float,float,float);
		void useOn(ItemInstance *,Player *,int,int,int,signed char,float,float,float);
		void useTimeDepleted(ItemInstance *,Level *,Player *);
		void useTimeDepleted(ItemInstance *,Level *,Player *);
		void writeUserData(ItemInstance const*,IDataOutput &,bool);
		void writeUserData(ItemInstance const*,IDataOutput &,bool);
		void ~Item();
		void ~Item();
		void ~Item();
		void ~Item();
};

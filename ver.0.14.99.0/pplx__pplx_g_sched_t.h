#pragma once
namespace pplx{
	class {
		public:
		void get_scheduler(void);
		void get_scheduler(void);
		void set_scheduler(std::shared_ptr<pplx::scheduler_interface>);
		void set_scheduler(std::shared_ptr<pplx::scheduler_interface>);
		void ~_pplx_g_sched_t();
		void task_completion_event<bool>>(pplx::task_completion_event<bool>,pplx::task_options);
		void task_completion_event<bool>>(pplx::task_completion_event<bool>,pplx::task_options);
		void task_completion_event<int>>(pplx::task_completion_event<int>,pplx::task_options);
		void task_completion_event<int>>(pplx::task_completion_event<int>,pplx::task_options);
		void http_call_response>>>(pplx::task_completion_event<std::shared_ptr<xbox::services::http_call_response>>,pplx::task_options);
		void http_call_response>>>(pplx::task_completion_event<std::shared_ptr<xbox::services::http_call_response>>,pplx::task_options);
		void string>>(pplx::task_completion_event<std::string>,pplx::task_options);
		void string>>(pplx::task_completion_event<std::string>,pplx::task_options);
		void task_completion_event<uint>>(pplx::task_completion_event<uint>,pplx::task_options);
		void task_completion_event<uint>>(pplx::task_completion_event<uint>,pplx::task_options);
		void task_completion_event<ulong long>>(pplx::task_completion_event<ulong long>,pplx::task_options);
		void task_completion_event<ulong long>>(pplx::task_completion_event<ulong long>,pplx::task_options);
		void task_completion_event<void>>(pplx::task_completion_event<void>,pplx::task_options);
		void task_completion_event<void>>(pplx::task_completion_event<void>,pplx::task_options);
		void http_response>>(pplx::task_completion_event<web::http::http_response>,pplx::task_options);
		void http_response>>(pplx::task_completion_event<web::http::http_response>,pplx::task_options);
		void websocket_incoming_message>>(pplx::task_completion_event<web::websockets::client::websocket_incoming_message>,pplx::task_options);
		void websocket_incoming_message>>(pplx::task_completion_event<web::websockets::client::websocket_incoming_message>,pplx::task_options);
		void auth_flow_result>>(pplx::task_completion_event<xbox::services::system::auth_flow_result>,pplx::task_options);
		void auth_flow_result>>(pplx::task_completion_event<xbox::services::system::auth_flow_result>,pplx::task_options);
		void java_rps_ticket>>(pplx::task_completion_event<xbox::services::system::java_rps_ticket>,pplx::task_options);
		void java_rps_ticket>>(pplx::task_completion_event<xbox::services::system::java_rps_ticket>,pplx::task_options);
		void xbox_live_result<bool>>>(pplx::task_completion_event<xbox::services::xbox_live_result<bool>>,pplx::task_options);
		void xbox_live_result<bool>>>(pplx::task_completion_event<xbox::services::xbox_live_result<bool>>,pplx::task_options);
		void http_call_response>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>,pplx::task_options);
		void http_call_response>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>,pplx::task_options);
		void multiplayer_session>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>>,pplx::task_options);
		void multiplayer_session>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>>,pplx::task_options);
		void string>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::string>>,pplx::task_options);
		void string>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::string>>,pplx::task_options);
		void string>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>>,pplx::task_options);
		void string>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>>,pplx::task_options);
		void allocator<uchar>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>>,pplx::task_options);
		void allocator<uchar>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>>,pplx::task_options);
		void contextual_search_broadcast>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>>,pplx::task_options);
		void contextual_search_broadcast>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>>,pplx::task_options);
		void multiplayer_activity_details>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>>,pplx::task_options);
		void multiplayer_activity_details>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>>,pplx::task_options);
		void multiplayer_session_states>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>>,pplx::task_options);
		void multiplayer_session_states>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>>,pplx::task_options);
		void presence_record>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>>,pplx::task_options);
		void presence_record>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>>,pplx::task_options);
		void multiple_permissions_check_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>>,pplx::task_options);
		void multiple_permissions_check_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>>,pplx::task_options);
		void xbox_user_profile>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>>,pplx::task_options);
		void xbox_user_profile>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>>,pplx::task_options);
		void verify_string_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>>,pplx::task_options);
		void verify_string_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>>,pplx::task_options);
		void tournament_stage>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>>,pplx::task_options);
		void tournament_stage>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>>,pplx::task_options);
		void user_statistics_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>>,pplx::task_options);
		void user_statistics_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>>,pplx::task_options);
		void xbox_live_result<void>>>(pplx::task_completion_event<xbox::services::xbox_live_result<void>>,pplx::task_options);
		void xbox_live_result<void>>>(pplx::task_completion_event<xbox::services::xbox_live_result<void>>,pplx::task_options);
		void achievement>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievement>>,pplx::task_options);
		void achievement>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievement>>,pplx::task_options);
		void achievements_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>>,pplx::task_options);
		void achievements_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>>,pplx::task_options);
		void cluster_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>>,pplx::task_options);
		void cluster_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>>,pplx::task_options);
		void game_server_ticket_status>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>>,pplx::task_options);
		void game_server_ticket_status>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>>,pplx::task_options);
		void leaderboard_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>>,pplx::task_options);
		void leaderboard_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>>,pplx::task_options);
		void create_match_ticket_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>>,pplx::task_options);
		void create_match_ticket_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>>,pplx::task_options);
		void hopper_statistics_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>>,pplx::task_options);
		void hopper_statistics_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>>,pplx::task_options);
		void match_ticket_details_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>>,pplx::task_options);
		void match_ticket_details_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>>,pplx::task_options);
		void presence_record>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::presence::presence_record>>,pplx::task_options);
		void presence_record>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::presence::presence_record>>,pplx::task_options);
		void permission_check_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>>,pplx::task_options);
		void permission_check_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>>,pplx::task_options);
		void xbox_user_profile>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>>,pplx::task_options);
		void xbox_user_profile>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>>,pplx::task_options);
		void sign_in_and_auth_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>>,pplx::task_options);
		void sign_in_and_auth_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>>,pplx::task_options);
		void sign_in_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_result>>,pplx::task_options);
		void sign_in_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_result>>,pplx::task_options);
		void token_and_signature_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>>,pplx::task_options);
		void token_and_signature_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>>,pplx::task_options);
		void token_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_result>>,pplx::task_options);
		void token_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_result>>,pplx::task_options);
		void verify_string_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::verify_string_result>>,pplx::task_options);
		void verify_string_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::verify_string_result>>,pplx::task_options);
		void title_storage_blob_metadata>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>>,pplx::task_options);
		void title_storage_blob_metadata>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>>,pplx::task_options);
		void title_storage_blob_metadata_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>>,pplx::task_options);
		void title_storage_blob_metadata_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>>,pplx::task_options);
		void title_storage_blob_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>>,pplx::task_options);
		void title_storage_blob_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>>,pplx::task_options);
		void title_storage_quota>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>>,pplx::task_options);
		void title_storage_quota>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>>,pplx::task_options);
		void tournament_instances>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>>,pplx::task_options);
		void tournament_instances>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>>,pplx::task_options);
		void tournament_teams>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>>,pplx::task_options);
		void tournament_teams>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>>,pplx::task_options);
		void user_statistics_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>>,pplx::task_options);
		void user_statistics_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>>,pplx::task_options);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void finish_request(void);
		void finish_request(void);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void multiplayer_session>>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_event>>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void _RegisterCancellation(std::weak_ptr<pplx::details::_Task_impl_base>);
		void _RegisterCancellation(std::weak_ptr<pplx::details::_Task_impl_base>);
		void _RegisterCancellation(std::weak_ptr<pplx::details::_Task_impl_base>);
		void _RegisterCancellation(std::weak_ptr<pplx::details::_Task_impl_base>);
		void _RegisterCancellation(std::weak_ptr<pplx::details::_Task_impl_base>);
		void _RegisterCancellation(std::weak_ptr<pplx::details::_Task_impl_base>);
		void start_request(void);
		void start_request(void);
		void start_request(void);
		void start_request(void);
		void start_request(void);
		void start_request(void);
		void _Invoke(void);
		void _Invoke(void);
		void _Cancel(void);
		void _Cancel(void);
		void _DeregisterCallback(pplx::details::_CancellationTokenRegistration *);
		void _DeregisterCallback(pplx::details::_CancellationTokenRegistration *);
		void _RegisterCallback(pplx::details::_CancellationTokenRegistration *);
		void _RegisterCallback(pplx::details::_CancellationTokenRegistration *);
		void ~_CancellationTokenState();
		void ~_CancellationTokenState();
		void ~_CancellationTokenState();
		void ~_CancellationTokenState();
		void _ExceptionHolder(std::__exception_ptr::exception_ptr const&,pplx::details::_TaskCreationCallstack const&);
		void _ExceptionHolder(std::__exception_ptr::exception_ptr const&,pplx::details::_TaskCreationCallstack const&);
		void _RethrowUserException(void);
		void _RethrowUserException(void);
		void ~_ExceptionHolder();
		void ~_ExceptionHolder();
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void _JoinAllTokens_Add(pplx::cancellation_token_source const&,pplx::details::_CancellationTokenState *);
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<void ();
		void function const&<bool ();
		void function const&<bool ();
		void task<void> ();
		void task<void> ();
		void error_code ();
		void error_code ();
		void string ();
		void string ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void _Destroy(void);
		void _Destroy(void);
		void ~_RefCounter();
		void ~_RefCounter();
		void ~_RefCounter();
		void ~_RefCounter();
		void _RunChoreBridge(void *);
		void _Bridge(void *);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _Task_completion_event_impl(void);
		void _Task_completion_event_impl(void);
		void ~_Task_completion_event_impl();
		void ~_Task_completion_event_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(Social::XboxProfile);
		void _FinalizeAndRunContinuations(Social::XboxProfile);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(bool);
		void _FinalizeAndRunContinuations(bool);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(int);
		void _FinalizeAndRunContinuations(int);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(std::error_code);
		void _FinalizeAndRunContinuations(std::error_code);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr const&<pplx::details::_ExceptionHolder>);
		void _FinalizeAndRunContinuations(std::shared_ptr<xbox::services::http_call_response>);
		void _FinalizeAndRunContinuations(std::shared_ptr<xbox::services::http_call_response>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(std::string);
		void _FinalizeAndRunContinuations(std::string);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>>);
		void _FinalizeAndRunContinuations(std::unordered_map<std::string,Social::XboxProfile,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,Social::XboxProfile>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(std::vector<uchar,std::allocator<uchar>>);
		void _FinalizeAndRunContinuations(std::vector<uchar,std::allocator<uchar>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(uchar);
		void _FinalizeAndRunContinuations(uchar);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(uint);
		void _FinalizeAndRunContinuations(uint);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(ulong long);
		void _FinalizeAndRunContinuations(ulong long);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(web::http::http_response);
		void _FinalizeAndRunContinuations(web::http::http_response);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(web::json::value);
		void _FinalizeAndRunContinuations(web::json::value);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(web::websockets::client::websocket_incoming_message);
		void _FinalizeAndRunContinuations(web::websockets::client::websocket_incoming_message);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::system::auth_flow_result);
		void _FinalizeAndRunContinuations(xbox::services::system::auth_flow_result);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::system::java_rps_ticket);
		void _FinalizeAndRunContinuations(xbox::services::system::java_rps_ticket);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<bool>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<bool>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr const&<pplx::details::_ExceptionHolder>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr const&<pplx::details::_ExceptionHolder>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::string>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::string>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<uint>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<uint>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<void>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<void>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::achievements::achievement>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::achievements::achievement>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::presence::presence_record>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::presence::presence_record>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::nsal>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::nsal>);
		void _GetResult(void);
		void _GetResult(void);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::sign_in_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::sign_in_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>);
		void _GetResult(void);
		void _GetResult(void);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::token_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::token_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::verify_string_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::verify_string_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::xbox_shell_sign_in_status>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::system::xbox_shell_sign_in_status>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::user_context_auth_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::user_context_auth_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _CancelAndRunContinuations(bool,bool,bool,std::shared_ptr<pplx::details::_ExceptionHolder> const&);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>);
		void _FinalizeAndRunContinuations(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _Task_impl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void ~_Task_impl();
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void _CancelWithException(std::__exception_ptr::exception_ptr const&);
		void _CancelWithException(std::__exception_ptr::exception_ptr const&);
		void _RunContinuation(pplx::details::_ContinuationTaskHandleBase *);
		void _RunContinuation(pplx::details::_ContinuationTaskHandleBase *);
		void _ScheduleContinuation(pplx::details::_ContinuationTaskHandleBase *);
		void _ScheduleContinuation(pplx::details::_ContinuationTaskHandleBase *);
		void _ScheduleTask(pplx::details::_TaskProcHandle *,pplx::details::_TaskInliningMode);
		void _ScheduleTask(pplx::details::_TaskProcHandle *,pplx::details::_TaskInliningMode);
		void _Wait(void);
		void _Wait(void);
		void ~_Task_impl_base();
		void ~_Task_impl_base();
		void ~_Task_impl_base();
		void ~_Task_impl_base();
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void wait(uint);
		void wait(uint);
		void schedule(void (*);
		void schedule(void (*);
		void ~linux_scheduler();
		void ~linux_scheduler();
		void GetCurrentThreadId(void);
		void GetCurrentThreadId(void);
		void YieldExecution(void);
		void YieldExecution(void);
		void get_ambient_scheduler(void);
		void get_ambient_scheduler(void);
		void what(void);
		void what(void);
		void ~invalid_operation();
		void ~invalid_operation();
		void ~invalid_operation();
		void ~invalid_operation();
		void operator&&(pplx::task<void> const&,pplx::task<void> const&);
		void operator&&(pplx::task<void> const&,pplx::task<void> const&);
		void ~scheduler_interface();
		void ~scheduler_interface();
		void set_ambient_scheduler(std::shared_ptr<pplx::scheduler_interface>);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void sync(void);
		void sync(void);
		void sync(void);
		void sync(void);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void _AsyncInit<bool,bool>(pplx::details::_Task_ptr<bool>::_Type const&,pplx::task<bool> const&);
		void task<bool> ();
		void task<bool> ();
		void task<bool> ();
		void get(void);
		void task_completion_event<bool>>(pplx::task_completion_event<bool>,pplx::task_options const&);
		void task_completion_event<bool>>(pplx::task_completion_event<bool>,pplx::task_options const&);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void function<bool ();
		void function<bool ();
		void sync(void);
		void sync(void);
		void function<bool ();
		void function<bool ();
		void sync(void);
		void sync(void);
		void task<bool> ();
		void task<bool> ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void _AsyncInit<int,int>(pplx::details::_Task_ptr<int>::_Type const&,pplx::task<int> const&);
		void get(void);
		void task_completion_event<int>>(pplx::task_completion_event<int>,pplx::task_options const&);
		void task_completion_event<int>>(pplx::task_completion_event<int>,pplx::task_options const&);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void get(void);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void http_call_response>>(pplx::details::_Task_ptr<std::shared_ptr<xbox::services::http_call_response>>::_Type const&,pplx::task<std::shared_ptr<xbox::services::http_call_response>> const&);
		void get(void);
		void http_call_response>>>(pplx::task_completion_event<std::shared_ptr<xbox::services::http_call_response>>,pplx::task_options const&);
		void http_call_response>>>(pplx::task_completion_event<std::shared_ptr<xbox::services::http_call_response>>,pplx::task_options const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void string>(pplx::details::_Task_ptr<std::string>::_Type const&,pplx::task<std::string> const&);
		void get(void);
		void string>>(pplx::task_completion_event<std::string>,pplx::task_options const&);
		void string>>(pplx::task_completion_event<std::string>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void finish_request(void);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void> *,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void _Perform(pplx::task_options const&,pplx::task<void> *,pplx::task<void> *);
		void function<void ();
		void function<void ();
		void function<void ();
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void get(void);
		void task_completion_event<uchar>>(pplx::task_completion_event<uchar>,pplx::task_options const&);
		void task_completion_event<uchar>>(pplx::task_completion_event<uchar>,pplx::task_options const&);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void _AsyncInit<uint,uint>(pplx::details::_Task_ptr<uint>::_Type const&,pplx::task<uint> const&);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void get(void);
		void task_completion_event<uint>>(pplx::task_completion_event<uint>,pplx::task_options const&);
		void task_completion_event<uint>>(pplx::task_completion_event<uint>,pplx::task_options const&);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void read_to_end(Concurrency::streams::streambuf<uchar>);
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void function<bool ();
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void extract_vector(void);
		void get(void);
		void task_completion_event<ulong long>>(pplx::task_completion_event<ulong long>,pplx::task_options const&);
		void task_completion_event<ulong long>>(pplx::task_completion_event<ulong long>,pplx::task_options const&);
		void extract_string(bool);
		void extract_string(bool);
		void extract_json(bool);
		void extract_json(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_vector(void);
		void extract_vector(void);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _AsyncInit<uchar,void>(pplx::details::_Task_ptr<uchar>::_Type const&,pplx::task<void> const&);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void>*,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void>*,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,__gnu_cxx::__normal_iterator<pplx::task<void>*,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>,__gnu_cxx::__normal_iterator<pplx::task<void>*,std::vector<pplx::task<void>,std::allocator<pplx::task<void>>>>);
		void _Perform(pplx::task_options const&,pplx::task<void>*,pplx::task<void>*);
		void _Perform(pplx::task_options const&,pplx::task<void>*,pplx::task<void>*);
		void task_completion_event<void>>(pplx::task_completion_event<void>,pplx::task_options const&);
		void task_completion_event<void>>(pplx::task_completion_event<void>,pplx::task_options const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void finish_request(void);
		void finish_request(void);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void close(std::_Ios_Openmode);
		void function<void ();
		void function<void ();
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void http_response>>(pplx::task_completion_event<web::http::http_response>,pplx::task_options const&);
		void http_response>>(pplx::task_completion_event<web::http::http_response>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void websocket_incoming_message>>(pplx::task_completion_event<web::websockets::client::websocket_incoming_message>,pplx::task_options const&);
		void websocket_incoming_message>>(pplx::task_completion_event<web::websockets::client::websocket_incoming_message>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void auth_flow_result>>(pplx::task_completion_event<xbox::services::system::auth_flow_result>,pplx::task_options const&);
		void auth_flow_result>>(pplx::task_completion_event<xbox::services::system::auth_flow_result>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void java_rps_ticket>>(pplx::task_completion_event<xbox::services::system::java_rps_ticket>,pplx::task_options const&);
		void java_rps_ticket>>(pplx::task_completion_event<xbox::services::system::java_rps_ticket>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void xbox_live_result<bool>>>(pplx::task_completion_event<xbox::services::xbox_live_result<bool>>,pplx::task_options const&);
		void xbox_live_result<bool>>>(pplx::task_completion_event<xbox::services::xbox_live_result<bool>>,pplx::task_options const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>::_Type const&,pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>> const&);
		void http_call_response>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>,pplx::task_options const&);
		void http_call_response>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>,pplx::task_options const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void get(void);
		void multiplayer_session>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>>,pplx::task_options const&);
		void multiplayer_session>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>>,pplx::task_options const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void get(void);
		void string>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::string>>,pplx::task_options const&);
		void string>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::string>>,pplx::task_options const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void get(void);
		void string>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>>,pplx::task_options const&);
		void string>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>>,pplx::task_options const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void get(void);
		void allocator<uchar>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>>,pplx::task_options const&);
		void allocator<uchar>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>>,pplx::task_options const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void get(void);
		void contextual_search_broadcast>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>>,pplx::task_options const&);
		void contextual_search_broadcast>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>>,pplx::task_options const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void get(void);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void get(void);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void get(void);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void get(void);
		void multiplayer_activity_details>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>>,pplx::task_options const&);
		void multiplayer_activity_details>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>>,pplx::task_options const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void get(void);
		void multiplayer_session_states>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>>,pplx::task_options const&);
		void multiplayer_session_states>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>>,pplx::task_options const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void get(void);
		void presence_record>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>>,pplx::task_options const&);
		void presence_record>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>>,pplx::task_options const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void get(void);
		void multiple_permissions_check_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>>,pplx::task_options const&);
		void multiple_permissions_check_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>>,pplx::task_options const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void get(void);
		void xbox_user_profile>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>>,pplx::task_options const&);
		void xbox_user_profile>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>>,pplx::task_options const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void verify_string_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>>,pplx::task_options const&);
		void verify_string_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>>,pplx::task_options const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void get(void);
		void tournament_stage>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>>,pplx::task_options const&);
		void tournament_stage>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>>,pplx::task_options const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void get(void);
		void user_statistics_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>>,pplx::task_options const&);
		void user_statistics_result>>>>>(pplx::task_completion_event<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>>,pplx::task_options const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void get(void);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void xbox_live_result<void>>(pplx::details::_Task_ptr<xbox::services::xbox_live_result<void>>::_Type const&,pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void get(void);
		void xbox_live_result<void>>>(pplx::task_completion_event<xbox::services::xbox_live_result<void>>,pplx::task_options const&);
		void xbox_live_result<void>>>(pplx::task_completion_event<xbox::services::xbox_live_result<void>>,pplx::task_options const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void get(void);
		void achievement>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievement>>,pplx::task_options const&);
		void achievement>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievement>>,pplx::task_options const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void get(void);
		void achievements_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>>,pplx::task_options const&);
		void achievements_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>>,pplx::task_options const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void get(void);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void get(void);
		void cluster_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>>,pplx::task_options const&);
		void cluster_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>>,pplx::task_options const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void get(void);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void get(void);
		void game_server_ticket_status>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>>,pplx::task_options const&);
		void game_server_ticket_status>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>>,pplx::task_options const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void get(void);
		void leaderboard_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>>,pplx::task_options const&);
		void leaderboard_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>>,pplx::task_options const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void get(void);
		void create_match_ticket_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>>,pplx::task_options const&);
		void create_match_ticket_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>>,pplx::task_options const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void get(void);
		void hopper_statistics_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>>,pplx::task_options const&);
		void hopper_statistics_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>>,pplx::task_options const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void get(void);
		void match_ticket_details_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>>,pplx::task_options const&);
		void match_ticket_details_response>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>>,pplx::task_options const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void get(void);
		void presence_record>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::presence::presence_record>>,pplx::task_options const&);
		void presence_record>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::presence::presence_record>>,pplx::task_options const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void get(void);
		void permission_check_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>>,pplx::task_options const&);
		void permission_check_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>>,pplx::task_options const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void get(void);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void get(void);
		void xbox_user_profile>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>>,pplx::task_options const&);
		void xbox_user_profile>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>>,pplx::task_options const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void sign_in_and_auth_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>>,pplx::task_options const&);
		void sign_in_and_auth_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void sign_in_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_result>>,pplx::task_options const&);
		void sign_in_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::sign_in_result>>,pplx::task_options const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void get(void);
		void token_and_signature_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>>,pplx::task_options const&);
		void token_and_signature_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>>,pplx::task_options const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void token_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_result>>,pplx::task_options const&);
		void token_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::token_result>>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void verify_string_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::verify_string_result>>,pplx::task_options const&);
		void verify_string_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::system::verify_string_result>>,pplx::task_options const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void get(void);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void get(void);
		void title_storage_blob_metadata>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>>,pplx::task_options const&);
		void title_storage_blob_metadata>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>>,pplx::task_options const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void get(void);
		void title_storage_blob_metadata_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>>,pplx::task_options const&);
		void title_storage_blob_metadata_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>>,pplx::task_options const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void get(void);
		void title_storage_blob_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>>,pplx::task_options const&);
		void title_storage_blob_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>>,pplx::task_options const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void get(void);
		void title_storage_quota>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>>,pplx::task_options const&);
		void title_storage_quota>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>>,pplx::task_options const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void get(void);
		void tournament_instances>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>>,pplx::task_options const&);
		void tournament_instances>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>>,pplx::task_options const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void get(void);
		void tournament_teams>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>>,pplx::task_options const&);
		void tournament_teams>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>>,pplx::task_options const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void _CreateImpl(pplx::details::_CancellationTokenState *,pplx::scheduler_ptr);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void get(void);
		void user_statistics_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>>,pplx::task_options const&);
		void user_statistics_result>>>(pplx::task_completion_event<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>>,pplx::task_options const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void what(void);
		void what(void);
		void ~task_canceled();
		void ~task_canceled();
		void ~task_canceled();
		void ~task_canceled();
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<bool>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<bool>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(bool);
		void set(bool);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<int>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<int>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(int);
		void set(int);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void ~task_completion_event();
		void _RegisterTask(std::shared_ptr const&<pplx::details::_Task_impl<std::shared_ptr<xbox::services::http_call_response>>>);
		void _RegisterTask(std::shared_ptr const&<pplx::details::_Task_impl<std::shared_ptr<xbox::services::http_call_response>>>);
		void set(std::shared_ptr<xbox::services::http_call_response>);
		void set(std::shared_ptr<xbox::services::http_call_response>);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<std::string>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<std::string>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(std::string);
		void set(std::string);
		void websocket_exception>(web::websockets::client::websocket_exception);
		void websocket_exception>(web::websockets::client::websocket_exception);
		void ~task_completion_event();
		void _ExceptionHolder>>(std::shared_ptr<pplx::details::_ExceptionHolder>,pplx::details::_TaskCreationCallstack const&);
		void _ExceptionHolder>>(std::shared_ptr<pplx::details::_ExceptionHolder>,pplx::details::_TaskCreationCallstack const&);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<uchar>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<uchar>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void _ExceptionHolder>>(std::shared_ptr<pplx::details::_ExceptionHolder>,pplx::details::_TaskCreationCallstack const&);
		void _ExceptionHolder>>(std::shared_ptr<pplx::details::_ExceptionHolder>,pplx::details::_TaskCreationCallstack const&);
		void set(uchar);
		void set(uchar);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<uint>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<uint>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(uint);
		void set(uint);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<ulong long>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<ulong long>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(ulong long);
		void set(ulong long);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void runtime_error>(std::runtime_error);
		void runtime_error>(std::runtime_error);
		void oauth1_exception>(web::http::oauth1::experimental::oauth1_exception);
		void oauth1_exception>(web::http::oauth1::experimental::oauth1_exception);
		void websocket_exception>(web::websockets::client::websocket_exception);
		void websocket_exception>(web::websockets::client::websocket_exception);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<web::http::http_response>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<web::http::http_response>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(web::http::http_response);
		void set(web::http::http_response);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<web::websockets::client::websocket_incoming_message>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<web::websockets::client::websocket_incoming_message>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(web::websockets::client::websocket_incoming_message);
		void set(web::websockets::client::websocket_incoming_message);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::system::auth_flow_result>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::system::auth_flow_result>> const&);
		void set(xbox::services::system::auth_flow_result);
		void set(xbox::services::system::auth_flow_result);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::system::java_rps_ticket>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::system::java_rps_ticket>> const&);
		void set(xbox::services::system::java_rps_ticket);
		void set(xbox::services::system::java_rps_ticket);
		void ~task_completion_event();
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<bool>>> const&);
		void set(xbox::services::xbox_live_result<bool>);
		void set(xbox::services::xbox_live_result<bool>);
		void _RegisterTask(std::shared_ptr const&<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>>);
		void _RegisterTask(std::shared_ptr const&<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>>>);
		void set(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>);
		void set(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>);
		void _RegisterTask(std::shared_ptr const&<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>>>);
		void _RegisterTask(std::shared_ptr const&<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>>>);
		void set(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>);
		void set(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::string>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::string>>> const&);
		void set(xbox::services::xbox_live_result<std::string>);
		void set(xbox::services::xbox_live_result<std::string>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>);
		void set(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>);
		void set(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>>> const&);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>);
		void set(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<void>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<void>>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(xbox::services::xbox_live_result<void>);
		void set(xbox::services::xbox_live_result<void>);
		void exception>(std::exception);
		void exception>(std::exception);
		void ~task_completion_event();
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::achievements::achievement>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::achievements::achievement>);
		void set(xbox::services::xbox_live_result<xbox::services::achievements::achievement>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>);
		void set(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>);
		void set(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>);
		void set(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>);
		void set(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>);
		void set(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>);
		void set(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>);
		void set(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::presence::presence_record>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::presence::presence_record>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::presence::presence_record>);
		void set(xbox::services::xbox_live_result<xbox::services::presence::presence_record>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>);
		void set(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>);
		void set(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>);
		void set(xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result>);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::system::sign_in_result>>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(xbox::services::xbox_live_result<xbox::services::system::sign_in_result>);
		void set(xbox::services::xbox_live_result<xbox::services::system::sign_in_result>);
		void exception>(std::exception);
		void exception>(std::exception);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>);
		void set(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>);
		void _CancelInternal(void);
		void _CancelInternal(void);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::system::token_result>>> const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::details::_TaskCreationCallstack const&);
		void set(xbox::services::xbox_live_result<xbox::services::system::token_result>);
		void set(xbox::services::xbox_live_result<xbox::services::system::token_result>);
		void set_exception(std::__exception_ptr::exception_ptr);
		void set_exception(std::__exception_ptr::exception_ptr);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::system::verify_string_result>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::system::verify_string_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::system::verify_string_result>);
		void set(xbox::services::xbox_live_result<xbox::services::system::verify_string_result>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>);
		void set(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>);
		void set(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>);
		void set(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>>> const&);
		void _RegisterTask(std::shared_ptr<pplx::details::_Task_impl<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>>> const&);
		void set(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>);
		void set(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void websocket_exception>(web::websockets::client::websocket_exception,pplx::task_options const&);
		void websocket_exception>(web::websockets::client::websocket_exception,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void runtime_error>(std::runtime_error,pplx::task_options const&);
		void runtime_error>(std::runtime_error,pplx::task_options const&);
		void oauth1_exception>(web::http::oauth1::experimental::oauth1_exception,pplx::task_options const&);
		void oauth1_exception>(web::http::oauth1::experimental::oauth1_exception,pplx::task_options const&);
		void websocket_exception>(web::websockets::client::websocket_exception,pplx::task_options const&);
		void websocket_exception>(web::websockets::client::websocket_exception,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception_ptr>(std::__exception_ptr::exception_ptr,pplx::task_options const&);
		void exception>(std::exception,pplx::task_options const&);
		void exception>(std::exception,pplx::task_options const&);
		void exception>(std::exception,pplx::task_options const&);
		void exception>(std::exception,pplx::task_options const&);
		void task_from_result(pplx::task_options const&);
		void task_from_result(pplx::task_options const&);
		void task_from_result<bool>(bool,pplx::task_options const&);
		void task_from_result<bool>(bool,pplx::task_options const&);
		void task_from_result<int>(int,pplx::task_options const&);
		void task_from_result<int>(int,pplx::task_options const&);
		void http_call_response>>(std::shared_ptr<xbox::services::http_call_response>,pplx::task_options const&);
		void http_call_response>>(std::shared_ptr<xbox::services::http_call_response>,pplx::task_options const&);
		void string>(std::string,pplx::task_options const&);
		void string>(std::string,pplx::task_options const&);
		void task_from_result<uint>(uint,pplx::task_options const&);
		void task_from_result<uint>(uint,pplx::task_options const&);
		void websocket_incoming_message>(web::websockets::client::websocket_incoming_message,pplx::task_options const&);
		void websocket_incoming_message>(web::websockets::client::websocket_incoming_message,pplx::task_options const&);
		void xbox_live_result<bool>>(xbox::services::xbox_live_result<bool>,pplx::task_options const&);
		void xbox_live_result<bool>>(xbox::services::xbox_live_result<bool>,pplx::task_options const&);
		void http_call_response>>>(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>,pplx::task_options const&);
		void http_call_response>>>(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>,pplx::task_options const&);
		void multiplayer_session>>>(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>,pplx::task_options const&);
		void multiplayer_session>>>(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>,pplx::task_options const&);
		void string>>(xbox::services::xbox_live_result<std::string>,pplx::task_options const&);
		void string>>(xbox::services::xbox_live_result<std::string>,pplx::task_options const&);
		void string>>>>(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>,pplx::task_options const&);
		void string>>>>(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>,pplx::task_options const&);
		void allocator<uchar>>>>(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>,pplx::task_options const&);
		void allocator<uchar>>>>(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>,pplx::task_options const&);
		void contextual_search_broadcast>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>,pplx::task_options const&);
		void contextual_search_broadcast>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>,pplx::task_options const&);
		void multiplayer_activity_details>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>,pplx::task_options const&);
		void multiplayer_activity_details>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>,pplx::task_options const&);
		void multiplayer_session_states>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>,pplx::task_options const&);
		void multiplayer_session_states>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>,pplx::task_options const&);
		void presence_record>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>,pplx::task_options const&);
		void presence_record>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>,pplx::task_options const&);
		void multiple_permissions_check_result>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>,pplx::task_options const&);
		void multiple_permissions_check_result>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>,pplx::task_options const&);
		void xbox_user_profile>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>,pplx::task_options const&);
		void xbox_user_profile>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>,pplx::task_options const&);
		void verify_string_result>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>,pplx::task_options const&);
		void verify_string_result>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>,pplx::task_options const&);
		void tournament_stage>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>,pplx::task_options const&);
		void tournament_stage>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>,pplx::task_options const&);
		void user_statistics_result>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>,pplx::task_options const&);
		void user_statistics_result>>>>(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>,pplx::task_options const&);
		void xbox_live_result<void>>(xbox::services::xbox_live_result<void>,pplx::task_options const&);
		void xbox_live_result<void>>(xbox::services::xbox_live_result<void>,pplx::task_options const&);
		void achievement>>(xbox::services::xbox_live_result<xbox::services::achievements::achievement>,pplx::task_options const&);
		void achievement>>(xbox::services::xbox_live_result<xbox::services::achievements::achievement>,pplx::task_options const&);
		void achievements_result>>(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>,pplx::task_options const&);
		void achievements_result>>(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>,pplx::task_options const&);
		void cluster_result>>(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>,pplx::task_options const&);
		void cluster_result>>(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>,pplx::task_options const&);
		void game_server_ticket_status>>(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>,pplx::task_options const&);
		void game_server_ticket_status>>(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>,pplx::task_options const&);
		void leaderboard_result>>(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>,pplx::task_options const&);
		void leaderboard_result>>(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>,pplx::task_options const&);
		void create_match_ticket_response>>(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>,pplx::task_options const&);
		void create_match_ticket_response>>(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>,pplx::task_options const&);
		void hopper_statistics_response>>(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>,pplx::task_options const&);
		void hopper_statistics_response>>(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>,pplx::task_options const&);
		void match_ticket_details_response>>(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>,pplx::task_options const&);
		void match_ticket_details_response>>(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>,pplx::task_options const&);
		void presence_record>>(xbox::services::xbox_live_result<xbox::services::presence::presence_record>,pplx::task_options const&);
		void presence_record>>(xbox::services::xbox_live_result<xbox::services::presence::presence_record>,pplx::task_options const&);
		void permission_check_result>>(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>,pplx::task_options const&);
		void permission_check_result>>(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>,pplx::task_options const&);
		void xbox_user_profile>>(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>,pplx::task_options const&);
		void xbox_user_profile>>(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>,pplx::task_options const&);
		void sign_in_result>>(xbox::services::xbox_live_result<xbox::services::system::sign_in_result>,pplx::task_options const&);
		void sign_in_result>>(xbox::services::xbox_live_result<xbox::services::system::sign_in_result>,pplx::task_options const&);
		void token_and_signature_result>>(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>,pplx::task_options const&);
		void token_and_signature_result>>(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>,pplx::task_options const&);
		void token_result>>(xbox::services::xbox_live_result<xbox::services::system::token_result>,pplx::task_options const&);
		void token_result>>(xbox::services::xbox_live_result<xbox::services::system::token_result>,pplx::task_options const&);
		void verify_string_result>>(xbox::services::xbox_live_result<xbox::services::system::verify_string_result>,pplx::task_options const&);
		void verify_string_result>>(xbox::services::xbox_live_result<xbox::services::system::verify_string_result>,pplx::task_options const&);
		void title_storage_blob_metadata>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>,pplx::task_options const&);
		void title_storage_blob_metadata>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>,pplx::task_options const&);
		void title_storage_blob_metadata_result>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>,pplx::task_options const&);
		void title_storage_blob_metadata_result>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>,pplx::task_options const&);
		void title_storage_blob_result>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>,pplx::task_options const&);
		void title_storage_blob_result>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>,pplx::task_options const&);
		void title_storage_quota>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>,pplx::task_options const&);
		void title_storage_quota>>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>,pplx::task_options const&);
		void tournament_instances>>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>,pplx::task_options const&);
		void tournament_instances>>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>,pplx::task_options const&);
		void tournament_teams>>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>,pplx::task_options const&);
		void tournament_teams>>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>,pplx::task_options const&);
		void user_statistics_result>>(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>,pplx::task_options const&);
		void user_statistics_result>>(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>,pplx::task_options const&);
		void ~task_options();
		void ~task_options();
	}
};

#pragma once
class TopSnowBlock{
	public:
		TopSnowBlock(std::string const&,int);
		TopSnowBlock(std::string const&,int);
		void asItemInstance(BlockSource &,BlockPos const&,int);
		void asItemInstance(BlockSource &,BlockPos const&,int);
		void buildData(BlockSource &,BlockPos const&,int,bool);
		void buildData(BlockSource &,BlockPos const&,int,bool);
		void calcGroundFriction(Mob &,BlockPos const&);
		void calcGroundFriction(Mob &,BlockPos const&);
		void calcSnowThickness(Mob *,BlockPos const&);
		void canBeBuiltOver(BlockSource &,BlockPos const&);
		void canBeBuiltOver(BlockSource &,BlockPos const&);
		void canBeSilkTouched(void);
		void canBeSilkTouched(void);
		void canHaveExtraData(void);
		void canHaveExtraData(void);
		void checkIsPathable(Entity &,BlockPos const&,BlockPos const&);
		void checkIsPathable(Entity &,BlockPos const&,BlockPos const&);
		void checkIsRecoverableBlock(BlockID);
		void checkIsRecoverableBlock(BlockID);
		void dataIDToHeight(uchar);
		void dataIDToHeight(uchar);
		void dataIDToRecoverableFullBlock(BlockSource &,BlockPos const&,uchar);
		void dataIDToRecoverableFullBlock(BlockSource &,BlockPos const&,uchar);
		void getAABB(BlockSource &,BlockPos const&,AABB &,int,bool,int);
		void getAABB(BlockSource &,BlockPos const&,AABB &,int,bool,int);
		void getCollisionShape(AABB &,BlockSource &,BlockPos const&,Entity *);
		void getCollisionShape(AABB &,BlockSource &,BlockPos const&,Entity *);
		void getDustColor(uchar);
		void getDustColor(uchar);
		void getPlacementDataValue(Mob &,BlockPos const&,signed char,Vec3 const&,int);
		void getPlacementDataValue(Mob &,BlockPos const&,signed char,Vec3 const&,int);
		void getResource(Random &,int,int);
		void getResource(Random &,int,int);
		void getResourceCount(Random &,int,int);
		void getResourceCount(Random &,int,int);
		void getVisualShape(BlockSource &,BlockPos const&,AABB &,bool);
		void getVisualShape(BlockSource &,BlockPos const&,AABB &,bool);
		void getVisualShape(uchar,AABB &,bool);
		void getVisualShape(uchar,AABB &,bool);
		void isFree(BlockSource &,BlockPos const&);
		void isFree(BlockSource &,BlockPos const&);
		void mayPlace(BlockSource &,BlockPos const&);
		void mayPlace(BlockSource &,BlockPos const&);
		void neighborChanged(BlockSource &,BlockPos const&,BlockPos const&);
		void neighborChanged(BlockSource &,BlockPos const&,BlockPos const&);
		void onPlace(BlockSource &,BlockPos const&);
		void onPlace(BlockSource &,BlockPos const&);
		void onRemove(BlockSource &,BlockPos const&);
		void onRemove(BlockSource &,BlockPos const&);
		void playerDestroy(Player *,BlockPos const&,int);
		void playerDestroy(Player *,BlockPos const&,int);
		void playerWillDestroy(Player &,BlockPos const&,int);
		void playerWillDestroy(Player &,BlockPos const&,int);
		void registerRecoverableBlock(BlockID);
		void registerRecoverableBlock(BlockID);
		void shouldRenderFace(BlockSource &,BlockPos const&,signed char,AABB const&);
		void shouldRenderFace(BlockSource &,BlockPos const&,signed char,AABB const&);
		void shouldStopFalling(Entity &);
		void shouldStopFalling(Entity &);
		void startFalling(BlockSource &,BlockPos const&,Block *,bool);
		void startFalling(BlockSource &,BlockPos const&,Block *,bool);
		void tick(BlockSource &,BlockPos const&,Random &);
		void tick(BlockSource &,BlockPos const&,Random &);
		void tryToPlace(BlockSource &,BlockPos const&,uchar);
		void tryToPlace(BlockSource &,BlockPos const&,uchar);
		void waterSpreadCausesSpawn(void);
		void waterSpreadCausesSpawn(void);
		void ~TopSnowBlock();
		void ~TopSnowBlock();
};

#pragma once
namespace Touch{
	class AvailableGamesList{
		public:
		void getNumberOfItems(void);
		void isSelectedItem(int);
		void renderBackground(void);
		void renderItem(int,int,int,int,Tesselator &);
		void selectCancel(void);
		void selectItem(int,bool);
		void selectStart(int);
		void ~AvailableGamesList();
		void ~AvailableGamesList();
		void ~IInventoryPaneCallback();
		void ~IInventoryPaneCallback();
		void IngameBlockSelectionScreen(void);
		void addItem(Touch::InventoryPane const*,int);
		void buttonClicked(Button *);
		void getItems(Touch::InventoryPane const*);
		void getSlotPosX(int);
		void getSlotPosY(int);
		void hasClippingArea(IntRectangle &);
		void init(void);
		void isAllowed(int);
		void mouseClicked(int,int,int);
		void mouseReleased(int,int,int);
		void removed(void);
		void render(int,int,float);
		void renderDemoOverlay(void);
		void setupPositions(void);
		void tick(void);
		void ~IngameBlockSelectionScreen();
		void ~IngameBlockSelectionScreen();
		void InventoryPane(Touch::IInventoryPaneCallback *,Minecraft *,IntRectangle const&,int,float,int,int,int,bool);
		void buildInventoryItemsChunk(ItemRenderChunkType);
		void drawScrollBar(ScrollBar &);
		void onAppResumed(void);
		void onAppSuspended(void);
		void onSelect(int,bool);
		void refreshItems(void);
		void renderBatch(std::vector<ScrollingPane::GridItem,std::allocator<ScrollingPane::GridItem>> &,float,float,float);
		void renderSelectedItem(std::vector<ScrollingPane::GridItem,std::allocator<ScrollingPane::GridItem>> &,std::vector<ItemInstance const*,std::allocator<ItemInstance const*>>,Tesselator &,ScrollingPane::GridItem*&,float &,float &);
		void setRenderDecorations(bool);
		void tick(void);
		void ~InventoryPane();
		void ~InventoryPane();
		void JoinGameScreen(void);
		void buttonClicked(Button *);
		void handleBackEvent(bool);
		void init(void);
		void isInGameScreen(void);
		void isIndexValid(int);
		void render(int,int,float);
		void setupPositions(void);
		void tick(void);
		void ~JoinGameScreen();
		void ~JoinGameScreen();
		void buttonClicked(Button *);
		void init(void);
		void ~PromotionStartMenuScreen();
		void ~PromotionStartMenuScreen();
		void SelectWorldScreen(void);
		void buttonClicked(Button *);
		void getUniqueLevelName(std::string const&);
		void handleBackEvent(bool);
		void init(void);
		void isInGameScreen(void);
		void isIndexValid(int);
		void keyPressed(int);
		void loadLevelSource(void);
		void render(int,int,float);
		void setupPositions(void);
		void tick(void);
		void ~SelectWorldScreen();
		void ~SelectWorldScreen();
		void StartMenuScreen(void);
		void _updateLicense(void);
		void buttonClicked(Button *);
		void chooseRandomSplash(void);
		void handleBackEvent(bool);
		void init(void);
		void isInGameScreen(void);
		void render(int,int,float);
		void setupPlayButtons(bool);
		void setupPositions(void);
		void tick(void);
		void ~StartMenuScreen();
		void ~StartMenuScreen();
		void TButton(int,int,int,int,int,std::string const&,Minecraft *);
		void TButton(int,int,int,std::string const&,Minecraft *);
		void TButton(int,std::string const&,Minecraft *);
		void init(Minecraft *);
		void init(Minecraft *,std::string const&,IntRectangle const&,IntRectangle const&,int,int,int,int);
		void renderBg(Minecraft *,int,int);
		void ~TButton();
		void ~TButton();
		void THeader(int,int,int,int,int,std::string const&);
		void THeader(int,int,int,std::string const&);
		void THeader(int,std::string const&);
		void render(Minecraft *,int,int);
		void renderBg(Minecraft *,int,int);
		void ~THeader();
		void ~THeader();
		TouchDeleteWorldScreen(LevelSummary const&);
		void postResult(bool);
		void ~TouchDeleteWorldScreen();
		void ~TouchDeleteWorldScreen();
		TouchWorldSelectionList(Minecraft *,int,int);
		void capXPosition(void);
		void commit(void);
		void getNumberOfItems(void);
		void getPos(float);
		void isSelectedItem(int);
		void renderBackground(void);
		void renderItem(int,int,int,int,Tesselator &);
		void selectCancel(void);
		void selectItem(int,bool);
		void selectStart(int,int,int);
		void stepLeft(void);
		void stepRight(void);
		void tick(void);
		void touched(void);
		void tweenInited(void);
		void ~TouchWorldSelectionList();
		void ~TouchWorldSelectionList();
	}
};

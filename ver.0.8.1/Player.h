#pragma once
class Player{
	public:
		Player(Level *,bool);
		void _init(void);
		void addAdditonalSaveData(CompoundTag *);
		void aiStep(void);
		void animateRespawn(Player*,Level *);
		void animateRespawn(void);
		void asPlayer(Entity *);
		void attack(Entity *);
		void awardKillScore(Entity *,int);
		void canDestroy(Tile *);
		void canUseCarriedItemWhileMoving(void);
		void checkBed(void);
		void closeContainer(void);
		void completeUsingItem(void);
		void die(Entity *);
		void displayClientMessage(std::string const&);
		void drop(ItemInstance const*);
		void drop(ItemInstance const*,bool);
		void findStandUpPosition(Entity *);
		void getArmor(int);
		void getArmorTypeHash(void);
		void getArmorValue(void);
		void getBaseSpeed(void);
		void getCarriedItem(void);
		void getDestroySpeed(Tile *);
		void getEntityTypeId(void);
		void getHeadHeight(void);
		void getMaxHealth(void);
		void getRespawnPosition(void);
		void getRidingHeight(void);
		void getScore(void);
		void getSelectedItem(void);
		void getSleepRotation(void);
		void getSleepTimer(void);
		void getTicksUsingItem(void);
		void getUseItem(void);
		void getUseItemDuration(void);
		void getWalkingSpeedModifier(void);
		void handleEntityEvent(char);
		void hasResource(int);
		void hasRespawnPosition(void);
		void hurt(Entity *,int);
		void hurtArmor(int);
		void interact(Entity *);
		void isCreativeModeAllowed(void);
		void isHurt(void);
		void isImmobile(void);
		void isInWall(void);
		void isLocalPlayer(void);
		void isPlayer(Entity *);
		void isPlayer(void);
		void isShootable(void);
		void isSleeping(void);
		void isSleepingLongEnough(void);
		void isUsingItem(void);
		void openContainer(ChestTileEntity *);
		void openFurnace(FurnaceTileEntity *);
		void openTextEdit(TileEntity *);
		void readAdditionalSaveData(CompoundTag *);
		void reallyDrop(ItemEntity *);
		void releaseUsingItem(void);
		void remove(void);
		void reset(void);
		void resetPos(bool);
		void respawn(void);
		void ride(Entity *);
		void rideTick(void);
		void setAllPlayersSleeping(void);
		void setArmor(int,ItemInstance const*);
		void setBedOffset(int);
		void setDefaultHeadHeight(void);
		void setRespawnPosition(Pos const&);
		void spawnEatParticles(ItemInstance const*,int);
		void startCrafting(int,int,int,int);
		void startDestroying(void);
		void startSleepInBed(int,int,int);
		void startStonecutting(int,int,int);
		void startUsingItem(ItemInstance,int);
		void stopDestroying(void);
		void stopSleepInBed(bool,bool,bool);
		void stopUsingItem(void);
		void take(Entity *,int);
		void tick(void);
		void tileEntityDestroyed(int);
		void touch(Entity *);
		void travel(float,float);
		void updateAi(void);
		void ~Player();
		void ~Player();
};

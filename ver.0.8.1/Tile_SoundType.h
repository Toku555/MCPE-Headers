#pragma once
namespace Tile{
	class SoundType{
		public:
		void SoundType(std::string const&,float,float);
		void ~SoundType();
		Tile(int,Material const*);
		Tile(int,TextureUVCoordinateSet,Material const*);
		Tile(int,std::string,Material const*);
		void addAABBs(Level *,int,int,int,AABB const*,std::vector<AABB,std::allocator<AABB>> &);
		void addLights(Level *,int,int,int);
		void animateTick(Level *,int,int,int,Random *);
		void attack(Level *,int,int,int,Player *);
		void canSurvive(Level *,int,int,int);
		void clip(Level *,int,int,int,Vec3 const&,Vec3 const&);
		void containsX(Vec3 const&);
		void containsY(Vec3 const&);
		void containsZ(Vec3 const&);
		void destroy(Level *,int,int,int,int);
		void entityInside(Level *,int,int,int,Entity *);
		void fallOn(Level *,int,int,int,Entity *,float);
		void getAABB(Level *,int,int,int);
		void getBrightness(LevelSource *,int,int,int);
		void getCarriedTexture(int,int);
		void getColor(LevelSource *,int,int,int);
		void getColor(int);
		void getDescriptionId(ItemInstance const*);
		void getDescriptionId(void);
		void getDestroyProgress(Player *);
		void getDirectSignal(Level *,int,int,int,int);
		void getExplosionResistance(Entity *);
		void getIDByName(std::string const&,bool);
		void getName(void);
		void getPlacementDataValue(Level *,int,int,int,int,float,float,float,Mob *,int);
		void getRenderLayer(void);
		void getRenderShape(void);
		void getResource(int,Random *);
		void getResourceCount(Random *);
		void getSignal(LevelSource *,int,int,int);
		void getSignal(LevelSource *,int,int,int,int);
		void getSpawnResourcesAuxValue(int);
		void getTexture(LevelSource *,int,int,int,int);
		void getTexture(int);
		void getTexture(int,int);
		void getTextureItem(std::string const&);
		void getTextureNum(int);
		void getTextureUVCoordinateSet(std::string const&,int);
		void getThickness(void);
		void getTickDelay(void);
		void getTileAABB(Level *,int,int,int);
		void getTileEntityType(void);
		void getTileType(void);
		void getTypeDescriptionId(int);
		void handleEntityInside(Level *,int,int,int,Entity *,Vec3 &);
		void init(void);
		void initTiles(std::shared_ptr<TextureAtlas>);
		void isCubeShaped(void);
		void isFaceVisible(Level *,int,int,int,int);
		void isLiquidTile(void);
		void isPathfindable(LevelSource *,int,int,int);
		void isSignalSource(void);
		void isSolidRender(void);
		void isUnbreakable(void);
		void mayPick(int,bool);
		void mayPick(void);
		void mayPlace(Level *,int,int,int);
		void mayPlace(Level *,int,int,int,uchar);
		void neighborChanged(Level *,int,int,int,int,int,int,int);
		void onFertilized(Level *,int,int,int);
		void onGraphicsModeChanged(bool);
		void onPlace(Level *,int,int,int);
		void onRemove(Level *,int,int,int);
		void playerDestroy(Level *,Player *,int,int,int,int);
		void playerWillDestroy(Level *,int,int,int,int,Player *);
		void popResource(Level *,int,int,int,ItemInstance const&);
		void prepareRender(Level *,int,int,int);
		void setCategory(int,int);
		void setDescriptionId(std::string const&);
		void setDestroyTime(float);
		void setExplodeable(float);
		void setLightBlock(int);
		void setLightEmission(float);
		void setShape(float,float,float,float,float,float);
		void setSoundType(Tile::SoundType const&);
		void setTicking(bool);
		void shouldRenderFace(LevelSource *,int,int,int,int);
		void spawnBurnResources(Level *,float,float,float);
		void spawnResources(Level *,int,int,int,int);
		void spawnResources(Level *,int,int,int,int,float);
		void stepOn(Level *,int,int,int,Entity *);
		void teardownTiles(void);
		void tick(Level *,int,int,int,Random *);
		void transformToValidBlockId(int);
		void transformToValidBlockId(int,int,int,int);
		void triggerEvent(Level *,int,int,int,int,int);
		void updateDefaultShape(void);
		void updateShape(LevelSource *,int,int,int);
		void use(Level *,int,int,int,Player *);
		void wasExploded(Level *,int,int,int);
		void ~Tile();
		void ~Tile();
	}
};

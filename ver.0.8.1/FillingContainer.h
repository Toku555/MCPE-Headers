#pragma once
class FillingContainer{
	public:
		FillingContainer(int,int,int,bool);
		void add(ItemInstance *);
		void addItem(ItemInstance *);
		void addResource(ItemInstance const&);
		void clearInventory(int);
		void clearSlot(int);
		void compressLinkedSlotList(int);
		void contains(ItemInstance *);
		void doDrop(ItemInstance *,bool);
		void dropAll(bool);
		void dropSlot(int,bool,bool);
		void fixBackwardCompabilityItem(ItemInstance &);
		void getEmptySlotsCount(void);
		void getFreeSlot(void);
		void getItem(int);
		void getLinked(int);
		void getLinkedSlot(int);
		void getLinkedSlotsCount(void);
		void getMaxStackSize(void);
		void getName(void);
		void getNonEmptySlot(int);
		void getNonEmptySlot(int,int);
		void getSlot(int);
		void getSlot(int,int);
		void getSlotList(int &);
		void getSlotWithRemainingSpace(ItemInstance const&);
		void hasResource(int);
		void linkEmptySlot(int);
		void linkSlot(int,int);
		void load(ListTag *);
		void release(int);
		void removeItem(int,int);
		void removeResource(ItemInstance const&);
		void removeResource(ItemInstance const&,bool);
		void removeResource(int);
		void replace(std::vector<ItemInstance,std::allocator<ItemInstance>>,int);
		void replaceSlot(int,ItemInstance *);
		void save(ListTag *);
		void setContainerChanged(void);
		void setItem(int,ItemInstance *);
		void startOpen(void);
		void stillValid(Player *);
		void stopOpen(void);
		void swapSlots(int,int);
		void unlinkSlot(int);
		void ~FillingContainer();
		void ~FillingContainer();
};

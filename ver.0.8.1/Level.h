#pragma once
class Level{
	public:
		Level(LevelStorage *,std::string const&,LevelSettings const&,bool,int,Dimension *);
		void _init(std::string const&,LevelSettings const&,int,Dimension *);
		void _syncTime(long);
		void addEntity(Entity *);
		void addListener(LevelListener *);
		void addParticle(ParticleType,float,float,float,float,float,float,int);
		void addToTickNextTick(int,int,int,int,int);
		void animateTick(int,int,int);
		void broadcastEntityEvent(Entity *,char);
		void canSeeSky(int,int,int);
		void checkAndHandleWater(AABB const&,Material const*,Entity *);
		void clip(Vec3 const&,Vec3 const&,bool,bool);
		void containsAnyLiquid(AABB const&);
		void containsFireTile(AABB const&);
		void containsLiquid(AABB const&,Material const*);
		void containsMaterial(AABB const&,Material const*);
		void countInstanceOfBaseType(int);
		void countInstanceOfType(int);
		void createChunkSource(void);
		void dispatchEntityData(Entity *);
		void entityAdded(Entity *);
		void entityRemoved(Entity *);
		void explode(Entity *,float,float,float,float);
		void explode(Entity *,float,float,float,float,bool);
		void extinguishFire(int,int,int,int);
		void findPath(Entity *,Entity *,float,bool,bool,bool,bool);
		void findPath(Entity *,int,int,int,float,bool,bool,bool,bool);
		void getAllEntities(void);
		void getBiome(int,int);
		void getBiomeSource(void);
		void getBrightness(LightLayer const&,int,int,int);
		void getBrightness(int,int,int);
		void getChunk(int,int);
		void getChunkAt(int,int);
		void getChunkSource(void);
		void getCloudColor(float);
		void getCubes(Entity const*,AABB const&,float *);
		void getData(int,int,int);
		void getDirectSignal(int,int,int,int);
		void getEntities(Entity *,AABB const&);
		void getEntitiesOfClass(int,AABB const&,std::vector<Entity *,std::allocator<Entity *>> &);
		void getEntitiesOfType(int,AABB const&,std::vector<Entity *,std::allocator<Entity *>> &);
		void getEntity(int);
		void getFogColor(float);
		void getHeightmap(int,int);
		void getLevelData(void);
		void getLevelStorage(void);
		void getLightDepth(int,int);
		void getLightsToUpdate(void);
		void getMaterial(int,int,int);
		void getMob(int);
		void getMoonPhase(void);
		void getNearestPlayer(Entity *,float);
		void getNearestPlayer(float,float,float,float);
		void getPlayer(std::string const&);
		void getPlayerNames(void);
		void getRandomMobSpawnAt(MobCategory const&,int,int,int);
		void getRawBrightness(int,int,int);
		void getRawBrightness(int,int,int,bool);
		void getSeaLevel(void);
		void getSeed(void);
		void getSeenPercent(Vec3 const&,AABB const&);
		void getSharedSpawnPos(void);
		void getSignal(int,int,int,int);
		void getSkyColor(Entity *,float);
		void getSkyColor(int,int,float);
		void getSkyDarken(float);
		void getStarBrightness(float);
		void getSunAngle(float);
		void getSunIntensity(float,Mob *,float);
		void getSunlightDirection(float);
		void getSunriseColor(float);
		void getTile(int,int,int);
		void getTileCubes(AABB const&);
		void getTileCubesCount(AABB const&);
		void getTileEntity(int,int,int);
		void getTileObstructsChests(int,int,int);
		void getTime(void);
		void getTimeOfDay(float);
		void getTopSolidBlock(int,int);
		void getTopTile(int,int);
		void getTopTileY(int,int);
		void hasChunk(int,int);
		void hasChunkAt(int,int,int);
		void hasChunksAt(int,int,int,int);
		void hasChunksAt(int,int,int,int,int,int);
		void hasDirectSignal(int,int,int);
		void hasNeighborSignal(int,int,int);
		void inRange(int,int,int);
		void isDay(void);
		void isEmptyTile(int,int,int);
		void isNightMode(void);
		void isSkyLit(int,int,int);
		void isSolidBlockingTile(int,int,int);
		void isSolidRenderTile(int,int,int);
		void isTopSolidBlocking(Tile *,int);
		void isTopSolidBlocking(int,int,int);
		void isUnobstructed(AABB const&);
		void levelEvent(Player *,int,int,int,int,int);
		void levelEvent(int,int,int,int,int);
		void lightColumnChanged(int,int,int,int);
		void loadEntities(void);
		void loadPlayer(Player *,bool);
		void mayInteract(Player *,int,int,int);
		void mayPlace(int,int,int,int,bool,uchar);
		void neighborChanged(int,int,int,int,int,int,int);
		void playSound(Entity *,std::string const&,float,float);
		void playSound(float,float,float,std::string const&,float,float);
		void prepare(void);
		void registerTemporaryPointer(_TickPtr *);
		void removeEntity(Entity *);
		void removeListener(LevelListener *);
		void removePlayer(Player *);
		void removeTile(int,int,int);
		void removeTileEntity(int,int,int);
		void saveGame(void);
		void saveLevelData(void);
		void savePlayers(void);
		void sendTileUpdated(int,int,int);
		void setBrightness(LightLayer const&,int,int,int,int);
		void setData(int,int,int,int,int);
		void setDataAndUpdate(int,int,int,int);
		void setDataNoUpdate(int,int,int,int);
		void setDayCycleActive(bool);
		void setInitialSpawn(void);
		void setNightMode(bool);
		void setSpawnPos(Pos);
		void setSpawnSettings(bool,bool);
		void setTile(int,int,int,int,int);
		void setTileAndData(int,int,int,int,int,int);
		void setTileAndDataNoUpdate(int,int,int,int,int);
		void setTileDirty(int,int,int);
		void setTileEntity(int,int,int,TileEntity *);
		void setTileNoUpdate(int,int,int,int);
		void setTilesDirty(int,int,int,int,int,int);
		void setTime(long);
		void setUpdateLights(bool);
		void setZombieAi(std::vector<Zombie *,std::allocator<Zombie *>> &);
		void swap(int,int,int,int,int,int);
		void takePicture(TripodCamera *,Entity *);
		void tick(Entity *);
		void tick(Entity *,bool);
		void tick(void);
		void tickEntities(void);
		void tickPendingTicks(bool);
		void tickTemporaryPointers(void);
		void tickTiles(void);
		void tileEntityChanged(int,int,int,TileEntity *);
		void tileEvent(int,int,int,int,int);
		void tileUpdated(int,int,int,int);
		void unregisterTemporaryPointer(_TickPtr *);
		void updateLight(LightLayer const&,int,int,int,int,int,int);
		void updateLight(LightLayer const&,int,int,int,int,int,int,bool);
		void updateLightIfOtherThan(LightLayer const&,int,int,int,int);
		void updateLights(void);
		void updateNeighborsAt(int,int,int,int);
		void updateSkyBrightness(void);
		void updateSkyDarken(void);
		void updateSleepingPlayerList(void);
		void validateSpawn(void);
		void ~Level();
		void ~Level();
};

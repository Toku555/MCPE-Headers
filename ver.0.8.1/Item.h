#pragma once
class Item{
	public:
		Item(int);
		void canBeDepleted(void);
		void canDestroySpecial(Tile const*);
		void getAnimationFrameFor(Mob *);
		void getAttackDamage(Entity *);
		void getDescription(ItemInstance const*);
		void getDescription(void);
		void getDescriptionId(ItemInstance const*);
		void getDescriptionId(void);
		void getDestroySpeed(ItemInstance *,Tile *);
		void getIcon(int,int,bool);
		void getLevelDataForAuxValue(int);
		void getMaxDamage(void);
		void getMaxStackSize(ItemInstance const*);
		void getMaxUseDuration(void);
		void getName(ItemInstance const*);
		void getPlayerPOVHitResult(Level *,Player *,bool);
		void getTextureItem(std::string const&);
		void getTextureUVCoordinateSet(std::string const&,int);
		void getUseAnimation(void);
		void handEquipped(void);
		void hurtEnemy(ItemInstance *,Mob *,Mob *);
		void initItems(std::shared_ptr<TextureAtlas>);
		void interactEnemy(ItemInstance *,Mob *,Player *);
		void isArmor(void);
		void isEmissive(int);
		void isFood(void);
		void isHandEquipped(void);
		void isLiquidClipItem(int);
		void isMirroredArt(void);
		void isSeed(void);
		void isStackedByData(void);
		void mineBlock(ItemInstance *,int,int,int,int,Mob *);
		void releaseUsing(ItemInstance *,Level *,Player *,int);
		void setCategory(int,int);
		void setDescriptionId(std::string const&);
		void setIcon(TextureUVCoordinateSet);
		void setIcon(std::string const&,int);
		void setMaxDamage(int);
		void setMaxStackSize(int);
		void setStackedByData(bool);
		void teardownItems(void);
		void use(ItemInstance *,Level *,Player *);
		void useOn(ItemInstance *,Level *,int,int,int,int);
		void useOn(ItemInstance *,Player *,Level *,int,int,int,int,float,float,float);
		void useTimeDepleted(ItemInstance *,Level *,Player *);
		void ~Item();
		void ~Item();
};

#pragma once
class UIResolvedDef{
	public:
		UIResolvedDef(UIResolvedDef const&);
		UIResolvedDef(UIResolvedDef const&);
		UIResolvedDef(std::vector<Json::Value *,std::allocator<Json::Value *>> *,Json::Value const&);
		UIResolvedDef(std::vector<Json::Value *,std::allocator<Json::Value *>> *,Json::Value const&);
		UIResolvedDef(std::vector<Json::Value *,std::allocator<Json::Value *>> *,NameRegistry *,std::string const&,std::string const&,Json::Value const&,Json::Value const&);
		UIResolvedDef(std::vector<Json::Value *,std::allocator<Json::Value *>> *,NameRegistry *,std::string const&,std::string const&,Json::Value const&,Json::Value const&);
		UIResolvedDef(std::vector<Json::Value *,std::allocator<Json::Value *>> *,NameRegistry *,std::string const&,std::string const&,Json::Value const&,Json::Value const&);
		void _popVariables(void);
		void _pushVariables(void);
		void _pushVariables(void);
		void _replaceVarsInRefString(std::string const&,std::vector<Json::Value *,std::allocator<Json::Value *>> *);
		void _replaceVarsInRefString(std::string const&,std::vector<Json::Value *,std::allocator<Json::Value *>> *);
		void _resolveVariable(Json::Value const&);
		void _resolveVariable(Json::Value const&);
		void create(UIDefRepository const&,std::vector<Json::Value *,std::allocator<Json::Value *>> *,NameRegistry &,std::string const&,Json::Value const&);
		void create(UIDefRepository const&,std::vector<Json::Value *,std::allocator<Json::Value *>> *,NameRegistry &,std::string const&,Json::Value const&);
		void create(UIDefRepository const&,std::vector<Json::Value *,std::allocator<Json::Value *>> *,NameRegistry &,std::string const&,std::string const&);
		void create(UIDefRepository const&,std::vector<Json::Value *,std::allocator<Json::Value *>> *,NameRegistry &,std::string const&,std::string const&);
		void getAsAnchorPoint(std::string const&,ui::AnchorPoint);
		void getAsAnchorPoint(std::string const&,ui::AnchorPoint);
		void getAsAnimationType(std::string const&,ui::AnimationType);
		void getAsAnimationType(std::string const&,ui::AnimationType);
		void getAsBindingCondition(std::string const&,BindingCondition);
		void getAsBindingCondition(std::string const&,BindingCondition);
		void getAsBindingType(std::string const&,BindingType);
		void getAsBindingType(std::string const&,BindingType);
		void getAsBool(std::string const&,bool);
		void getAsBool(std::string const&,bool);
		void getAsButtonId(std::string const&,short);
		void getAsButtonId(std::string const&,short);
		void getAsClipDirection(std::string const&,ui::ClipDirection);
		void getAsClipDirection(std::string const&,ui::ClipDirection);
		void getAsClipOffset(std::string const&,Vec2 const&);
		void getAsClipOffset(std::string const&,Vec2 const&);
		void getAsColor(std::string const&,Color const&);
		void getAsColor(std::string const&,Color const&);
		void getAsDraggable(std::string const&,ui::Draggable);
		void getAsDraggable(std::string const&,ui::Draggable);
		void getAsFloat(std::string const&,float);
		void getAsFloat(std::string const&,float);
		void getAsFontSize(std::string const&,ui::FontSize);
		void getAsFontSize(std::string const&,ui::FontSize);
		void getAsFontType(std::string const&,ui::FontType);
		void getAsFontType(std::string const&,ui::FontType);
		void getAsGridSize(std::string const&,glm::detail::tvec2<int> const&);
		void getAsGridSize(std::string const&,glm::detail::tvec2<int> const&);
		void getAsInt(std::string const&,int);
		void getAsInt(std::string const&,int);
		void getAsLayoutSize(std::string const&,ui::LayoutOffset const&);
		void getAsLayoutSize(std::string const&,ui::LayoutOffset const&);
		void getAsOrientation(std::string const&,ui::OrientationType);
		void getAsOrientation(std::string const&,ui::OrientationType);
		void getAsSize(std::string const&,glm::detail::tvec2<float> const&);
		void getAsSliceSize(std::string const&,ui::SliceSize const&);
		void getAsSliceSize(std::string const&,ui::SliceSize const&);
		void getAsSliderManagerBehavior(std::string const&,SliderManagerBehavior);
		void getAsSliderManagerBehavior(std::string const&,SliderManagerBehavior);
		void getAsString(std::string const&,std::string const&);
		void getAsString(std::string const&,std::string const&);
		void getAsStringVector(std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void getAsStringVector(std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void getAsTextureSource(std::string const&,ui::TextureSource);
		void getAsTextureSource(std::string const&,ui::TextureSource);
		void getAsToggleManagerBehavior(std::string const&,ToggleManagerBehavior);
		void getAsToggleManagerBehavior(std::string const&,ToggleManagerBehavior);
		void getAsUV(std::string const&,glm::detail::tvec2<float> const&);
		void getAsUV(std::string const&,glm::detail::tvec2<float> const&);
		void getAsUVSize(std::string const&,glm::detail::tvec2<float> const&);
		void getAsUVSize(std::string const&,glm::detail::tvec2<float> const&);
		void getDefType(void);
		void getDefType(void);
		void getMemberNames(void);
		void getMemberNames(void);
		void getName(void);
		void getName(void);
		void getNamespace(void);
		void getNamespace(void);
		void getValue(std::string const&);
		void getValue(std::string const&);
		void hasValue(std::string const&);
		void hasValue(std::string const&);
		void isIgnored(void);
		void isIgnored(void);
		void isNamed(void);
		void isNamed(void);
		void isValid(void);
		void isValid(void);
		void parseName(std::string const&,std::string &,std::string &,std::string &,std::vector<Json::Value *,std::allocator<Json::Value *>> *);
		void parseName(std::string const&,std::string &,std::string &,std::string &,std::vector<Json::Value *,std::allocator<Json::Value *>> *);
		void ~UIResolvedDef();
		void ~UIResolvedDef();
};

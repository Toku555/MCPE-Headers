#pragma once
namespace j{
	class xbox{
		public:
		void schema_content(void);
		void schema_name(void);
		void ~http_call_data();
		void record_service_result(void);
		void ~http_call_response();
		void ~leaderboard_global_query();
		void ~leaderboard_social_query();
		void check_next_timer(void);
		void handle_session_joined(void);
		void ~matchmaking_client_manager();
		void ~multiplayer_client_manager();
		void ~multiplayer_client_pending_reader();
		void ~multiplayer_client_pending_request();
		void ~multiplayer_game_client();
		void ~multiplayer_game_session();
		void is_pending_lobby_local_user_changes(void);
		void ~multiplayer_lobby_client();
		void ~multiplayer_lobby_session();
		void remove_stale_local_users_from_map(void);
		void ~multiplayer_local_user_manager();
		void ~multiplayer_member();
		void ~multiplayer_session_writer();
		void disable_multiplayer_subscriptions(void);
		void remove_multiplayer_session_changed_handler(int);
		void remove_multiplayer_subscription_lost_handler(int);
		void subscriptions_enabled(void);
		void ~multiplayer_service_impl();
		void ~multiplayer_session();
		void set_max_members_in_session(uint);
		void set_visibility(xbox::services::multiplayer::multiplayer_session_visibility);
		void _Subscribed_change_types(void);
		void ~multiplayer_session_member();
		void set_results(std::unordered_map<std::string,xbox::services::tournaments::tournament_team_result,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,xbox::services::tournaments::tournament_team_result>>> const&);
		void ~multiplayer_session_member_request();
		void ~multiplayer_session_properties();
		void set_closed(bool);
		void set_initialization_succeeded(bool);
		void set_matchmaking_match_resubmit(bool);
		void ~multiplayer_session_request();
		void ~notification_service();
		void _Add_title_record(uint,xbox::services::presence::title_presence_state);
		void remove_device_presence_changed_handler(int);
		void remove_title_presence_changed_handler(int);
		void ~presence_service_impl();
		void set_active_in_title(void);
		void initialize(std::string const&);
		void remove_social_relationship_changed_handler(int);
		void ~social_service_impl();
		void cidr_nsal_endpoint>(std::vector<xbox::services::system::cidr_nsal_endpoint,std::allocator<xbox::services::system::cidr_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void fqdn_nsal_endpoint>(std::vector<xbox::services::system::fqdn_nsal_endpoint,std::allocator<xbox::services::system::fqdn_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void ip_nsal_endpoint>(std::vector<xbox::services::system::ip_nsal_endpoint,std::allocator<xbox::services::system::ip_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void wildcard_nsal_endpoint>(std::vector<xbox::services::system::wildcard_nsal_endpoint,std::allocator<xbox::services::system::wildcard_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void ~auth_config();
		void ~auth_manager();
		void ~ecdsa();
		void is_match(xbox::services::system::nsal_protocol,std::string const&,int);
		void ip_address(void);
		void xerr(void);
		void set_rps_ticket(std::string const&);
		void ~token_info();
		void ~token_state();
		void is_signed_in(void);
		void remove_sign_out_completed_handler(int);
		void ~user_impl();
		void complete_sign_in_with_ui(xbox::services::system::auth_flow_result const&);
		void ~user_impl_android();
		void xbox_live_mutex(void);
		void _Set_caller_context(std::string const&);
		void xbox_user_id(void);
		void remove_statistic_changed_handler(int);
		void ~user_statistics_service_impl();
		void set_locales(std::string const&);
		void log_output(std::string const&);
		void set_state_helper(xbox::services::web_socket_connection_state);
		void ~web_socket_connection();
		void title_id(void);
		void achievement_service(void);
		void contextual_search_service(void);
		void events_service(void);
		void game_server_platform_service(void);
		void leaderboard_service(void);
		void matchmaking_service(void);
		void multiplayer_service(void);
		void presence_service(void);
		void privacy_service(void);
		void profile_service(void);
		void reputation_service(void);
		void set_caller_context(std::string const&);
		void social_service(void);
		void string_service(void);
		void title_storage_service(void);
		void tournament_service(void);
		void user_statistics_service(void);
		void xbox_live_user_id(void);
		void ~xbox_live_context_impl();
	}
};

#pragma once
class Horse{
	public:
		Horse(BlockSource &);
		Horse(BlockSource &);
		Horse(BlockSource &);
		void _getAmbientSound(void);
		void _getAmbientSound(void);
		void _getDeathSound(void);
		void _getDeathSound(void);
		void _getHurtSound(void);
		void _getHurtSound(void);
		void _getSoundVolume(void);
		void _getSoundVolume(void);
		void _playStepSound(BlockPos const&,int);
		void _playStepSound(BlockPos const&,int);
		void _postInit(void);
		void _postInit(void);
		void addAdditionalSaveData(CompoundTag &);
		void addAdditionalSaveData(CompoundTag &);
		void aiStep(void);
		void aiStep(void);
		void canAddRider(Entity &);
		void canAddRider(Entity &);
		void canBeLeashed(void);
		void canBeLeashed(void);
		void canMate(Animal const&);
		void canMate(Animal const&);
		void canSpawn(bool);
		void canSpawn(bool);
		void canWearArmor(void);
		void canWearArmor(void);
		void canWearBags(void);
		void canWearBags(void);
		void causeFallDamage(float);
		void causeFallDamage(float);
		void checkSpawningBiome(void);
		void checkSpawningBiome(void);
		void containerChanged(int);
		void containerChanged(int);
		void createBreedOffspring(Animal &);
		void createBreedOffspring(Animal &);
		void createInventory(void);
		void createInventory(void);
		void die(EntityDamageSource const&);
		void die(EntityDamageSource const&);
		void doPlayerRide(Player *);
		void dropBags(void);
		void dropBags(void);
		void dropEquipment(void);
		void dropEquipment(void);
		void dropMyStuff(void);
		void dropMyStuff(void);
		void eatingHorse(ItemInstance const&);
		void eatingHorse(ItemInstance const&);
		void finalizeMobSpawn(void);
		void finalizeMobSpawn(void);
		void generateRandomJumpStrength(void);
		void generateRandomMaxHealth(void);
		void generateRandomSpeed(void);
		void getAmbientSoundInterval(void);
		void getAmbientSoundInterval(void);
		void getArmorValue(void);
		void getArmorValue(void);
		void getChestSlots(void);
		void getChestSlots(void);
		void getClosestMommy(Entity *,float);
		void getClosestMommy(Entity *,float);
		void getControllingPlayer(void);
		void getControllingPlayer(void);
		void getCustomJump(void);
		void getCustomJump(void);
		void getDeathLoot(void);
		void getDeathLoot(void);
		void getEatAnim(float);
		void getEatAnim(float);
		void getEntityTypeId(void);
		void getEntityTypeId(void);
		void getEquipSlots(void);
		void getEquipSlots(void);
		void getFoalScale(void);
		void getFoalScale(void);
		void getHasReproduced(void);
		void getHasReproduced(void);
		void getHorseFlag(HorseFlags);
		void getInteractText(Player &);
		void getInteractText(Player &);
		void getInventorySize(void);
		void getInventorySize(void);
		void getIsJumping(void);
		void getIsJumping(void);
		void getMadSound(void);
		void getMadSound(void);
		void getMaxTemper(void);
		void getMaxTemper(void);
		void getMouthAnim(float);
		void getMouthAnim(float);
		void getShadowRadius(void);
		void getShadowRadius(void);
		void getStandAnim(float);
		void getStandAnim(float);
		void getTemper(void);
		void getTemper(void);
		void getType(void);
		void getType(void);
		void getVariant(void);
		void getVariant(void);
		void hasSaddle(void);
		void hasSaddle(void);
		void hurt(EntityDamageSource const&,int);
		void hurt(EntityDamageSource const&,int);
		void interactWithPlayer(Player &);
		void interactWithPlayer(Player &);
		void isAdult(void);
		void isAdult(void);
		void isAmuletHorse(void);
		void isAmuletHorse(void);
		void isBred(void);
		void isBred(void);
		void isChestedHorse(void);
		void isChestedHorse(void);
		void isEating(void);
		void isEating(void);
		void isFood(ItemInstance const&);
		void isFood(ItemInstance const&);
		void isHorseArmor(Item *);
		void isImmobile(void);
		void isImmobile(void);
		void isPushable(void);
		void isPushable(void);
		void isReadyForParenting(void);
		void isRidable(void);
		void isRidable(void);
		void isStanding(void);
		void isStanding(void);
		void isSterile(void);
		void isSterile(void);
		void isUndead(void);
		void isUndead(void);
		void makeMad(void);
		void makeMad(void);
		void modifyTemper(int);
		void modifyTemper(int);
		void moveTail(void);
		void nameYOffset(void);
		void nameYOffset(void);
		void normalTick(void);
		void normalTick(void);
		void onLadder(bool);
		void onLadder(bool);
		void onPlayerJump(int);
		void onPlayerJump(int);
		void openContainerComponent(Player &);
		void openContainerComponent(Player &);
		void openMouth(void);
		void positionRider(Entity &);
		void positionRider(Entity &);
		void readAdditionalSaveData(CompoundTag const&);
		void readAdditionalSaveData(CompoundTag const&);
		void registerAttributes(void);
		void registerAttributes(void);
		void rideableEntity(void);
		void setBred(bool);
		void setBred(bool);
		void setChestedHorse(bool);
		void setChestedHorse(bool);
		void setEating(bool);
		void setEating(bool);
		void setHorseFlag(HorseFlags,bool);
		void setIsJumping(bool);
		void setIsJumping(bool);
		void setReproduced(bool);
		void setReproduced(bool);
		void setSaddled(bool);
		void setSaddled(bool);
		void setSkeletonTrap(bool);
		void setSkeletonTrap(bool);
		void setStanding(bool);
		void setStanding(bool);
		void setTemper(int);
		void setTemper(int);
		void setType(int);
		void setType(int);
		void setVariant(int);
		void setVariant(int);
		void stand(void);
		void tameWithName(Player *);
		void tameWithName(Player *);
		void travel(float,float);
		void travel(float,float);
		void updateEquipment(void);
		void updateEquipment(void);
		void useNewAi(void);
		void useNewAi(void);
		void ~Horse();
		void ~Horse();
		void ~Horse();
		void ~Horse();
};

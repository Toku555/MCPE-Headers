#pragma once
class Sheep{
	public:
		Sheep(BlockSource &);
		Sheep(BlockSource &);
		Sheep(BlockSource &);
		void _getAmbientSound(void);
		void _getAmbientSound(void);
		void _getDeathSound(void);
		void _getDeathSound(void);
		void _getHurtSound(void);
		void _getHurtSound(void);
		void _getOffspringColor(Animal &,Animal &);
		void _playStepSound(BlockPos const&,int);
		void _playStepSound(BlockPos const&,int);
		void addAdditionalSaveData(CompoundTag &);
		void addAdditionalSaveData(CompoundTag &);
		void aiStep(void);
		void aiStep(void);
		void ate(void);
		void ate(void);
		void canInteractWith(Player &);
		void canInteractWith(Player &);
		void createBreedOffspring(Animal &);
		void createBreedOffspring(Animal &);
		void dropDeathLoot(int);
		void dropDeathLoot(int);
		void finalizeMobSpawn(void);
		void finalizeMobSpawn(void);
		void getColor(void);
		void getColor(void);
		void getDeathLoot(void);
		void getDeathLoot(void);
		void getEntityTypeId(void);
		void getEntityTypeId(void);
		void getHeadEatAngleScale(float);
		void getHeadEatAngleScale(float);
		void getHeadEatPositionScale(float);
		void getHeadEatPositionScale(float);
		void getInteractText(Player &);
		void getInteractText(Player &);
		void getRideHeight(void);
		void getRideHeight(void);
		void getSheepColor(Random *);
		void getSheepColor(Random *);
		void handleEntityEvent(EntityEvent,int);
		void handleEntityEvent(EntityEvent,int);
		void interactWithPlayer(Player &);
		void interactWithPlayer(Player &);
		void isFood(ItemInstance const&);
		void isFood(ItemInstance const&);
		void isSheared(void);
		void isSheared(void);
		void jumpFromGround(void);
		void jumpFromGround(void);
		void newServerAiStep(void);
		void newServerAiStep(void);
		void postProcessOffspring(Animal &,Animal &);
		void postProcessOffspring(Animal &,Animal &);
		void readAdditionalSaveData(CompoundTag const&);
		void readAdditionalSaveData(CompoundTag const&);
		void registerAttributes(void);
		void registerAttributes(void);
		void setColor(PaletteColor);
		void setColor(PaletteColor);
		void setSheared(bool);
		void setSheared(bool);
		void shouldHoldGround(void);
		void shouldHoldGround(void);
		void useNewAi(void);
		void useNewAi(void);
		void ~Sheep();
		void ~Sheep();
};

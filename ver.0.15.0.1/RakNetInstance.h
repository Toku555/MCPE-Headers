#pragma once
class RakNetInstance{
	public:
		RakNetInstance(RakNetInstance::ConnectionCallbacks &);
		RakNetInstance(RakNetInstance::ConnectionCallbacks &);
		void RakNetNetworkPeer(RakNet::RakPeerInterface &,RakNet::RakNetGUID const&);
		void RakNetNetworkPeer(RakNet::RakPeerInterface &,RakNet::RakNetGUID const&);
		void getNetworkStatus(void);
		void receivePacket(std::string &);
		void receivePacket(std::string &);
		void sendPacket(char const*,int,NetworkPeer::Reliability,int);
		void update(void);
		void ~RakNetNetworkPeer();
		void ~RakNetNetworkPeer();
		void ~RakNetNetworkPeer();
		void ~RakNetNetworkPeer();
		void _changeNatState(RakNetInstance::NATState,int,std::string const&);
		void _changeNatState(RakNetInstance::NATState,int,std::string const&);
		void _createPeer(RakNet::RakNetGUID const&);
		void _createPeer(RakNet::RakNetGUID const&);
		void _getPeer(RakNet::RakNetGUID const&);
		void _getPeer(RakNet::RakNetGUID const&);
		void _removePeer(RakNet::RakNetGUID const&);
		void _removePeer(RakNet::RakNetGUID const&);
		void _stateToString(RakNetInstance::NATState);
		void addConnectionStateListener(Connector::ConnectionStateListener *);
		void addConnectionStateListener(Connector::ConnectionStateListener *);
		void connect(Social::GameConnectionInfo,Social::GameConnectionInfo);
		void connect(char const*,int);
		void disconnect(void);
		void disconnect(void);
		void getLocalIps(void);
		void getLocalIps(void);
		void getNatPunchInfo(void);
		void getNatPunchInfo(void);
		void getPeer(void);
		void getPeer(void);
		void getPeer(void);
		void getStatistics(RakNet::RakNetStatistics *);
		void host(std::string const&,int,int);
		void isMyLocalGuid(RakNet::RakNetGUID const&);
		void isProbablyBroken(void);
		void natPongReceived(RakNet::SystemAddress const&);
		void onAppResumed(void);
		void onAppSuspended(void);
		void onAppSuspended(void);
		void removeConnectionStateListener(Connector::ConnectionStateListener *);
		void removeConnectionStateListener(Connector::ConnectionStateListener *);
		void requiresRestart(void);
		void requiresRestart(void);
		void resetIsBroken(void);
		void runEvents(void);
		void runEvents(void);
		void setupNatPunch(void);
		void setupNatPunch(void);
		void startNatPunchingClient(Social::GameConnectionInfo);
		void tick(void);
		void tick(void);
		void ~RakNetInstance();
		void ~RakNetInstance();
		void ~RakNetInstance();
		void ~RakNetInstance();
};

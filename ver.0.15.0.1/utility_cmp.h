#pragma once
namespace utility{
	class cmp{
		public:
		void icmp(std::string,std::string);
		void icmp(std::string,std::string);
		void from_base64(std::string const&);
		void from_base64(std::string const&);
		void latin1_to_utf16(std::string const&);
		void latin1_to_utf16(std::string const&);
		void latin1_to_utf8(std::string const&);
		void latin1_to_utf8(std::string const&);
		void print_string<char [13]>(char [13] const&,std::locale const&);
		void print_string<char [14]>(char [14] const&,std::locale const&);
		void print_string<char [17]>(char [17] const&,std::locale const&);
		void print_string<char [6]>(char [6] const&,std::locale const&);
		void print_string<char [7]>(char [7] const&,std::locale const&);
		void print_string<char [8]>(char [8] const&,std::locale const&);
		void print_string<char [9]>(char [9] const&,std::locale const&);
		void print_string<int>(int const&,std::locale const&);
		void string>(std::string const&,std::locale const&);
		void print_string<uint>(uint const&,std::locale const&);
		void print_string<ulong long>(ulong long const&,std::locale const&);
		void scan_string<int>(std::string const&,std::locale const&);
		void to_base64(std::vector<uchar,std::allocator<uchar>> const&);
		void to_base64(std::vector<uchar,std::allocator<uchar>> const&);
		void to_base64(ulong long);
		void to_string_t(std::string &&);
		void to_string_t(std::string &&);
		void to_string_t(std::string const&);
		void to_string_t(std::string const&);
		void to_utf16string(std::string const&);
		void to_utf8string(std::string);
		void to_utf8string(std::string);
		void usascii_to_utf16(std::string const&);
		void utf8_to_utf16(std::string const&);
		void utf8_to_utf16(std::string const&);
		void from_string(std::string const&,utility::datetime::date_format);
		void from_string(std::string const&,utility::datetime::date_format);
		void timeval_to_datetime(timeval const&);
		void to_string(utility::datetime::date_format);
		void to_string(utility::datetime::date_format);
		void utc_now(void);
		void utc_now(void);
		void linux_category(void);
		void value>>>,bool &>(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>> &&,bool &);
		void value>>>,bool &>(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>> &&,bool &);
		void _String,char const*&>(char const*&);
		void _String,char const*&>(char const*&);
		void string>(std::string &&);
		void string>(std::string &&);
		void platform_category(void);
		void platform_category(void);
		void scoped_c_thread_locale(void);
		void scoped_c_thread_locale(void);
		void ~scoped_c_thread_locale();
		void ~scoped_c_thread_locale();
		void str_icmp(std::string const&,std::string const&);
		void str_icmp(std::string const&,std::string const&);
		void extract_fractional_second(std::string const&,std::string &,ulong long &);
		void extract_fractional_second(std::string const&,std::string &,ulong long &);
		void generate(void);
		void generate(void);
		void seconds_to_xml_duration(std::chrono::duration<long long,std::ratio<1ll,1ll>>);
		void xml_duration_to_seconds(std::string const&);
		void string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void string>>(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
	}
};

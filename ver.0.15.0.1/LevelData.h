#pragma once
class LevelData{
	public:
		LevelData(CompoundTag const&);
		LevelData(LevelData&&);
		LevelData(LevelData&&);
		LevelData(LevelSettings const&,std::string const&,GeneratorType,BlockPos const*,bool,bool,float,float);
		LevelData(LevelSettings const&,std::string const&,GeneratorType,BlockPos const*,bool,bool,float,float);
		LevelData(void);
		LevelData(void);
		void clearLoadedPlayerTag(void);
		void clearLoadedPlayerTag(void);
		void createTag(void);
		void createTag(void);
		void getCurrentTick(void);
		void getCurrentTick(void);
		void getForceGameType(void);
		void getForceGameType(void);
		void getGameType(void);
		void getGameType(void);
		void getGenerator(void);
		void getGenerator(void);
		void getGlobalPermissions(void);
		void getGlobalPermissions(void);
		void getLastPlayed(void);
		void getLastPlayed(void);
		void getLevelName(void);
		void getLevelName(void);
		void getLightningLevel(void);
		void getLightningLevel(void);
		void getLightningTime(void);
		void getLightningTime(void);
		void getLoadedPlayerTag(void);
		void getLoadedPlayerTag(void);
		void getNetworkVersion(void);
		void getNetworkVersion(void);
		void getRainLevel(void);
		void getRainLevel(void);
		void getRainTime(void);
		void getRainTime(void);
		void getResourcePackNames(void);
		void getSeed(void);
		void getSeed(void);
		void getSpawn(void);
		void getSpawn(void);
		void getSpawnMobs(void);
		void getSpawnMobs(void);
		void getStopTime(void);
		void getStopTime(void);
		void getStorageVersion(void);
		void getStorageVersion(void);
		void getTagData(CompoundTag const&);
		void getTagData(CompoundTag const&);
		void getTime(void);
		void getTime(void);
		void getWorldCenter(void);
		void getWorldCenter(void);
		void getWorldStartCount(void);
		void getWorldStartCount(void);
		void hasBeenLoadedInCreative(void);
		void hasBeenLoadedInCreative(void);
		void incrementTick(void);
		void incrementTick(void);
		void isEduLevel(void);
		void isEduLevel(void);
		void isLightning(void);
		void isRaining(void);
		void isRaining(void);
		void operator=(LevelData&&);
		void operator=(LevelData&&);
		void recordStartUp(void);
		void recordStartUp(void);
		void setCurrentTick(Tick &);
		void setCurrentTick(Tick &);
		void setForceGameType(bool);
		void setForceGameType(bool);
		void setGameType(GameType);
		void setGameType(GameType);
		void setGenerator(GeneratorType);
		void setGenerator(GeneratorType);
		void setGlobalPermissions(GlobalPermissionsLevel);
		void setGlobalPermissions(GlobalPermissionsLevel);
		void setHasBeenLoadedInCreative(void);
		void setHasBeenLoadedInCreative(void);
		void setIsEduLevel(bool);
		void setIsEduLevel(bool);
		void setLevelName(std::string const&);
		void setLevelName(std::string const&);
		void setLightningLevel(float);
		void setLightningLevel(float);
		void setLightningTime(int);
		void setLightningTime(int);
		void setNetworkVersion(int);
		void setRainLevel(float);
		void setRainLevel(float);
		void setRainTime(int);
		void setRainTime(int);
		void setResourcePackNames(std::vector<std::string,std::allocator<std::string>> const&);
		void setResourcePackNames(std::vector<std::string,std::allocator<std::string>> const&);
		void setSeed(uint);
		void setSpawn(BlockPos const&);
		void setSpawn(BlockPos const&);
		void setSpawnMobs(bool);
		void setSpawnMobs(bool);
		void setStopTime(int);
		void setStopTime(int);
		void setStorageVersion(StorageVersion);
		void setStorageVersion(StorageVersion);
		void setTagData(CompoundTag &);
		void setTagData(CompoundTag &);
		void setTime(int);
		void setTime(int);
		void v1_read(RakNet::BitStream &,StorageVersion);
		void v1_read(RakNet::BitStream &,StorageVersion);
};

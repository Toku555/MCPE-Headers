#pragma once
namespace Crypto{
	class Asymmetric{
		public:
		void Asymmetric(Crypto::Asymmetric::System);
		void Asymmetric(Crypto::Asymmetric::System);
		void canComputeSecret(void);
		void canComputeSecret(void);
		void canEncrypt(void);
		void canSign(void);
		void computeSharedSecret(std::string const&,std::string const&);
		void computeSharedSecret(std::string const&,std::string const&);
		void decryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void decryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void encryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void encryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void generateKeyPair(std::string &,std::string &);
		void generateKeyPair(std::string &,std::string &);
		void getSystemIdentifier(void);
		void signData(std::string const&,std::string const&,Crypto::Hash::HashType);
		void signData(std::string const&,std::string const&,Crypto::Hash::HashType);
		void verifyData(std::string const&,std::string const&,std::string const&,Crypto::Hash::HashType);
		void verifyData(std::string const&,std::string const&,std::string const&,Crypto::Hash::HashType);
		void ~Asymmetric();
		void ~Asymmetric();
		void ~Asymmetric();
		void ~Asymmetric();
		void OpenSSLInterface(Crypto::Asymmetric::System);
		void OpenSSLInterface(Crypto::Asymmetric::System);
		void computeSharedSecret(std::string const&,std::string const&);
		void computeSharedSecret(std::string const&,std::string const&);
		void decryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void decryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void encryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void encryptData(std::string const&,std::string const&,Crypto::Asymmetric::Padding);
		void generateKeyPair(std::string &,std::string &);
		void generateKeyPair(std::string &,std::string &);
		void signData(std::string const&,std::string const&,Crypto::Hash::HashType);
		void signData(std::string const&,std::string const&,Crypto::Hash::HashType);
		void verifyData(std::string const&,std::string const&,std::string const&,Crypto::Hash::HashType);
		void verifyData(std::string const&,std::string const&,std::string const&,Crypto::Hash::HashType);
		void ~OpenSSLInterface();
		void ~OpenSSLInterface();
		void ~OpenSSLInterface();
		void ~OpenSSLInterface();
		void fromSystemString(std::string const&,Crypto::Asymmetric::System &);
		void HMAC(Crypto::Hash::HashType,std::string const&,int);
		void HMAC(Crypto::Hash::HashType,std::string const&,int);
		void final(void);
		void resultSize(void);
		void resultSize(void);
		void sign(std::string const&,ulong long);
		void sign(std::string const&,ulong long);
		void ~HMAC();
		void ~HMAC();
		void Hash(Crypto::Hash::HashType);
		void Hash(Crypto::Hash::HashType);
		void Hash(Crypto::Hash::HashType);
		void final(uchar *);
		void final(uchar *);
		void final(void);
		void getUUID(void);
		void getUUID(void);
		void reset(void);
		void reset(void);
		void resultSize(void);
		void resultSize(void);
		void update(void const*,uint);
		void update(void const*,uint);
		void ~Hash();
		void ~Hash();
		void ~Hash();
		void ~Hash();
		void ~Hash();
		void ~IHash();
		void ~IHash();
		void OpenSSLHashInterface(Crypto::Hash::HashType);
		void OpenSSLHashInterface(Crypto::Hash::HashType);
		void final(uchar *);
		void final(uchar *);
		void reset(void);
		void reset(void);
		void resultSize(void);
		void resultSize(void);
		void update(void const*,uint);
		void update(void const*,uint);
		void ~OpenSSLHashInterface();
		void ~OpenSSLHashInterface();
		void ~OpenSSLHashInterface();
		void ~OpenSSLHashInterface();
		void generateUUID(void const*,uint,Crypto::Hash::HashType);
		void hash(Crypto::Hash::HashType,std::string const&);
		void hash(Crypto::Hash::HashType,std::string const&);
		void hash(Crypto::Hash::HashType,void const*,uint);
		void body(void const*,uint);
		void body(void const*,uint);
		void final(uchar *);
		void final(uchar *);
		void init(void);
		void init(void);
		void reset(void);
		void reset(void);
		void resultSize(void);
		void resultSize(void);
		void update(void const*,uint);
		void update(void const*,uint);
		void ~md5();
		void ~md5();
		void Random(void);
		void Random(void);
		void fillData(char *,uint);
		void fillType(void *,uint);
		void fillType(void *,uint);
		void getBytes(uint);
		void getBytes(uint);
		void ~Random();
		void ~Random();
		void generateUUID(void);
		void OpenSSLSymmetricInterface(Crypto::Symmetric::System,Crypto::Symmetric::OperationMode);
		void OpenSSLSymmetricInterface(Crypto::Symmetric::System,Crypto::Symmetric::OperationMode);
		void decrypt(std::string const&);
		void decrypt(std::string const&);
		void encrypt(std::string const&);
		void encrypt(std::string const&);
		void getBlockSize(void);
		void getBlockSize(void);
		void getKeySize(void);
		void getKeySize(void);
		void init(std::string const&,std::string const&);
		void init(std::string const&,std::string const&);
		void ~OpenSSLSymmetricInterface();
		void ~OpenSSLSymmetricInterface();
		void ~OpenSSLSymmetricInterface();
		void ~OpenSSLSymmetricInterface();
		void Symmetric(Crypto::Symmetric::System,Crypto::Symmetric::OperationMode);
		void Symmetric(Crypto::Symmetric::System,Crypto::Symmetric::OperationMode);
		void decrypt(std::string const&);
		void decrypt(std::string const&);
		void encrypt(std::string const&);
		void encrypt(std::string const&);
		void getBlockSize(void);
		void getBlockSize(void);
		void getKeySize(void);
		void getKeySize(void);
		void init(std::string const&,std::string const&);
		void init(std::string const&,std::string const&);
		void ~Symmetric();
		void ~Symmetric();
		void ~Symmetric();
		void ~Symmetric();
		void destroy(void);
		void init(void);
		void init(void);
	}
};

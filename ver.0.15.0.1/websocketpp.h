#pragma once
class websocketpp{
	public:
		void base64_encode(uchar const*,uint);
		void base64_encode(uchar const*,uint);
		void connect(std::shared_ptr<websocketpp::connection<websocketpp::config::asio_client>>);
		void connect(std::shared_ptr<websocketpp::connection<websocketpp::config::asio_client>>);
		void get_connection(std::shared_ptr<websocketpp::uri>,std::error_code &);
		void get_connection(std::shared_ptr<websocketpp::uri>,std::error_code &);
		void get_connection(std::string const&,std::error_code &);
		void get_connection(std::string const&,std::error_code &);
		void handle_connect(std::shared_ptr<websocketpp::connection<websocketpp::config::asio_client>>,std::error_code const&);
		void connect(std::shared_ptr<websocketpp::connection<websocketpp::config::asio_tls_client>>);
		void connect(std::shared_ptr<websocketpp::connection<websocketpp::config::asio_tls_client>>);
		void get_connection(std::shared_ptr<websocketpp::uri>,std::error_code &);
		void get_connection(std::shared_ptr<websocketpp::uri>,std::error_code &);
		void get_connection(std::string const&,std::error_code &);
		void get_connection(std::string const&,std::error_code &);
		void handle_connect(std::shared_ptr<websocketpp::connection<websocketpp::config::asio_tls_client>>,std::error_code const&);
		void extract_code(std::string const&,std::error_code &);
		void extract_code(std::string const&,std::error_code &);
		void extract_reason(std::string const&,std::error_code &);
		void extract_reason(std::string const&,std::error_code &);
		void add_subprotocol(std::string const&,std::error_code &);
		void add_subprotocol(std::string const&,std::error_code &);
		void append_header(std::string const&,std::string const&);
		void append_header(std::string const&,std::string const&);
		void close(ushort,std::string const&,std::error_code &);
		void close(ushort,std::string const&,std::error_code &);
		void connection(bool,std::string const&,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void connection(bool,std::string const&,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void get_processor(int);
		void get_processor(int);
		void get_shared(void);
		void get_shared(void);
		void handle_close_handshake_timeout(std::error_code const&);
		void handle_open_handshake_timeout(std::error_code const&);
		void handle_read_frame(std::error_code const&,uint);
		void handle_read_frame(std::error_code const&,uint);
		void handle_read_http_response(std::error_code const&,uint);
		void handle_send_http_response(std::error_code const&);
		void handle_terminate(websocketpp::connection<websocketpp::config::asio_client>::terminate_status,std::error_code const&);
		void handle_transport_init(std::error_code const&);
		void initialize_processor(void);
		void initialize_processor(void);
		void log_close_result(void);
		void log_close_result(void);
		void error_code>(uint,char const*,std::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void log_fail_result(void);
		void log_fail_result(void);
		void log_http_result(void);
		void log_http_result(void);
		void log_open_result(void);
		void log_open_result(void);
		void pong(std::string const&,std::error_code &);
		void pong(std::string const&,std::error_code &);
		void process_control_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_control_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_handshake_request(void);
		void process_handshake_request(void);
		void read_frame(void);
		void read_frame(void);
		void read_handshake(uint);
		void read_handshake(uint);
		void send(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void send(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void send(void const*,uint,websocketpp::frame::opcode::value);
		void send(void const*,uint,websocketpp::frame::opcode::value);
		void send_close_frame(ushort,std::string const&,bool,bool);
		void send_close_frame(ushort,std::string const&,bool,bool);
		void send_http_request(void);
		void send_http_request(void);
		void send_http_response(std::error_code const&);
		void send_http_response(std::error_code const&);
		void send_http_response_error(std::error_code const&);
		void send_http_response_error(std::error_code const&);
		void set_handle(std::weak_ptr<void>);
		void set_handle(std::weak_ptr<void>);
		void set_status(websocketpp::http::status_code::value);
		void set_status(websocketpp::http::status_code::value);
		void start(void);
		void start(void);
		void terminate(std::error_code const&);
		void terminate(std::error_code const&);
		void write_frame(void);
		void write_pop(void);
		void write_pop(void);
		void write_push(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void write_push(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void ~connection();
		void ~connection();
		void add_subprotocol(std::string const&,std::error_code &);
		void add_subprotocol(std::string const&,std::error_code &);
		void append_header(std::string const&,std::string const&);
		void append_header(std::string const&,std::string const&);
		void close(ushort,std::string const&,std::error_code &);
		void close(ushort,std::string const&,std::error_code &);
		void connection(bool,std::string const&,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void connection(bool,std::string const&,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void get_processor(int);
		void get_processor(int);
		void get_shared(void);
		void get_shared(void);
		void handle_close_handshake_timeout(std::error_code const&);
		void handle_open_handshake_timeout(std::error_code const&);
		void handle_read_frame(std::error_code const&,uint);
		void handle_read_frame(std::error_code const&,uint);
		void handle_read_http_response(std::error_code const&,uint);
		void handle_send_http_response(std::error_code const&);
		void handle_terminate(websocketpp::connection<websocketpp::config::asio_tls_client>::terminate_status,std::error_code const&);
		void handle_transport_init(std::error_code const&);
		void initialize_processor(void);
		void initialize_processor(void);
		void log_close_result(void);
		void log_close_result(void);
		void error_code>(uint,char const*,std::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void log_fail_result(void);
		void log_fail_result(void);
		void log_http_result(void);
		void log_http_result(void);
		void log_open_result(void);
		void log_open_result(void);
		void pong(std::string const&,std::error_code &);
		void pong(std::string const&,std::error_code &);
		void process_control_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_control_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_handshake_request(void);
		void process_handshake_request(void);
		void read_frame(void);
		void read_frame(void);
		void read_handshake(uint);
		void read_handshake(uint);
		void send(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void send(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void send(void const*,uint,websocketpp::frame::opcode::value);
		void send(void const*,uint,websocketpp::frame::opcode::value);
		void send_close_frame(ushort,std::string const&,bool,bool);
		void send_close_frame(ushort,std::string const&,bool,bool);
		void send_http_request(void);
		void send_http_request(void);
		void send_http_response(std::error_code const&);
		void send_http_response(std::error_code const&);
		void send_http_response_error(std::error_code const&);
		void send_http_response_error(std::error_code const&);
		void set_handle(std::weak_ptr<void>);
		void set_handle(std::weak_ptr<void>);
		void set_status(websocketpp::http::status_code::value);
		void set_status(websocketpp::http::status_code::value);
		void start(void);
		void start(void);
		void terminate(std::error_code const&);
		void terminate(std::error_code const&);
		void write_frame(void);
		void write_pop(void);
		void write_pop(void);
		void write_push(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void write_push(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void ~connection();
		void ~connection();
		void close(std::weak_ptr<void>,ushort,std::string const&,std::error_code &);
		void close(std::weak_ptr<void>,ushort,std::string const&,std::error_code &);
		void create_connection(void);
		void create_connection(void);
		void endpoint(bool);
		void endpoint(bool);
		void get_con_from_hdl(std::weak_ptr<void>);
		void get_con_from_hdl(std::weak_ptr<void>,std::error_code &);
		void pong(std::weak_ptr<void>,std::string const&,std::error_code &);
		void pong(std::weak_ptr<void>,std::string const&,std::error_code &);
		void send(std::weak_ptr<void>,void const*,uint,websocketpp::frame::opcode::value,std::error_code &);
		void send(std::weak_ptr<void>,void const*,uint,websocketpp::frame::opcode::value,std::error_code &);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void ~endpoint();
		void ~endpoint();
		void close(std::weak_ptr<void>,ushort,std::string const&,std::error_code &);
		void close(std::weak_ptr<void>,ushort,std::string const&,std::error_code &);
		void create_connection(void);
		void create_connection(void);
		void endpoint(bool);
		void endpoint(bool);
		void get_con_from_hdl(std::weak_ptr<void>);
		void get_con_from_hdl(std::weak_ptr<void>,std::error_code &);
		void pong(std::weak_ptr<void>,std::string const&,std::error_code &);
		void pong(std::weak_ptr<void>,std::string const&,std::error_code &);
		void send(std::weak_ptr<void>,void const*,uint,websocketpp::frame::opcode::value,std::error_code &);
		void send(std::weak_ptr<void>,void const*,uint,websocketpp::frame::opcode::value,std::error_code &);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void ~endpoint();
		void ~endpoint();
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~category();
		void ~category();
		void what(void);
		void what(void);
		void ~exception();
		void ~exception();
		void ~exception();
		void ~exception();
		void prepare_header(websocketpp::frame::basic_header const&,websocketpp::frame::extended_header const&);
		void prepare_header(websocketpp::frame::basic_header const&,websocketpp::frame::extended_header const&);
		void exception(std::string const&,websocketpp::http::status_code::value,std::string const&,std::string const&);
		void exception(std::string const&,websocketpp::http::status_code::value,std::string const&,std::string const&);
		void what(void);
		void what(void);
		void ~exception();
		void ~exception();
		void ~exception();
		void ~exception();
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> &);
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> &);
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>,std::vector<std::pair<std::string,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>>,std::allocator<std::pair<std::string,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>>>> &);
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>,std::vector<std::pair<std::string,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>>,std::allocator<std::pair<std::string,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>>>> &);
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>);
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>);
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>);
		void string>>(__gnu_cxx::__normal_iterator<char const*,std::string>,__gnu_cxx::__normal_iterator<char const*,std::string>);
		void append_header(std::string const&,std::string const&);
		void parser(websocketpp::http::parser::parser const&);
		void parser(websocketpp::http::parser::parser const&);
		void prepare_body(void);
		void process_body(char const*,uint);
		void process_body(char const*,uint);
		void process_header(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void process_header(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void raw_headers(void);
		void raw_headers(void);
		void consume(char const*,uint);
		void consume(char const*,uint);
		void process(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void process(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void raw(void);
		void raw(void);
		void request(void);
		void request(void);
		void set_method(std::string const&);
		void set_method(std::string const&);
		void ~request();
		void ~request();
		void consume(char const*,uint);
		void consume(char const*,uint);
		void consume(std::istream &);
		void process(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void process(__gnu_cxx::__normal_iterator<char *,std::string>,__gnu_cxx::__normal_iterator<char *,std::string>);
		void raw(void);
		void raw(void);
		void response(void);
		void response(void);
		void response(websocketpp::http::parser::response const&);
		void response(websocketpp::http::parser::response const&);
		void ~response();
		void ~response();
		void strip_lws(std::string const&);
		void strip_lws(std::string const&);
		void get_string(websocketpp::http::status_code::value);
		void get_string(websocketpp::http::status_code::value);
		void write(uint,char const*);
		void write(uint,std::string const&);
		void write(uint,char const*);
		void write(uint,std::string const&);
		void md5_hash_string(std::string const&);
		void get_message(void);
		void get_message(websocketpp::frame::opcode::value,uint);
		void message(std::shared_ptr<websocketpp::message_buffer::alloc::con_msg_manager<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>>,websocketpp::frame::opcode::value,uint);
		void message(std::shared_ptr<websocketpp::message_buffer::alloc::con_msg_manager<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>>,websocketpp::frame::opcode::value,uint);
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~processor_category();
		void ~processor_category();
		void request const>(websocketpp::http::parser::request const &,std::string);
		void request const>(websocketpp::http::parser::request const &,std::string);
		void request>(websocketpp::http::parser::request &,std::string);
		void request>(websocketpp::http::parser::request &,std::string);
		void request>(websocketpp::http::parser::request &);
		void request>(websocketpp::http::parser::request &);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void consume(uchar *,uint,std::error_code &);
		void consume(uchar *,uint,std::error_code &);
		void decode_client_key(std::string const&,char *);
		void decode_client_key(std::string const&,char *);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void get_error(void);
		void get_error(void);
		void get_message(void);
		void get_message(void);
		void get_origin(websocketpp::http::parser::request const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_version(void);
		void get_version(void);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void ready(void);
		void ready(void);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void ~hybi00();
		void ~hybi00();
		void ~hybi00();
		void ~hybi00();
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void consume(uchar *,uint,std::error_code &);
		void consume(uchar *,uint,std::error_code &);
		void decode_client_key(std::string const&,char *);
		void decode_client_key(std::string const&,char *);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void get_error(void);
		void get_error(void);
		void get_message(void);
		void get_message(void);
		void get_origin(websocketpp::http::parser::request const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_version(void);
		void get_version(void);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void ready(void);
		void ready(void);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void ~hybi00();
		void ~hybi00();
		void ~hybi00();
		void ~hybi00();
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void get_version(void);
		void get_version(void);
		void hybi07(bool,bool,std::shared_ptr<websocketpp::message_buffer::alloc::con_msg_manager<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>>,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void hybi07(bool,bool,std::shared_ptr<websocketpp::message_buffer::alloc::con_msg_manager<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>>,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void ~hybi07();
		void ~hybi07();
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void get_version(void);
		void get_version(void);
		void hybi07(bool,bool,std::shared_ptr<websocketpp::message_buffer::alloc::con_msg_manager<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>>,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void hybi07(bool,bool,std::shared_ptr<websocketpp::message_buffer::alloc::con_msg_manager<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>>,websocketpp::random::random_device::int_generator<uint,websocketpp::concurrency::basic> &);
		void ~hybi07();
		void ~hybi07();
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_version(void);
		void get_version(void);
		void ~hybi08();
		void ~hybi08();
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_version(void);
		void get_version(void);
		void ~hybi08();
		void ~hybi08();
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void consume(uchar *,uint,std::error_code &);
		void consume(uchar *,uint,std::error_code &);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void get_bytes_needed(void);
		void get_bytes_needed(void);
		void get_error(void);
		void get_error(void);
		void get_message(void);
		void get_message(void);
		void get_origin(websocketpp::http::parser::request const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_version(void);
		void get_version(void);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_control(websocketpp::frame::opcode::value,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_control(websocketpp::frame::opcode::value,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void process_handshake_key(std::string &);
		void process_handshake_key(std::string &);
		void process_payload_bytes(uchar *,uint,std::error_code &);
		void process_payload_bytes(uchar *,uint,std::error_code &);
		void ready(void);
		void ready(void);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_incoming_basic_header(websocketpp::frame::basic_header const&,bool,bool);
		void validate_incoming_basic_header(websocketpp::frame::basic_header const&,bool,bool);
		void validate_incoming_extended_header(websocketpp::frame::basic_header,websocketpp::frame::extended_header);
		void validate_incoming_extended_header(websocketpp::frame::basic_header,websocketpp::frame::extended_header);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void ~hybi13();
		void ~hybi13();
		void ~hybi13();
		void ~hybi13();
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void client_handshake_request(websocketpp::http::parser::request &,std::shared_ptr<websocketpp::uri>,std::vector<std::string,std::allocator<std::string>> const&);
		void consume(uchar *,uint,std::error_code &);
		void consume(uchar *,uint,std::error_code &);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void extract_subprotocols(websocketpp::http::parser::request const&,std::vector<std::string,std::allocator<std::string>> &);
		void get_bytes_needed(void);
		void get_bytes_needed(void);
		void get_error(void);
		void get_error(void);
		void get_message(void);
		void get_message(void);
		void get_origin(websocketpp::http::parser::request const&);
		void get_origin(websocketpp::http::parser::request const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_raw(websocketpp::http::parser::response const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_uri(websocketpp::http::parser::request const&);
		void get_version(void);
		void get_version(void);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_close(ushort,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_control(websocketpp::frame::opcode::value,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_control(websocketpp::frame::opcode::value,std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_data_frame(std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_ping(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void prepare_pong(std::string const&,std::shared_ptr<websocketpp::message_buffer::message<websocketpp::message_buffer::alloc::con_msg_manager>>);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void process_handshake(websocketpp::http::parser::request const&,std::string const&,websocketpp::http::parser::response &);
		void process_handshake_key(std::string &);
		void process_handshake_key(std::string &);
		void process_payload_bytes(uchar *,uint,std::error_code &);
		void process_payload_bytes(uchar *,uint,std::error_code &);
		void ready(void);
		void ready(void);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_handshake(websocketpp::http::parser::request const&);
		void validate_incoming_basic_header(websocketpp::frame::basic_header const&,bool,bool);
		void validate_incoming_basic_header(websocketpp::frame::basic_header const&,bool,bool);
		void validate_incoming_extended_header(websocketpp::frame::basic_header,websocketpp::frame::extended_header);
		void validate_incoming_extended_header(websocketpp::frame::basic_header,websocketpp::frame::extended_header);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void validate_server_handshake_response(websocketpp::http::parser::request const&,websocketpp::http::parser::response &);
		void ~hybi13();
		void ~hybi13();
		void ~hybi13();
		void ~hybi13();
		void request>(websocketpp::http::parser::request &);
		void request>(websocketpp::http::parser::request &);
		void get_bytes_needed(void);
		void get_bytes_needed(void);
		void has_permessage_compress(void);
		void has_permessage_compress(void);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void get_bytes_needed(void);
		void get_bytes_needed(void);
		void has_permessage_compress(void);
		void has_permessage_compress(void);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void negotiate_extensions(websocketpp::http::parser::request const&);
		void int_generator(void);
		void int_generator(void);
		void operator();
		void operator();
		void calc(void const*,uint,uchar *);
		void calc(void const*,uint,uchar *);
		void get_remote_endpoint(std::error_code &);
		void get_remote_endpoint(std::error_code &);
		void init_asio(boost::asio::io_service *,std::shared_ptr<boost::asio::io_service::strand>,bool);
		void init_asio(boost::asio::io_service *,std::shared_ptr<boost::asio::io_service::strand>,bool);
		void function<void ();
		void function<void ();
		void init(std::shared_ptr<websocketpp::transport::asio::basic_socket::connection>);
		void init(std::shared_ptr<websocketpp::transport::asio::basic_socket::connection>);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void connection(bool,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &);
		void connection(bool,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &);
		void function<void ();
		void function<void ();
		void get_remote_endpoint(void);
		void get_remote_endpoint(void);
		void handle_async_read(boost::system::error_code const&,uint);
		void handle_async_write(boost::system::error_code const&,uint);
		void function<void ();
		void handle_pre_init(std::error_code const&);
		void function<void ();
		void function<void ();
		void init_asio(boost::asio::io_service *);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void post_init(void);
		void post_init(void);
		void proxy_data(void);
		void proxy_data(void);
		void proxy_init(std::string const&);
		void proxy_init(std::string const&);
		void function<void ();
		void function<void ();
		void proxy_write(void);
		void set_proxy(std::string const&,std::error_code &);
		void set_proxy(std::string const&,std::error_code &);
		void set_proxy_basic_auth(std::string const&,std::string const&,std::error_code &);
		void set_proxy_basic_auth(std::string const&,std::string const&,std::error_code &);
		void function<void ();
		void function<void ();
		void ~connection();
		void ~connection();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void connection(bool,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &);
		void connection(bool,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::alevel> &,websocketpp::log::basic<websocketpp::concurrency::basic,websocketpp::log::elevel> &);
		void function<void ();
		void function<void ();
		void get_remote_endpoint(void);
		void get_remote_endpoint(void);
		void handle_async_read(boost::system::error_code const&,uint);
		void handle_async_write(boost::system::error_code const&,uint);
		void function<void ();
		void handle_pre_init(std::error_code const&);
		void function<void ();
		void function<void ();
		void init_asio(boost::asio::io_service *);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void post_init(void);
		void post_init(void);
		void proxy_data(void);
		void proxy_data(void);
		void proxy_init(std::string const&);
		void proxy_init(std::string const&);
		void function<void ();
		void function<void ();
		void proxy_write(void);
		void set_proxy(std::string const&,std::error_code &);
		void set_proxy(std::string const&,std::error_code &);
		void set_proxy_basic_auth(std::string const&,std::string const&,std::error_code &);
		void set_proxy_basic_auth(std::string const&,std::string const&,std::error_code &);
		void function<void ();
		void function<void ();
		void ~connection();
		void ~connection();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void init(std::shared_ptr<websocketpp::transport::asio::connection<websocketpp::config::asio_client::transport_config>>);
		void init(std::shared_ptr<websocketpp::transport::asio::connection<websocketpp::config::asio_client::transport_config>>);
		void init_asio(boost::asio::io_service *,std::error_code &);
		void init_asio(boost::asio::io_service *,std::error_code &);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void ~endpoint();
		void ~endpoint();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void init(std::shared_ptr<websocketpp::transport::asio::connection<websocketpp::config::asio_tls_client::transport_config>>);
		void init(std::shared_ptr<websocketpp::transport::asio::connection<websocketpp::config::asio_tls_client::transport_config>>);
		void init_asio(boost::asio::io_service *,std::error_code &);
		void init_asio(boost::asio::io_service *,std::error_code &);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,boost::system::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void error_code>(uint,char const*,std::error_code const&);
		void ~endpoint();
		void ~endpoint();
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~category();
		void ~category();
		void function<void ();
		void function<void ();
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~socket_category();
		void ~socket_category();
		void get_remote_endpoint(std::error_code &);
		void get_remote_endpoint(std::error_code &);
		void function<void ();
		void init_asio(boost::asio::io_service *,std::shared_ptr<boost::asio::io_service::strand>,bool);
		void init_asio(boost::asio::io_service *,std::shared_ptr<boost::asio::io_service::strand>,bool);
		void function<void ();
		void function<void ();
		void function<void ();
		void translate_ec(boost::system::error_code);
		void translate_ec(boost::system::error_code);
		void ~connection();
		void ~connection();
		void init(std::shared_ptr<websocketpp::transport::asio::tls_socket::connection>);
		void init(std::shared_ptr<websocketpp::transport::asio::tls_socket::connection>);
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~category();
		void ~category();
		void get_authority(void);
		void get_authority(void);
		void get_host_port(void);
		void get_host_port(void);
		void get_port_from_string(std::string const&,std::error_code &);
		void get_port_from_string(std::string const&,std::error_code &);
		void get_port_str(void);
		void get_port_str(void);
		void str(void);
		void str(void);
		void uri(bool,std::string const&,std::string const&);
		void uri(bool,std::string const&,std::string const&);
		void uri(bool,std::string const&,std::string const&,std::string const&);
		void uri(bool,std::string const&,std::string const&,std::string const&);
		void uri(std::string const&);
		void uri(std::string const&);
		void uri(std::string const&,std::string const&,std::string const&,std::string const&);
		void uri(std::string const&,std::string const&,std::string const&,std::string const&);
		void uri(std::string,std::string const&,std::string const&);
		void uri(std::string,std::string const&,std::string const&);
		void to_hex(std::string const&);
		void to_hex(std::string const&);
};

#pragma once
class RealmsAPI{
	public:
		RealmsAPI(Social::UserManager &,std::string const&,std::string const&,std::string const&,std::string const&);
		RealmsAPI(Social::UserManager &,std::string const&,std::string const&,std::string const&,std::string const&);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void _processExecutionQueue(void);
		void _processExecutionQueue(void);
		void abortAllRequests(void);
		void abortAllRequests(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void isValidRealmName(std::string);
		void isValidRealmName(std::string);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void sync(void);
		void update(void);
		void update(void);
		void function<void ();
		void function<void ();
		void ~RealmsAPI();
		void ~RealmsAPI();
};

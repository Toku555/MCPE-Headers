#pragma once
namespace web{
	class details{
		public:
		void join(void);
		void join(void);
		void operator=(web::details::uri_components&&);
		void operator=(web::details::uri_components&&);
		void uri_components(void);
		void uri_components(void);
		void uri_components(web::details::uri_components const&);
		void uri_components(web::details::uri_components const&);
		void ~uri_components();
		void ~uri_components();
		void inner_parse(char const*,char const**,char const**,char const**,char const**,char const**,char const**,int *,char const**,char const**,char const**,char const**,char const**,char const**);
		void inner_parse(char const*,char const**,char const**,char const**,char const**,char const**,char const**,int *,char const**,char const**,char const**,char const**,char const**,char const**);
		void parse(std::string const&,web::details::uri_components &);
		void parse(std::string const&,web::details::uri_components &);
		void validate(std::string const&);
		void validate(std::string const&);
		void operator();
		void operator();
		void _http_client_communicator(web::uri,web::http::client::http_client_config);
		void _http_client_communicator(web::uri,web::http::client::http_client_config);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void async_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void finish_request(void);
		void finish_request(void);
		void open_and_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void open_and_send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void open_if_required(void);
		void open_if_required(void);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void push_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void ~_http_client_communicator();
		void ~_http_client_communicator();
		void ~_http_client_communicator();
		void ~_http_client_communicator();
		void asio_client(web::uri,web::http::client::http_client_config);
		void asio_client(web::uri,web::http::client::http_client_config);
		void open(void);
		void open(void);
		void send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void send_request(std::shared_ptr<web::http::client::details::request_context> const&);
		void ~asio_client();
		void ~asio_client();
		void ~asio_client();
		void ~asio_client();
		void function<void ();
		void function<void ();
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void arg<1> (*);
		void cancel(void);
		void cancel(void);
		void close(void);
		void close(void);
		void upgrade_to_ssl(void);
		void upgrade_to_ssl(void);
		void ~asio_connection();
		void ~asio_connection();
		void handle_pool_timer(boost::system::error_code const&,std::weak_ptr<web::http::client::details::asio_connection> const&);
		void obtain(void);
		void release(std::shared_ptr<web::http::client::details::asio_connection> const&);
		void release(std::shared_ptr<web::http::client::details::asio_connection> const&);
		void ~asio_connection_pool();
		void ~asio_connection_pool();
		void asio_context(std::shared_ptr<web::http::client::details::_http_client_communicator> const&,web::http::http_request &,std::shared_ptr const&<web::http::client::details::asio_connection>);
		void asio_context(std::shared_ptr<web::http::client::details::_http_client_communicator> const&,web::http::http_request &,std::shared_ptr const&<web::http::client::details::asio_connection>);
		void create_request_context(std::shared_ptr<web::http::client::details::_http_client_communicator> &,web::http::http_request &);
		void create_request_context(std::shared_ptr<web::http::client::details::_http_client_communicator> &,web::http::http_request &);
		void generate_basic_proxy_auth_header(void);
		void generate_basic_proxy_auth_header(void);
		void handle_cert_verification(bool,boost::asio::ssl::verify_context &);
		void handle_cert_verification(bool,boost::asio::ssl::verify_context &);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk(boost::system::error_code const&,int);
		void handle_chunk_header(boost::system::error_code const&);
		void handle_connect(boost::system::error_code const&,boost::asio::ip::basic_resolver_iterator<boost::asio::ip::tcp>);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_read_content(boost::system::error_code const&);
		void handle_resolve(boost::system::error_code const&,boost::asio::ip::basic_resolver_iterator<boost::asio::ip::tcp>);
		void handle_status_line(boost::system::error_code const&);
		void handle_write_body(boost::system::error_code const&);
		void handle_write_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_chunked_body(boost::system::error_code const&);
		void handle_write_headers(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void handle_write_large_body(boost::system::error_code const&);
		void read_headers(void);
		void read_headers(void);
		void report_error(std::string const&,boost::system::error_code const&,web::http::client::details::httpclient_errorcode_context);
		void report_error(std::string const&,boost::system::error_code const&,web::http::client::details::httpclient_errorcode_context);
		void report_exception(std::__exception_ptr::exception_ptr);
		void report_exception(std::__exception_ptr::exception_ptr);
		void http_exception>(web::http::http_exception const&);
		void http_exception>(web::http::http_exception const&);
		void handle_resolve(boost::system::error_code const&,boost::asio::ip::basic_resolver_iterator<boost::asio::ip::tcp>);
		void handle_status_line(boost::system::error_code const&);
		void handle_tcp_connect(boost::system::error_code const&,boost::asio::ip::basic_resolver_iterator<boost::asio::ip::tcp>);
		void handle_write_request(boost::system::error_code const&);
		void function<void ();
		void function<void ();
		void start_proxy_connect(void);
		void start_proxy_connect(void);
		void ~ssl_proxy_tunnel();
		void ~ssl_proxy_tunnel();
		void start_request(void);
		void start_request(void);
		void start_request(void);
		void start_request(void);
		void handle_timeout(boost::system::error_code const&,std::weak_ptr<web::http::client::details::asio_context> const&);
		void handle_timeout(boost::system::error_code const&,std::weak_ptr<web::http::client::details::asio_context> const&);
		void reset(void);
		void reset(void);
		void start(void);
		void start(void);
		void write_request(void);
		void write_request(void);
		void ~asio_context();
		void ~asio_context();
		void ~asio_context();
		void ~asio_context();
		void http_network_handler(web::uri const&,web::http::client::http_client_config const&);
		void http_network_handler(web::uri const&,web::http::client::http_client_config const&);
		void propagate(web::http::http_request);
		void propagate(web::http::http_request);
		void ~http_network_handler();
		void ~http_network_handler();
		void ~http_network_handler();
		void ~http_network_handler();
		void jni_failed(_JNIEnv *);
		void jni_failed(_JNIEnv *,_jmethodID * const&);
		void _get_readbuffer(void);
		void _get_readbuffer(void);
		void _get_writebuffer(void);
		void _get_writebuffer(void);
		void complete_headers(void);
		void complete_headers(void);
		void complete_request(ulong long);
		void complete_request(ulong long);
		void finish(void);
		void finish(void);
		void report_error(ulong,std::string const&);
		void report_error(ulong,std::string const&);
		void report_exception(std::__exception_ptr::exception_ptr);
		void report_exception(std::__exception_ptr::exception_ptr);
		void http_exception>(web::http::http_exception const&);
		void http_exception>(web::http::http_exception const&);
		void request_context(std::shared_ptr<web::http::client::details::_http_client_communicator> const&,web::http::http_request const&);
		void request_context(std::shared_ptr<web::http::client::details::_http_client_communicator> const&,web::http::http_request const&);
		void ~request_context();
		void ~request_context();
		void ~request_context();
		void ~request_context();
		void verify_X509_cert_chain(std::vector<std::string,std::allocator<std::string>> const&,std::string const&);
		void verify_X509_cert_chain(std::vector<std::string,std::allocator<std::string>> const&,std::string const&);
		void verify_cert_chain_platform_specific(boost::asio::ssl::verify_context &,std::string const&);
		void verify_cert_chain_platform_specific(boost::asio::ssl::verify_context &,std::string const&);
		void verify_uri(web::uri const&);
		void base_uri(void);
		void base_uri(void);
		void build_pipeline(web::uri const&,web::http::client::http_client_config const&);
		void build_pipeline(web::uri const&,web::http::client::http_client_config const&);
		void client_config(void);
		void http_client(web::uri const&);
		void http_client(web::uri const&,web::http::client::http_client_config const&);
		void http_client(web::uri const&,web::http::client::http_client_config const&);
		void request(web::http::http_request,pplx::cancellation_token const&);
		void request(web::http::http_request,pplx::cancellation_token const&);
		void http_client_config(void);
		void http_client_config(void);
		void http_client_config(web::http::client::http_client_config const&);
		void http_client_config(web::http::client::http_client_config const&);
		void ~http_client_config();
		void ~http_client_config();
		void _http_request(std::string);
		void _http_request(std::string);
		void _http_request(std::unique_ptr<web::http::details::_http_server_context,std::default_delete<web::http::details::_http_server_context>>);
		void _record_body_data_for_retry(Concurrency::streams::basic_istream<uchar> const&);
		void _record_body_data_for_retry(Concurrency::streams::basic_istream<uchar> const&);
		void _record_body_data_for_retry(std::string const&,std::string const&);
		void _record_body_data_for_retry(std::string const&,std::string const&);
		void _record_body_data_for_retry(std::vector<uchar,std::allocator<uchar>> const&);
		void _record_body_data_for_retry(std::vector<uchar,std::allocator<uchar>> const&);
		void _reset_body_for_retry(void);
		void _reset_body_for_retry(void);
		void absolute_uri(void);
		void absolute_uri(void);
		void relative_uri(void);
		void relative_uri(void);
		void set_request_uri(web::uri const&);
		void set_request_uri(web::uri const&);
		void to_string(void);
		void to_string(void);
		void ~_http_request();
		void ~_http_request();
		void ~_http_request();
		void ~_http_request();
		void to_string(void);
		void to_string(void);
		void ~_http_response();
		void ~_http_response();
		void ~_http_response();
		void ~_http_response();
		void add_chunked_delimiters(uchar *,uint,uint);
		void get_default_charset(std::string const&);
		void get_default_reason_phrase(ushort);
		void _complete(ulong long,std::__exception_ptr::exception_ptr const&);
		void _complete(ulong long,std::__exception_ptr::exception_ptr const&);
		void _extract_json(bool);
		void _extract_json(bool);
		void _extract_vector(void);
		void _extract_vector(void);
		void _get_content_length(void);
		void _prepare_to_receive_data(void);
		void _prepare_to_receive_data(void);
		void extract_string(bool);
		void extract_string(bool);
		void extract_utf16string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void http_msg_base(void);
		void http_msg_base(void);
		void function<bool ();
		void function<bool ();
		void set_body(Concurrency::streams::basic_istream<uchar> const&,std::string const&);
		void set_body(Concurrency::streams::basic_istream<uchar> const&,std::string const&);
		void set_body(Concurrency::streams::basic_istream<uchar> const&,ulong long,std::string const&);
		void set_body(Concurrency::streams::basic_istream<uchar> const&,ulong long,std::string const&);
		void to_string(void);
		void to_string(void);
		void ~http_msg_base();
		void ~http_msg_base();
		void ~http_msg_base();
		void ~http_msg_base();
		void is_content_type_json(std::string const&);
		void is_content_type_json(std::string const&);
		void is_content_type_one_of(std::string const*,std::string const*,std::string const&);
		void is_content_type_textual(std::string const&);
		void is_content_type_textual(std::string const&);
		void ltrim_whitespace(std::string &);
		void parse_content_type_and_charset(std::string const&,std::string &,std::string &);
		void parse_content_type_and_charset(std::string const&,std::string &,std::string &);
		void trim_whitespace(std::string &);
		void validate_method(std::string const&);
		void validate_method(std::string const&);
		void http_exception(int,std::error_category const&);
		void http_exception(int,std::error_category const&);
		void http_exception(int,std::string const&);
		void http_exception(int,std::string const&);
		void http_exception(std::string const&);
		void http_exception(std::string const&);
		void what(void);
		void what(void);
		void ~http_exception();
		void ~http_exception();
		void ~http_exception();
		void ~http_exception();
		void operator();
		void operator();
		void add<char [13]>(std::string const&,char [13] const&);
		void add<char [13]>(std::string const&,char [13] const&);
		void add<char [17]>(std::string const&,char [17] const&);
		void add<char [17]>(std::string const&,char [17] const&);
		void add<char [6]>(std::string const&,char [6] const&);
		void add<char [6]>(std::string const&,char [6] const&);
		void add<char [8]>(std::string const&,char [8] const&);
		void add<char [8]>(std::string const&,char [8] const&);
		void add<char [9]>(std::string const&,char [9] const&);
		void add<char [9]>(std::string const&,char [9] const&);
		void string>(std::string const&,std::string const&);
		void string>(std::string const&,std::string const&);
		void bind_impl<uint>(std::string const&,uint &);
		void bind_impl<uint>(std::string const&,uint &);
		void bind_impl<ulong long>(std::string const&,ulong long &);
		void bind_impl<ulong long>(std::string const&,ulong long &);
		void cache_control(void);
		void content_length(void);
		void content_type(void);
		void content_type(void);
		void date(void);
		void set_cache_control(std::string);
		void set_content_length(ulong long);
		void set_content_length(ulong long);
		void set_content_type(std::string);
		void set_date(utility::datetime const&);
		void append(std::shared_ptr<web::http::http_pipeline_stage> const&);
		void append(std::shared_ptr<web::http::http_pipeline_stage> const&);
		void propagate(web::http::http_request);
		void propagate(web::http::http_request);
		void ~http_pipeline_stage();
		void ~http_pipeline_stage();
		void ~http_pipeline_stage();
		void ~http_pipeline_stage();
		void extract_string(bool);
		void extract_string(bool);
		void set_body(std::string const&,std::string const&);
		void set_body(std::string const&,std::string const&);
		void set_body(std::vector<uchar,std::allocator<uchar>> const&);
		void set_body(std::vector<uchar,std::allocator<uchar>> const&);
		void extract_json(bool);
		void extract_json(bool);
		void extract_string(bool);
		void extract_string(bool);
		void extract_utf8string(bool);
		void extract_utf8string(bool);
		void extract_vector(void);
		void extract_vector(void);
		void ~inline_continuation();
		void ~inline_continuation();
		void propagate(web::http::http_request);
		void propagate(web::http::http_request);
		void ~oauth1_handler();
		void ~oauth1_handler();
		void ~oauth1_handler();
		void ~oauth1_handler();
		void oauth1_state(web::http::oauth1::details::oauth1_state const&);
		void oauth1_state(web::http::oauth1::details::oauth1_state const&);
		void _authenticate_request(web::http::http_request &,web::http::oauth1::details::oauth1_state);
		void _authenticate_request(web::http::http_request &,web::http::oauth1::details::oauth1_state);
		void _build_base_string_uri(web::uri const&);
		void _build_base_string_uri(web::uri const&);
		void _build_hmac_sha1_signature(web::http::http_request,web::http::oauth1::details::oauth1_state);
		void _build_hmac_sha1_signature(web::http::http_request,web::http::oauth1::details::oauth1_state);
		void _build_key(void);
		void _build_key(void);
		void _build_normalized_parameters(web::uri,web::http::oauth1::details::oauth1_state const&);
		void _build_normalized_parameters(web::uri,web::http::oauth1::details::oauth1_state const&);
		void _build_signature(web::http::http_request,web::http::oauth1::details::oauth1_state);
		void _build_signature(web::http::http_request,web::http::oauth1::details::oauth1_state);
		void _build_signature_base_string(web::http::http_request,web::http::oauth1::details::oauth1_state);
		void _build_signature_base_string(web::http::http_request,web::http::oauth1::details::oauth1_state);
		void _generate_auth_state(std::string,std::string);
		void _generate_auth_state(std::string,std::string);
		void _generate_auth_state(void);
		void _generate_auth_state(void);
		void _request_token(web::http::oauth1::details::oauth1_state,bool);
		void _request_token(web::http::oauth1::details::oauth1_state,bool);
		void build_authorization_uri(void);
		void token(void);
		void token_from_redirected_uri(web::uri const&);
		void token_from_verifier(std::string);
		void token_from_verifier(std::string);
		void what(void);
		void what(void);
		void ~oauth1_exception();
		void ~oauth1_exception();
		void ~oauth1_exception();
		void ~oauth1_exception();
		void ~oauth1_token();
		void propagate(web::http::http_request);
		void propagate(web::http::http_request);
		void ~oauth2_handler();
		void ~oauth2_handler();
		void ~oauth2_handler();
		void ~oauth2_handler();
		void _authenticate_request(web::http::http_request &);
		void _authenticate_request(web::http::http_request &);
		void erase(uint);
		void Token>(web::json::details::JSON_Parser<char>::Token const&,std::string const&);
		void CompleteComment(web::json::details::JSON_Parser<char>::Token &);
		void CompleteComment(web::json::details::JSON_Parser<char>::Token &);
		void CompleteNumberLiteral(char,web::json::details::JSON_Parser<char>::Token &);
		void CompleteNumberLiteral(char,web::json::details::JSON_Parser<char>::Token &);
		void CompleteStringLiteral(web::json::details::JSON_Parser<char>::Token &);
		void CompleteStringLiteral(web::json::details::JSON_Parser<char>::Token &);
		void GetNextToken(web::json::details::JSON_Parser<char>::Token &);
		void GetNextToken(web::json::details::JSON_Parser<char>::Token &);
		void _ParseArray(web::json::details::JSON_Parser<char>::Token &);
		void _ParseArray(web::json::details::JSON_Parser<char>::Token &);
		void _ParseObject(web::json::details::JSON_Parser<char>::Token &);
		void _ParseObject(web::json::details::JSON_Parser<char>::Token &);
		void _ParseValue(web::json::details::JSON_Parser<char>::Token &);
		void _ParseValue(web::json::details::JSON_Parser<char>::Token &);
		void handle_unescape_char(web::json::details::JSON_Parser<char>::Token &);
		void handle_unescape_char(web::json::details::JSON_Parser<char>::Token &);
		void scan_unicode_octet(void);
		void scan_unicode_octet(void);
		void NextCharacter(void);
		void NextCharacter(void);
		void PeekCharacter(void);
		void PeekCharacter(void);
		void CompleteComment(web::json::details::JSON_Parser<char>::Token &);
		void CompleteComment(web::json::details::JSON_Parser<char>::Token &);
		void CompleteStringLiteral(web::json::details::JSON_Parser<char>::Token &);
		void CompleteStringLiteral(web::json::details::JSON_Parser<char>::Token &);
		void NextCharacter(void);
		void NextCharacter(void);
		void PeekCharacter(void);
		void PeekCharacter(void);
		void _copy_value(void);
		void _copy_value(void);
		void as_array(void);
		void as_array(void);
		void as_array(void);
		void as_array(void);
		void format(std::string &);
		void format(std::string &);
		void format_impl<char>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &);
		void format_impl<char>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &);
		void index(uint);
		void index(uint);
		void serialize_impl(std::string &);
		void serialize_impl(std::string &);
		void size(void);
		void size(void);
		void type(void);
		void type(void);
		void ~_Array();
		void ~_Array();
		void ~_Array();
		void ~_Array();
		void _copy_value(void);
		void _copy_value(void);
		void as_bool(void);
		void as_bool(void);
		void format(std::string &);
		void format(std::string &);
		void type(void);
		void type(void);
		void ~_Boolean();
		void ~_Boolean();
		void _copy_value(void);
		void _copy_value(void);
		void type(void);
		void type(void);
		void ~_Null();
		void ~_Null();
		void _copy_value(void);
		void _copy_value(void);
		void as_double(void);
		void as_double(void);
		void as_integer(void);
		void as_integer(void);
		void as_number(void);
		void as_number(void);
		void format(std::string &);
		void is_double(void);
		void is_double(void);
		void is_integer(void);
		void is_integer(void);
		void type(void);
		void type(void);
		void ~_Number();
		void ~_Number();
		void _Object(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>>,bool);
		void _Object(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>>,bool);
		void _copy_value(void);
		void _copy_value(void);
		void as_object(void);
		void as_object(void);
		void as_object(void);
		void as_object(void);
		void format(std::string &);
		void format(std::string &);
		void format_impl<char>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &);
		void format_impl<char>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &);
		void has_field(std::string const&);
		void has_field(std::string const&);
		void index(std::string const&);
		void index(std::string const&);
		void serialize_impl(std::string &);
		void serialize_impl(std::string &);
		void size(void);
		void size(void);
		void type(void);
		void type(void);
		void ~_Object();
		void ~_Object();
		void ~_Object();
		void ~_Object();
		void _copy_value(void);
		void _copy_value(void);
		void as_string(void);
		void as_string(void);
		void format(std::string &);
		void format(std::string &);
		void has_escape_chars(web::json::details::_String const&);
		void serialize_impl(std::string &);
		void serialize_impl(std::string &);
		void type(void);
		void type(void);
		void ~_String();
		void ~_String();
		void ~_String();
		void ~_String();
		void as_array(void);
		void as_array(void);
		void as_bool(void);
		void as_double(void);
		void as_integer(void);
		void as_number(void);
		void as_object(void);
		void as_object(void);
		void as_string(void);
		void cnst_index(std::string const&);
		void cnst_index(uint);
		void format(std::string &);
		void format(std::string &);
		void get_element(uint);
		void get_field(std::string const&);
		void has_field(std::string const&);
		void has_field(std::string const&);
		void index(std::string const&);
		void index(uint);
		void is_double(void);
		void is_integer(void);
		void serialize_impl(std::string &);
		void serialize_impl(std::string &);
		void size(void);
		void size(void);
		void to_string(void);
		void to_string(void);
		void ~_Value();
		void ~_Value();
		void append_escape_string<char>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&);
		void append_escape_string<char>(std::basic_string<char,std::char_traits<char>,std::allocator<char>> &,std::basic_string<char,std::char_traits<char>,std::allocator<char>> const&);
		void format_string(std::string const&,std::string &);
		void format_string(std::string const&,std::string &);
		void json_error_category(void);
		void json_error_category(void);
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~json_error_category_impl();
		void ~json_error_category_impl();
		void json_exception(char const* const&);
		void json_exception(char const* const&);
		void what(void);
		void what(void);
		void ~json_exception();
		void ~json_exception();
		void ~json_exception();
		void ~json_exception();
		void keep_object_element_order(bool);
		void is_int32(void);
		void is_int64(void);
		void is_uint32(void);
		void compare_pairs(std::pair<std::string,web::json::value> const&,std::pair<std::string,web::json::value> const&);
		void erase(std::string const&);
		void find_by_key(std::string const&);
		void find_by_key(std::string const&);
		void find_by_key(std::string const&);
		void find_by_key(std::string const&);
		void object(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>>,bool);
		void object(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>>,bool);
		void operator[](std::string const&);
		void operator[](std::string const&);
		void operator<<(std::ostream &,web::json::value const&);
		void operator>>(std::istream &,web::json::value &);
		void array(std::vector<web::json::value,std::allocator<web::json::value>>);
		void array(uint);
		void array(uint);
		void array(void);
		void array(void);
		void as_array(void);
		void as_array(void);
		void as_array(void);
		void as_array(void);
		void as_bool(void);
		void as_bool(void);
		void as_double(void);
		void as_double(void);
		void as_integer(void);
		void as_integer(void);
		void as_number(void);
		void as_number(void);
		void as_object(void);
		void as_object(void);
		void as_object(void);
		void as_object(void);
		void as_string(void);
		void as_string(void);
		void at(std::string const&);
		void at(std::string const&);
		void boolean(bool);
		void boolean(bool);
		void erase(std::string const&);
		void erase(std::string const&);
		void erase(uint);
		void format(std::string &);
		void format(std::string &);
		void is_double(void);
		void is_double(void);
		void is_integer(void);
		void is_integer(void);
		void null(void);
		void null(void);
		void number(double);
		void number(double);
		void number(int);
		void number(int);
		void number(long long);
		void number(uint);
		void number(ulong long);
		void number(ulong long);
		void object(bool);
		void object(bool);
		void object(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>>,bool);
		void object(std::vector<std::pair<std::string,web::json::value>,std::allocator<std::pair<std::string,web::json::value>>>,bool);
		void operator=(web::json::value const&);
		void operator=(web::json::value const&);
		void operator=(web::json::value&&);
		void operator=(web::json::value&&);
		void operator==(web::json::value const&);
		void operator==(web::json::value const&);
		void operator[](std::string const&);
		void operator[](std::string const&);
		void operator[](uint);
		void operator[](uint);
		void parse(std::istream &);
		void parse(std::istream &);
		void parse(std::istream &,std::error_code &);
		void parse(std::string const&);
		void parse(std::string const&);
		void parse(std::string const&,std::error_code &);
		void parse(std::string const&,std::error_code &);
		void serialize(std::ostream &);
		void serialize(std::ostream &);
		void serialize(void);
		void serialize(void);
		void string(std::string);
		void string(std::string);
		void string(std::string,bool);
		void to_string(void);
		void type(void);
		void type(void);
		void value(bool);
		void value(bool);
		void value(char const*);
		void value(char const*);
		void value(char const*,bool);
		void value(double);
		void value(double);
		void value(int);
		void value(int);
		void value(long long);
		void value(long long);
		void value(std::string);
		void value(std::string);
		void value(std::string,bool);
		void value(uint);
		void value(uint);
		void value(ulong long);
		void value(ulong long);
		void value(void);
		void value(void);
		void value(web::json::value const&);
		void value(web::json::value const&);
		void value(web::json::value&&);
		void value(web::json::value&&);
		void ~value();
		void authority(void);
		void decode(std::string const&);
		void decode(std::string const&);
		void encode_data_string(std::string const&);
		void encode_data_string(std::string const&);
		void function<bool ();
		void function<bool ();
		void encode_uri(std::string const&,web::uri::components::component);
		void encode_uri(std::string const&,web::uri::components::component);
		void operator==(web::uri const&);
		void resource(void);
		void resource(void);
		void split_path(std::string const&);
		void split_query(std::string const&);
		void split_query(std::string const&);
		void uri(char const*);
		void uri(std::string const&);
		void validate(std::string const&);
		void validate(std::string const&);
		void append(web::uri const&);
		void append(web::uri const&);
		void append_path(std::string const&,bool);
		void append_path(std::string const&,bool);
		void append_query(std::string const&,bool);
		void append_query(std::string const&,bool);
		void append_query<char [14]>(std::string const&,char [14] const&,bool);
		void append_query<char [14]>(std::string const&,char [14] const&,bool);
		void append_query<char [7]>(std::string const&,char [7] const&,bool);
		void append_query<char [7]>(std::string const&,char [7] const&,bool);
		void string>(std::string const&,std::string const&,bool);
		void string>(std::string const&,std::string const&,bool);
		void append_query<uint>(std::string const&,uint const&,bool);
		void append_query<uint>(std::string const&,uint const&,bool);
		void is_valid(void);
		void to_string(void);
		void to_string(void);
		void to_uri(void);
		void to_uri(void);
		void what(void);
		void what(void);
		void ~uri_exception();
		void ~uri_exception();
		void ~uri_exception();
		void ~uri_exception();
		web_proxy(web::web_proxy const&);
		web_proxy(web::web_proxy const&);
		void verify_uri(web::uri const&);
		websocket_client_callback_impl(web::websockets::client::websocket_client_config);
		websocket_client_callback_impl(web::websockets::client::websocket_client_config);
		void ~websocket_client_callback_impl();
		void ~websocket_client_callback_impl();
		void ~websocket_client_callback_impl();
		void ~websocket_client_callback_impl();
		void close_pending_tasks_with_error(web::websockets::client::websocket_exception const&);
		void receive(void);
		void set_handler(void);
		void set_handler(void);
		websocket_client_task_impl(web::websockets::client::websocket_client_config);
		void ~websocket_client_task_impl();
		void ~websocket_client_task_impl();
		void ~websocket_client_task_impl();
		void ~websocket_client_task_impl();
		void close(void);
		void close(void);
		void close(web::websockets::client::websocket_close_status,std::string const&);
		void close(web::websockets::client::websocket_close_status,std::string const&);
		void asio_client>(web::websockets::client::websocket_close_status,std::string const&,std::error_code &);
		void asio_client>(web::websockets::client::websocket_close_status,std::string const&,std::error_code &);
		void asio_tls_client>(web::websockets::client::websocket_close_status,std::string const&,std::error_code &);
		void asio_tls_client>(web::websockets::client::websocket_close_status,std::string const&,std::error_code &);
		void connect(void);
		void connect(void);
		void connect(void);
		void connect(void);
		void connect(void);
		void connect(void);
		void connect(void);
		void connect(void);
		void asio_client>(void);
		void asio_client>(void);
		void asio_client>(void);
		void asio_client>(void);
		void asio_tls_client>(void);
		void asio_tls_client>(void);
		void asio_tls_client>(void);
		void asio_tls_client>(void);
		void send(web::websockets::client::websocket_outgoing_message &);
		void send(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void send_msg(web::websockets::client::websocket_outgoing_message &);
		void asio_client>(std::shared_ptr<web::websockets::client::details::wspp_callback_client> const&,web::websockets::client::websocket_outgoing_message const&,std::shared_ptr const&<uchar>,uint,std::error_code &);
		void asio_client>(std::shared_ptr<web::websockets::client::details::wspp_callback_client> const&,web::websockets::client::websocket_outgoing_message const&,std::shared_ptr const&<uchar>,uint,std::error_code &);
		void asio_tls_client>(std::shared_ptr<web::websockets::client::details::wspp_callback_client> const&,web::websockets::client::websocket_outgoing_message const&,std::shared_ptr const&<uchar>,uint,std::error_code &);
		void asio_tls_client>(std::shared_ptr<web::websockets::client::details::wspp_callback_client> const&,web::websockets::client::websocket_outgoing_message const&,std::shared_ptr const&<uchar>,uint,std::error_code &);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void asio_tls_client>(std::weak_ptr<void> const&,bool);
		void is_tls_client(void);
		void is_tls_client(void);
		void non_tls_client(void);
		void non_tls_client(void);
		void ~websocketpp_client();
		void ~websocketpp_client();
		void ~websocketpp_client();
		void ~websocketpp_client();
		void non_tls_client(void);
		void tls_client(void);
		void is_tls_client(void);
		void is_tls_client(void);
		void tls_client(void);
		void tls_client(void);
		void ~websocketpp_tls_client();
		void ~websocketpp_tls_client();
		void ~websocketpp_tls_client();
		void ~websocketpp_tls_client();
		void wspp_callback_client(web::websockets::client::websocket_client_config);
		void wspp_callback_client(web::websockets::client::websocket_client_config);
		void ~wspp_callback_client();
		void ~wspp_callback_client();
		void ~wspp_callback_client();
		void ~wspp_callback_client();
		websocket_callback_client(void);
		websocket_callback_client(web::websockets::client::websocket_client_config);
		websocket_callback_client(web::websockets::client::websocket_client_config);
		void add_subprotocol(std::string const&);
		void add_subprotocol(std::string const&);
		void subprotocols(void);
		void subprotocols(void);
		websocket_client_config(web::websockets::client::websocket_client_config const&);
		websocket_client_config(web::websockets::client::websocket_client_config const&);
		void ~websocket_client_config();
		void ~websocket_client_config();
		websocket_exception(std::error_code,std::string const&);
		websocket_exception(std::error_code,std::string const&);
		websocket_exception(std::string const&);
		websocket_exception(std::string const&);
		void what(void);
		void what(void);
		void ~websocket_exception();
		void ~websocket_exception();
		void ~websocket_exception();
		void ~websocket_exception();
		void extract_string(void);
		void extract_string(void);
		void set_message(Concurrency::streams::container_buffer<std::string> const&);
		void set_message(Concurrency::streams::container_buffer<std::string> const&);
		void set_utf8_message(std::string &&);
		void set_utf8_message(std::string &&);
	}
};

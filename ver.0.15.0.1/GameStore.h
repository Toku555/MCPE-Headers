#pragma once
class GameStore{
	public:
		GameStore(MinecraftClient &);
		GameStore(MinecraftClient &);
		void acknowledgePurchase(PurchaseInfo const&,ProductType);
		void acknowledgePurchase(PurchaseInfo const&,ProductType);
		void allowsQueryPurchasesOnStartup(void);
		void allowsQueryPurchasesOnStartup(void);
		void allowsSubscriptions(void);
		void allowsSubscriptions(void);
		void completeQueryPurchasesMultistore(void);
		void completeQueryPurchasesMultistore(void);
		void getAppReceipt(void);
		void getAppReceipt(void);
		void getStoreId(void);
		void getStoreId(void);
		void isAvailable(void);
		void isGameLicensed(void);
		void isGameLicensed(void);
		void isTrial(void);
		void isTrial(void);
		void onAppPurchaseCanceled(void);
		void onAppPurchaseCanceled(void);
		void onAppPurchaseFailed(void);
		void onAppPurchaseFailed(void);
		void onAppPurchaseSuccess(void);
		void onAppPurchaseSuccess(void);
		void onPurchaseCanceled(ProductId const&);
		void onPurchaseCanceled(ProductId const&);
		void onPurchaseFailed(ProductId const&);
		void onPurchaseFailed(ProductId const&);
		void onPurchaseSuccessful(PurchaseInfo const&);
		void onPurchaseSuccessful(PurchaseInfo const&);
		void onQueryProductsFail(void);
		void onQueryProductsFail(void);
		void onQueryProductsSuccess(std::vector<Product,std::allocator<Product>> const&);
		void onQueryProductsSuccess(std::vector<Product,std::allocator<Product>> const&);
		void onQueryPurchasesFail(void);
		void onQueryPurchasesFail(void);
		void onQueryPurchasesFailMultistore(int);
		void onQueryPurchasesFailMultistore(int);
		void onQueryPurchasesSuccess(std::vector<PurchaseInfo,std::allocator<PurchaseInfo>> const&);
		void onQueryPurchasesSuccess(std::vector<PurchaseInfo,std::allocator<PurchaseInfo>> const&);
		void onQueryPurchasesSuccessMultistore(int,std::vector<PurchaseInfo,std::allocator<PurchaseInfo>> const&);
		void onQueryPurchasesSuccessMultistore(int,std::vector<PurchaseInfo,std::allocator<PurchaseInfo>> const&);
		void onStoreInitialized(bool);
		void onStoreInitialized(bool);
		void purchase(ProductId const&,ProductType,std::string const&);
		void purchase(ProductId const&,ProductType,std::string const&);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void registerListener(StoreListener &);
		void registerListener(StoreListener &);
		void requiresRetorePurchasesButton(void);
		void requiresRetorePurchasesButton(void);
		void function<void ();
		void function<void ();
		void unregisterListener(StoreListener &);
		void unregisterListener(StoreListener &);
		void ~GameStore();
		void ~GameStore();
		void ~GameStore();
		void ~GameStore();
};

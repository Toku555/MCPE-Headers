#pragma once
class OfferRepository{
	public:
		OfferRepository(GameStore &,RealmsAPI &,Options &);
		OfferRepository(GameStore &,RealmsAPI &,Options &);
		void _addPurchaseToOffer(PurchaseInfo const&,bool);
		void _addPurchaseToOffer(PurchaseInfo const&,bool);
		void _debugFauxRealmsTransaction(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void _debugFauxRealmsTransaction(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void _getAvailableRealmsTrialOffer(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void _getPayloadFromReceipt(std::string const&);
		void _getPayloadFromReceipt(std::string const&);
		void _parseRealmsTransactionPayload(std::string const&,std::string &,std::string &,std::string &);
		void _parseRealmsTransactionPayload(std::string const&,std::string &,std::string &,std::string &);
		void _queueRealmsPurchaseForFulfillment(Offer *);
		void _restoreDurablesFromCache(void);
		void _restoreDurablesFromCache(void);
		void _tryAutoFulfillRealmsOffer(Offer *);
		void _tryAutoFulfillRealmsOffer(Offer *);
		void getCategoryName(int);
		void getCategoryName(int);
		void getFeaturedOffer(void);
		void getFeaturedOffer(void);
		void getNumOfferCategories(void);
		void getNumOfferCategories(void);
		void getNumOffersInCategory(int);
		void getNumOffersInCategory(int);
		void getOffer(int,int);
		void getOffer(int,int);
		void getOfferById(std::string const&);
		void getOfferById(std::string const&);
		void getOfferByProductId(ProductId const&);
		void getRealmsOffer(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void getRealmsOffer(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void hasRealmsOffersWithProductInfo(void);
		void hasRealmsOffersWithProductInfo(void);
		void hasUnfulfilledRealmsPurchases(void);
		void hasUnfulfilledRealmsPurchases(void);
		void isRealmsTrialOfferAvailable(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void isRealmsTrialOfferAvailable(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier);
		void onAppPurchaseCanceled(void);
		void onAppPurchaseCanceled(void);
		void onAppPurchaseFailed(void);
		void onAppPurchaseFailed(void);
		void onAppPurchaseSuccess(void);
		void onAppPurchaseSuccess(void);
		void onPurchaseCanceled(ProductId const&);
		void onPurchaseCanceled(ProductId const&);
		void onPurchaseFailed(ProductId const&);
		void onPurchaseFailed(ProductId const&);
		void onPurchaseSuccessful(PurchaseInfo const&);
		void onPurchaseSuccessful(PurchaseInfo const&);
		void onQueryProductsFail(void);
		void onQueryProductsFail(void);
		void onQueryProductsSuccess(std::vector<Product,std::allocator<Product>> const&);
		void onQueryProductsSuccess(std::vector<Product,std::allocator<Product>> const&);
		void onQueryPurchasesFail(void);
		void onQueryPurchasesFail(void);
		void onQueryPurchasesSuccess(std::vector<PurchaseInfo,std::allocator<PurchaseInfo>> const&);
		void onQueryPurchasesSuccess(std::vector<PurchaseInfo,std::allocator<PurchaseInfo>> const&);
		void onStoreInitialized(bool);
		void onStoreInitialized(bool);
		void purchaseOffer(Offer &,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void purchaseOffer(Offer &,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void purchaseRealmsOffer(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier,bool,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void purchaseRealmsOffer(RealmsOfferType,RealmsOfferPeriod,RealmsOfferTier,bool,std::unique_ptr<TransactionContext,std::default_delete<TransactionContext>>);
		void update(void);
		void update(void);
		void ~OfferRepository();
		void ~OfferRepository();
		void ~OfferRepository();
		void ~OfferRepository();
};

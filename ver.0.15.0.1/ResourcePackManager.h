#pragma once
class ResourcePackManager{
	public:
		void function<void ();
		void function<void ();
		void _addUserResourcePacks(void);
		void _addUserResourcePacks(void);
		void _getResource(std::string const&,std::string &);
		void _getResourcePacksByName(std::vector<std::string,std::allocator<std::string>> const&,std::vector&<std::shared_ptr<ResourcePack>,std::allocator<ResourcePack>>);
		void _getResourcePacksByName(std::vector<std::string,std::allocator<std::string>> const&,std::vector&<std::shared_ptr<ResourcePack>,std::allocator<ResourcePack>>);
		void _getResourcePacksNotIn(std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> const&,std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>>&);
		void _getResourcePacksNotIn(std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> const&,std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>>&);
		void _getResourcePath(std::string const&);
		void _loadLastActiveResourcePacksFromFile(void);
		void _loadLastActiveResourcePacksFromFile(void);
		void _stacksAreEqual(std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> const&,std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> const&);
		void _unloadResources(void);
		void _unloadResources(void);
		void addResourcePack(std::shared_ptr<ResourcePack>);
		void addResourcePack(std::shared_ptr<ResourcePack>);
		void getActiveResourcePacks(void);
		void getActiveResourcePacks(void);
		void getInactiveResourcePacks(std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> &);
		void getInactiveResourcePacks(std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> &);
		void getResourcePackByOffer(Offer const*);
		void getResourcePackByOffer(Offer const*);
		void init(void);
		void init(void);
		void load(ResourceLocation const&,std::string &);
		void load(ResourceLocation const&,std::string &);
		void loadAllVersionsOf(ResourceLocation const&);
		void loadAllVersionsOf(ResourceLocation const&);
		void loadTexture(ResourceLocation const&);
		void loadTexture(ResourceLocation const&);
		void notifyActiveResourcePackChanged(void);
		void preloadTextures(bool);
		void preloadTextures(bool);
		void registerResourcePackListener(ResourcePackListener &);
		void registerResourcePackListener(ResourcePackListener &);
		void setActiveResourcePacks(std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> const&);
		void setActiveResourcePacks(std::vector<std::shared_ptr<ResourcePack>,std::allocator<std::shared_ptr<ResourcePack>>> const&);
		void unRegisterResourcePackListener(ResourcePackListener &);
		void unRegisterResourcePackListener(ResourcePackListener &);
		void ~ResourcePackManager();
		void ~ResourcePackManager();
		void ~ResourcePackManager();
		void ~ResourcePackManager();
};

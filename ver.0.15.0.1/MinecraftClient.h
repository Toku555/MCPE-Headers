#pragma once
class MinecraftClient{
	public:
		MinecraftClient(int,char **);
		MinecraftClient(int,char **);
		void ResetBai(int);
		void _getGuiScaleIndexForLargeScreen(int,int);
		void _getGuiScaleIndexForSmallScreen(int,int);
		void _initMinecraftClient(void);
		void _initMinecraftClient(void);
		void _popScreen(bool);
		void _popScreen(bool);
		void _processNewGazeHoloScreenData(void);
		void _processNewGazeHoloScreenData(void);
		void _recenterGazeActivationOriginPoint(void);
		void _registerOnInitUriListeners(void);
		void _registerOnInitUriListeners(void);
		void _reloadFancy(bool);
		void _reloadFancy(bool);
		void _reloadLanguages(void);
		void _shouldUseLastPointerLocationOnFocusChange(void);
		void _toggleThirdPersonView(void);
		void _unregisterOnInitUriListeners(void);
		void _updateScreenshot(void);
		void allowPicking(void);
		void allowPicking(void);
		void audioEngineOff(void);
		void audioEngineOff(void);
		void audioEngineOn(void);
		void audioEngineOn(void);
		void autoLoadLevel(std::string const&);
		void autoLoadLevel(std::string const&);
		void calculateGuiScale(int);
		void calculateGuiScale(int);
		void canActivateKeyboard(void);
		void canActivateKeyboard(void);
		void captureScreenAsImage(TextureData &);
		void captureScreenAsImage(TextureData &);
		void checkForPiracy(void);
		void clearDictationDataAvailable(void);
		void clearDictationDataAvailable(void);
		void composeScreenshot(TextureData &,std::string const&,bool);
		void composeScreenshot(TextureData &,std::string const&,bool);
		void createDynamicTextures(void);
		void createDynamicTextures(void);
		void createSkin(void);
		void createSkin(void);
		void destroyDynamicTextures(void);
		void endFrame(void);
		void endFrame(void);
		void exportScreenshotsToZipFile(std::string const&);
		void exportScreenshotsToZipFile(std::string const&);
		void function<bool ();
		void function<void ();
		void function<void ();
		void getAutomationClient(void);
		void getCameraEntity(void);
		void getCameraEntity(void);
		void getCameraTargetEntity(void);
		void getCameraTargetEntity(void);
		void getClientRandomId(void);
		void getClientRandomId(void);
		void getConnectedPort(void);
		void getConnectedPort(void);
		void getConnectedServer(void);
		void getConnectedServer(void);
		void getCurrentInputMode(void);
		void getCurrentInputMode(void);
		void getDictationText(void);
		void getDictationText(void);
		void getDpadScale(void);
		void getDpadScale(void);
		void getExternalServer(void);
		void getExternalServer(void);
		void getFont(void);
		void getFont(void);
		void getForceMonoscopic(void);
		void getForceMonoscopic(void);
		void getGameRenderer(void);
		void getGameRenderer(void);
		void getGameStore(void);
		void getGameStore(void);
		void getGeometryGroup(void);
		void getGeometryGroup(void);
		void getGuiData(void);
		void getGuiData(void);
		void getGuiScale(int);
		void getGuiScaleIndex(float);
		void getHeight(void);
		void getHeight(void);
		void getHoloInput(void);
		void getHoloInput(void);
		void getHolosceneRenderer(void);
		void getHolosceneRenderer(void);
		void getHoloscreenHalfWidth(void);
		void getHoloscreenHalfWidth(void);
		void getHoloviewerScale(void);
		void getHoloviewerScale(void);
		void getInput(void);
		void getInput(void);
		void getLevelArchiver(void);
		void getLevelArchiver(void);
		void getLevelRenderer(void);
		void getLevelRenderer(void);
		void getLocalPlayer(void);
		void getLocalPlayer(void);
		void getMobEffectsLayout(void);
		void getMobEffectsLayout(void);
		void getMouseGrabbed(void);
		void getMouseGrabbed(void);
		void getMultiplayer(void);
		void getMultiplayer(void);
		void getOculusPlatformMessagePump(void);
		void getOfferRepository(void);
		void getOfferRepository(void);
		void getOptions(void);
		void getOptions(void);
		void getParticleEngine(void);
		void getParticleEngine(void);
		void getRealms(void);
		void getRealms(void);
		void getRuneFont(void);
		void getRuneFont(void);
		void getScreen(void);
		void getScreen(void);
		void getScreen(void);
		void getScreenChooser(void);
		void getScreenChooser(void);
		void getScreenName(void);
		void getScreenName(void);
		void getScreenNames(void);
		void getServer(void);
		void getServer(void);
		void getSituationalMusic(void);
		void getSkinGeometryGroup(void);
		void getSkinGeometryGroup(void);
		void getSkinRepository(void);
		void getSkinRepository(void);
		void getSoundEngine(void);
		void getSoundEngine(void);
		void getSuperUserPermissions(void);
		void getTelemetry(void);
		void getTelemetry(void);
		void getTextures(void);
		void getTextures(void);
		void getToastManager(void);
		void getToastManager(void);
		void getUIDefRepo(void);
		void getUIDefRepo(void);
		void getUserAuthentication(void);
		void getUserAuthentication(void);
		void getUserManager(void);
		void getUserManager(void);
		void getVoiceSystem(void);
		void getVoiceSystem(void);
		void getWidth(void);
		void getWidth(void);
		void grabMouse(void);
		void handleAttackActionButtonRelease(void);
		void handleAttackActionButtonRelease(void);
		void handleBack(bool);
		void handleBack(bool);
		void handleBiomeDisplayButtonPress(void);
		void handleBiomeDisplayButtonPress(void);
		void handleBuildAction(BuildActionIntention &);
		void handleBuildAction(BuildActionIntention &);
		void handleBuildActionButtonRelease(void);
		void handleBuildActionButtonRelease(void);
		void handleBuildOrAttackButtonPress(void);
		void handleBuildOrAttackButtonPress(void);
		void handleBuildOrInteractButtonPress(void);
		void handleBuildOrInteractButtonPress(void);
		void handleCaretLocation(int);
		void handleCaretLocation(int);
		void handleChatButtonRelease(void);
		void handleChatButtonRelease(void);
		void handleCommandEvent(VoiceCommand const&);
		void handleCommandEvent(VoiceCommand const&);
		void handleConsoleButtonRelease(void);
		void handleConsoleButtonRelease(void);
		void handleCraftingButtonPress(void);
		void handleCraftingButtonPress(void);
		void handleCreativeBlockSelectButtonRelease(void);
		void handleCreativeBlockSelectButtonRelease(void);
		void handleDebugToggleAnchorsCommand(void);
		void handleDebugToggleAnchorsCommand(void);
		void handleDebugToggleLSRCommand(void);
		void handleDebugToggleLSRCommand(void);
		void handleDecreaseRenderDistanceButtonPress(void);
		void handleDecreaseRenderDistanceButtonPress(void);
		void handleDecrementMaxCullingStepsButtonPress(void);
		void handleDecrementMaxCullingStepsButtonPress(void);
		void handleDestoryOrAttackButtonPress(void);
		void handleDestoryOrAttackButtonPress(void);
		void handleDestroyOrInteractButtonPress(void);
		void handleDestroyOrInteractButtonPress(void);
		void handleDictationEvent(void);
		void handleDictationEvent(void);
		void handleDirection(DirectionId,float,float);
		void handleDirection(DirectionId,float,float);
		void handleDismountButtonPress(void);
		void handleDismountButtonPress(void);
		void handleDropAllButtonPress(void);
		void handleDropAllItemsButtonPress(void);
		void handleDropAllItemsButtonPress(void);
		void handleDropButtonPress(void);
		void handleDropButtonPress(void);
		void handleHoloInputModeChanged(HoloUIInputMode);
		void handleHoloInputModeChanged(HoloUIInputMode);
		void handleIncreaseRenderDistanceButtonPress(void);
		void handleIncreaseRenderDistanceButtonPress(void);
		void handleIncrementMaxCullingStepsButtonPress(void);
		void handleIncrementMaxCullingStepsButtonPress(void);
		void handleInputModeChanged(InputMode);
		void handleInputModeChanged(InputMode);
		void handleInteractButtonPress(void);
		void handleInteractButtonPress(void);
		void handleInventoryButtonPress(void);
		void handleInventoryButtonPress(void);
		void handleInventoryMoveButtonPress(int);
		void handleInventoryMoveButtonPress(int);
		void handleInvite(void);
		void handleInvite(void);
		void handleLicenseChanged(void);
		void handleLowMemoryWarningButtonPress(void);
		void handleLowMemoryWarningButtonPress(void);
		void handleMemoryStatsButtonPress(void);
		void handleMemoryStatsButtonPress(void);
		void handleMenuButtonPress(short);
		void handleMenuButtonPress(short);
		void handleMenuButtonRelease(short);
		void handleMenuButtonRelease(short);
		void handleMobEffectsButtonPress(void);
		void handleMobEffectsButtonPress(void);
		void handleNextAVCStatButtonPress(void);
		void handleNextAVCStatButtonPress(void);
		void handleNextAVCStatButtonRelease(void);
		void handleNextAVCStatButtonRelease(void);
		void handlePaddleButtonPress(Side);
		void handlePaddleButtonPress(Side);
		void handlePaddleButtonRelease(Side);
		void handlePaddleButtonRelease(Side);
		void handlePauseButtonPress(void);
		void handlePauseButtonPress(void);
		void handlePickDebugObjectButtonPress(void);
		void handlePickDebugObjectButtonPress(void);
		void handlePointerLocation(short,short);
		void handlePointerLocation(short,short);
		void handlePointerPressedButtonPress(void);
		void handlePointerPressedButtonPress(void);
		void handlePointerPressedButtonRelease(void);
		void handlePointerPressedButtonRelease(void);
		void handleRedstoneLogButtonPress(void);
		void handleRedstoneLogButtonPress(void);
		void handleReloadUIDefinitions(void);
		void handleReloadUIDefinitions(void);
		void handleRenderDebugButtonPress(void);
		void handleRenderDebugButtonPress(void);
		void handleSetSpawnPositionButtonPress(void);
		void handleSetSpawnPositionButtonPress(void);
		void handleShowUpsellScreen(bool);
		void handleSimTimePause(bool);
		void handleSimTimePause(bool);
		void handleSimTimeScale(float);
		void handleSimTimeScale(float);
		void handleSlotSelectButtonPress(int);
		void handleSlotSelectButtonPress(int);
		void handleStickCursorButtonPress(void);
		void handleStickCursorButtonPress(void);
		void handleStickCursorButtonRelease(void);
		void handleStickCursorButtonRelease(void);
		void handleSuspendResumeButtonPress(void);
		void handleSuspendResumeButtonPress(void);
		void handleTextChar(std::string const&,bool);
		void handleTextChar(std::string const&,bool);
		void handleTimeStepForwardButtonPress(void);
		void handleTimeStepForwardButtonPress(void);
		void handleToggleAdvancedCullingButtonPress(void);
		void handleToggleAdvancedCullingButtonPress(void);
		void handleToggleDayCycleActiveButtonPress(void);
		void handleToggleDayCycleActiveButtonPress(void);
		void handleToggleEnableNewScreensDebugButtonPress(void);
		void handleToggleEnableNewScreensDebugButtonPress(void);
		void handleToggleFlyFlastButtonPress(void);
		void handleToggleFlyFlastButtonPress(void);
		void handleToggleFrameTimerDisplayButtonPress(void);
		void handleToggleFrameTimerDisplayButtonPress(void);
		void handleToggleGameModeButtonPress(void);
		void handleToggleGameModeButtonPress(void);
		void handleToggleLivingroomButtonRelease(void);
		void handleToggleLivingroomButtonRelease(void);
		void handleToggleNoClipButtonPress(void);
		void handleToggleNoClipButtonPress(void);
		void handleTogglePlayerUpdateMobsButtonPress(void);
		void handleTogglePlayerUpdateMobsButtonPress(void);
		void handleToggleShowChunkMapButtonPress(void);
		void handleToggleShowChunkMapButtonPress(void);
		void handleToggleSimulateTouchButtonPress(void);
		void handleToggleSimulateTouchButtonPress(void);
		void handleToggleTexelAAButtonPress(void);
		void handleToggleTexelAAButtonPress(void);
		void handleToggleThirdPersonViewButtonPress(void);
		void handleToggleThirdPersonViewButtonPress(void);
		void handleUIScalingRuleChange(void);
		void handleUIScalingRuleChange(void);
		void handleVectorInput(short,float,float,float);
		void init(void);
		void init(void);
		void initFoliageAndBlockTextureTessellator(void);
		void initFoliageAndBlockTextureTessellator(void);
		void initOptionObservers(void);
		void initOptionObservers(void);
		void initTelemetry(void);
		void initializeTrialWorld(Player *);
		void initializeTrialWorld(Player *);
		void isEduMode(void);
		void isEduMode(void);
		void isInBedScreen(void);
		void isInBedScreen(void);
		void isInGame(void);
		void isInGame(void);
		void isKindleFire(int);
		void isKindleFire(int);
		void isLaunchedFromOculusApp(void);
		void isNotVLRMode(void);
		void isNotVLRMode(void);
		void isRealityFullVRMode(void);
		void isRealityFullVRMode(void);
		void isSRPlacementMode(void);
		void isSRPlacementMode(void);
		void isScreenReplaceable(void);
		void isServerVisible(void);
		void isShowingMenu(void);
		void isShowingMenu(void);
		void isUserSignedIn(void);
		void isUserSignedIn(void);
		void joinLiveGame(std::string const&);
		void joinLiveGame(std::string const&);
		void joinMultiplayer(std::string,int);
		void joinRealmsGame(char const*,int);
		void joinRealmsGame(char const*,int);
		void leaveGame(bool);
		void leaveGame(bool);
		void muteAudio(void);
		void muteAudio(void);
		void newDictationDataAvailable(void);
		void newDictationDataAvailable(void);
		void onAppFocusGained(void);
		void onAppFocusGained(void);
		void onAppFocusLost(void);
		void onAppFocusLost(void);
		void onAppResumed(void);
		void onAppResumed(void);
		void onAppSuspended(void);
		void onAppSuspended(void);
		void onClientStartedLevel(std::unique_ptr<Level,std::default_delete<Level>>,std::unique_ptr<LocalPlayer,std::default_delete<LocalPlayer>>);
		void onClientStartedLevel(std::unique_ptr<Level,std::default_delete<Level>>,std::unique_ptr<LocalPlayer,std::default_delete<LocalPlayer>>);
		void onDimensionChanged(void);
		void onDimensionChanged(void);
		void onGameEventNotification(ui::GameEventNotification);
		void onGameEventNotification(ui::GameEventNotification);
		void onGameModeChanged(void);
		void onGameModeChanged(void);
		void onGameSessionReset(void);
		void onGameSessionReset(void);
		void onInternetUpdate(void);
		void onInternetUpdate(void);
		void onLevelCorrupt(void);
		void onLevelCorrupt(void);
		void onLevelExit(void);
		void onLevelExit(void);
		void onLowMemory(void);
		void onLowMemory(void);
		void onMobEffectsChange(void);
		void onMobEffectsChange(void);
		void onPlayerLoaded(Player &);
		void onPlayerLoaded(Player &);
		void onPrepChangeDimension(void);
		void onPrepChangeDimension(void);
		void onPushNotificationReceived(PushNotificationMessage const&);
		void onPushNotificationReceived(PushNotificationMessage const&);
		void onResourcesLoaded(void);
		void onResourcesLoaded(void);
		void onTick(int,int);
		void onTick(int,int);
		void onUserSignin(void);
		void onUserSignin(void);
		void onUserSignout(void);
		void play(std::string const&,Vec3 const&,float,float);
		void play(std::string const&,Vec3 const&,float,float);
		void playUI(std::string const&,float,float);
		void playUI(std::string const&,float,float);
		void popScreen(int);
		void popScreen(int);
		void pushScreen(std::shared_ptr<AbstractScreen>,bool);
		void pushScreen(std::shared_ptr<AbstractScreen>,bool);
		void refocusMouse(void);
		void registerUpsellScreen(void);
		void registerUpsellScreen(void);
		void releaseMouse(void);
		void reloadShaders(void);
		void reloadShaders(void);
		void repopulatePlayScreenWorlds(void);
		void repopulatePlayScreenWorlds(void);
		void requestScreenshot(std::string const&);
		void requestScreenshot(std::string const&);
		void resetInhibitInputDueToTextBoxMode(void);
		void resetInput(void);
		void resetInput(void);
		void restartServer(void);
		void restartServer(void);
		void sendLocalMessage(std::string const&,std::string const&);
		void setCameraEntity(Entity *);
		void setCameraEntity(Entity *);
		void setCameraTargetEntity(Entity *);
		void setCameraTargetEntity(Entity *);
		void setDeferRenderingUntilChunksReady(void);
		void setDpadScale(float);
		void setEduMode(bool);
		void setEduMode(bool);
		void setGameMode(GameType);
		void setGameMode(GameType);
		void setHoloInput(std::unique_ptr<HolographicPlatform,std::default_delete<HolographicPlatform>>);
		void setHoloMode(HoloGameMode);
		void setHoloMode(HoloGameMode);
		void setHoloscreenHalfWidth(float);
		void setHoloscreenHalfWidth(float);
		void setHoloviewerPlayerMode(bool,bool);
		void setHoloviewerPlayerMode(bool,bool);
		void setInhibitInputDueToTextBoxMode(void);
		void setKeyboardForcedHeight(float);
		void setLaunchedFromOculusApp(bool);
		void setLaunchedFromOculusApp(bool);
		void setRenderingSize(int,int);
		void setRenderingSize(int,int);
		void setSuspendInput(bool);
		void setSuspendInput(bool);
		void setTextboxText(std::string const&);
		void setTextboxText(std::string const&);
		void setUISizeAndScale(int,int,float);
		void setUISizeAndScale(int,int,float);
		void setVoiceSystem(std::unique_ptr<VoiceSystem,std::default_delete<VoiceSystem>>);
		void function<void ();
		void setupCommandParser(void);
		void setupLevelRendering(Level *,Dimension *,Entity *);
		void setupLevelRendering(Level *,Dimension *,Entity *);
		void setupRenderer(void);
		void setupRenderer(void);
		void setupStartMenuScreenCommandParser(void);
		void startFrame(void);
		void startFrame(void);
		void startHoloviewerReveal(void);
		void startHoloviewerReveal(void);
		void startLocalServer(std::string,std::string,LevelSettings);
		void startLocalServer(std::string,std::string,LevelSettings);
		void teardownRenderer(void);
		void teardownRenderer(void);
		void tickBuildAction(void);
		void tickBuildAction(void);
		void tickInput(void);
		void transformResolution(int *,int *);
		void unMuteAudio(void);
		void unMuteAudio(void);
		void update(void);
		void update(void);
		void updateGraphics(Timer const&);
		void updateGraphics(Timer const&);
		void updateScheduledScreen(void);
		void updateScheduledScreen(void);
		void updateStats(void);
		void useController(void);
		void useController(void);
		void useTouchscreen(void);
		void useTouchscreen(void);
		void validateLocalLevel(std::string,std::string,LevelSettings);
		void vibrate(int);
		void vibrate(int);
		void ~MinecraftClient();
		void ~MinecraftClient();
		void ~MinecraftClient();
		void ~MinecraftClient();
};

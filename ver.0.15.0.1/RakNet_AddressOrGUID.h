#pragma once
namespace RakNet{
	class AddressOrGUID{
		public:
		void AddressOrGUID(RakNet::Packet *);
		void ToInteger(RakNet::AddressOrGUID const&);
		void ToString(bool);
		void ToString(bool,char *);
		void BPSTracker(void);
		void ClearExpired1(ulong long);
		void GetTotal1(void);
		void Reset(char const*,uint);
		void TimeAndValue2(ulong long,ulong long);
		void TimeAndValue2(void);
		void ~TimeAndValue2();
		void ~BPSTracker();
		void AddBitsAndReallocate(uint);
		void AddBitsAndReallocate(uint);
		void AssertCopyData(void);
		void AssertStreamEmpty(void);
		void BitStream(uchar *,uint,bool);
		void BitStream(uchar *,uint,bool);
		void BitStream(uint);
		void BitStream(uint);
		void BitStream(void);
		void BitStream(void);
		void CopyData(uchar **);
		void CopyData(uchar **);
		void DestroyInstance(RakNet::BitStream*);
		void EndianSwapBytes(int,int);
		void GetInstance(void);
		void GetNumberOfBitsAllocated(void);
		void IgnoreBits(uint);
		void IgnoreBits(uint);
		void IgnoreBytes(uint);
		void IgnoreBytes(uint);
		void IsNetworkOrderInternal(void);
		void IsNetworkOrderInternal(void);
		void NumberOfLeadingZeroes(int);
		void NumberOfLeadingZeroes(long long);
		void NumberOfLeadingZeroes(short);
		void NumberOfLeadingZeroes(signed char);
		void NumberOfLeadingZeroes(uchar);
		void NumberOfLeadingZeroes(uint);
		void NumberOfLeadingZeroes(ulong long);
		void NumberOfLeadingZeroes(ushort);
		void PadWithZeroToByteLength(uint);
		void PadWithZeroToByteLength(uint);
		void PrintBits(char *);
		void PrintHex(char *);
		void Read(RakNet::BitStream&);
		void Read(RakNet::BitStream&,uint);
		void Read(RakNet::BitStream&,uint);
		void Read(RakNet::BitStream*);
		void Read(RakNet::BitStream*,uint);
		void Read(char *);
		void Read(char *,uint);
		void Read(char *,uint);
		void Read(uchar *);
		void ReadAlignedBytes(uchar *,uint);
		void ReadAlignedBytes(uchar *,uint);
		void ReadAlignedBytesSafe(char *,int &,int);
		void ReadAlignedBytesSafe(char *,uint &,uint);
		void ReadAlignedBytesSafe(char *,uint &,uint);
		void ReadAlignedBytesSafeAlloc(char **,int &,uint);
		void ReadAlignedBytesSafeAlloc(char **,uint &,uint);
		void ReadAlignedBytesSafeAlloc(char **,uint &,uint);
		void ReadAlignedVar16(char *);
		void ReadAlignedVar16(char *);
		void ReadAlignedVar32(char *);
		void ReadAlignedVar32(char *);
		void ReadAlignedVar8(char *);
		void ReadAlignedVar8(char *);
		void ReadBit(void);
		void ReadBit(void);
		void ReadBits(uchar *,uint,bool);
		void ReadBits(uchar *,uint,bool);
		void ReadCompressed(uchar *,uint,bool);
		void ReadCompressed(uchar *,uint,bool);
		void ReadFloat16(float &,float,float);
		void Reset(void);
		void Reset(void);
		void ResetReadPointer(void);
		void ResetReadPointer(void);
		void ResetWritePointer(void);
		void ResetWritePointer(void);
		void ReverseBytes(uchar *,uchar *,uint);
		void ReverseBytes(uchar *,uchar *,uint);
		void ReverseBytesInPlace(uchar *,uint);
		void SerializeFloat16(bool,float &,float,float);
		void SetData(uchar *);
		void SetNumberOfBitsAllocated(uint);
		void SetWriteOffset(uint);
		void SetWriteOffset(uint);
		void Write(RakNet::BitStream&);
		void Write(RakNet::BitStream&,uint);
		void Write(RakNet::BitStream&,uint);
		void Write(RakNet::BitStream*);
		void Write(RakNet::BitStream*,uint);
		void Write(RakNet::BitStream*,uint);
		void Write(char const*,uint);
		void Write(char const*,uint);
		void Write0(void);
		void Write0(void);
		void Write1(void);
		void Write1(void);
		void WriteAlignedBytes(uchar const*,uint);
		void WriteAlignedBytes(uchar const*,uint);
		void WriteAlignedBytesSafe(char const*,uint,uint);
		void WriteAlignedVar16(char const*);
		void WriteAlignedVar16(char const*);
		void WriteAlignedVar32(char const*);
		void WriteAlignedVar32(char const*);
		void WriteAlignedVar8(char const*);
		void WriteAlignedVar8(char const*);
		void WriteBits(uchar const*,uint,bool);
		void WriteBits(uchar const*,uint,bool);
		void WriteCompressed(uchar const*,uint,bool);
		void WriteCompressed(uchar const*,uint,bool);
		void WriteFloat16(float,float,float);
		void ~BitStream();
		void ~BitStream();
		void CCRakNetSlidingWindow(void);
		void CCRakNetSlidingWindow(void);
		void GetAndIncrementNextDatagramSequenceNumber(void);
		void GetAndIncrementNextDatagramSequenceNumber(void);
		void GetBytesPerSecondLimitByCongestionControl(void);
		void GetBytesPerSecondLimitByCongestionControl(void);
		void GetLocalReceiveRate(ulong long);
		void GetMTU(void);
		void GetMTU(void);
		void GetNextDatagramSequenceNumber(void);
		void GetNextDatagramSequenceNumber(void);
		void GetRTOForRetransmission(uchar);
		void GetRTOForRetransmission(uchar);
		void GetRTT(void);
		void GetRetransmissionBandwidth(ulong long,ulong long,uint,bool);
		void GetRetransmissionBandwidth(ulong long,ulong long,uint,bool);
		void GetSenderRTOForACK(void);
		void GetTransmissionBandwidth(ulong long,ulong long,uint,bool);
		void GetTransmissionBandwidth(ulong long,ulong long,uint,bool);
		void GreaterThan(RakNet::uint24_t,RakNet::uint24_t);
		void Init(ulong long,uint);
		void Init(ulong long,uint);
		void IsInSlowStart(void);
		void IsInSlowStart(void);
		void LessThan(RakNet::uint24_t,RakNet::uint24_t);
		void LessThan(RakNet::uint24_t,RakNet::uint24_t);
		void OnAck(ulong long,ulong long,bool,double,double,double,bool,RakNet::uint24_t);
		void OnAck(ulong long,ulong long,bool,double,double,double,bool,RakNet::uint24_t);
		void OnDuplicateAck(ulong long,RakNet::uint24_t);
		void OnGotPacket(RakNet::uint24_t,bool,ulong long,uint,uint *);
		void OnGotPacket(RakNet::uint24_t,bool,ulong long,uint,uint *);
		void OnGotPacketPair(RakNet::uint24_t,uint,ulong long);
		void OnGotPacketPair(RakNet::uint24_t,uint,ulong long);
		void OnNAK(ulong long,RakNet::uint24_t);
		void OnNAK(ulong long,RakNet::uint24_t);
		void OnResend(ulong long,ulong long);
		void OnResend(ulong long,ulong long);
		void OnSendAck(ulong long,uint);
		void OnSendAck(ulong long,uint);
		void OnSendAckGetBAndAS(ulong long,bool *,double *,double *);
		void OnSendAckGetBAndAS(ulong long,bool *,double *,double *);
		void OnSendBytes(ulong long,uint);
		void OnSendBytes(ulong long,uint);
		void OnSendNACK(ulong long,uint);
		void SetMTU(uint);
		void ShouldSendACKs(ulong long,ulong long);
		void ShouldSendACKs(ulong long,ulong long);
		void Update(ulong long,bool);
		void Update(ulong long,bool);
		void ~CCRakNetSlidingWindow();
		void ~CCRakNetSlidingWindow();
		void GetTime(void);
		void GetTime(void);
		void GetTimeMS(void);
		void GetTimeMS(void);
		void GetTimeUS(void);
		void GetTimeUS(void);
		void GreaterThan(ulong long,ulong long);
		void DecodeArray(RakNet::BitStream *,uint,uint,uchar *);
		void DecodeArray(RakNet::BitStream *,uint,uint,uchar *);
		void EncodeArray(uchar *,uint,RakNet::BitStream *);
		void EncodeArray(uchar *,uint,RakNet::BitStream *);
		void FreeMemory(void);
		void FreeMemory(void);
		void GenerateFromFrequencyTable(uint *);
		void HuffmanEncodingTree(void);
		void HuffmanEncodingTree(void);
		void InsertNodeIntoSortedList(HuffmanEncodingTreeNode *,DataStructures::LinkedList<HuffmanEncodingTreeNode *> *);
		void ~HuffmanEncodingTree();
		void ~HuffmanEncodingTree();
		void LessThan(ulong long,ulong long);
		void Decrement(void);
		void Decrement(void);
		void Increment(void);
		void Increment(void);
		void LocklessUint32_t(uint);
		void LocklessUint32_t(void);
		void LocklessUint32_t(void);
		void NonNumericHostString(char const*);
		void NonNumericHostString(char const*);
		void AllocatePacketUnified(uint);
		void DeallocPacketUnified(RakNet::Packet *);
		void GetMyGUIDUnified(void);
		void OnAck(uint,RakNet::SystemAddress,uint);
		void OnAck(uint,RakNet::SystemAddress,uint);
		void OnAttach(void);
		void OnAttach(void);
		void OnClosedConnection(RakNet::SystemAddress const&,RakNet::RakNetGUID,RakNet::PI2_LostConnectionReason);
		void OnClosedConnection(RakNet::SystemAddress const&,RakNet::RakNetGUID,RakNet::PI2_LostConnectionReason);
		void OnDetach(void);
		void OnDetach(void);
		void OnDirectSocketReceive(char const*,uint,RakNet::SystemAddress);
		void OnDirectSocketReceive(char const*,uint,RakNet::SystemAddress);
		void OnDirectSocketSend(char const*,uint,RakNet::SystemAddress);
		void OnDirectSocketSend(char const*,uint,RakNet::SystemAddress);
		void OnFailedConnectionAttempt(RakNet::Packet *,RakNet::PI2_FailedConnectionAttemptReason);
		void OnFailedConnectionAttempt(RakNet::Packet *,RakNet::PI2_FailedConnectionAttemptReason);
		void OnInternalPacket(RakNet::InternalPacket *,uint,RakNet::SystemAddress,uint,int);
		void OnInternalPacket(RakNet::InternalPacket *,uint,RakNet::SystemAddress,uint,int);
		void OnNewConnection(RakNet::SystemAddress const&,RakNet::RakNetGUID,bool);
		void OnNewConnection(RakNet::SystemAddress const&,RakNet::RakNetGUID,bool);
		void OnPushBackPacket(char const*,uint,RakNet::SystemAddress);
		void OnPushBackPacket(char const*,uint,RakNet::SystemAddress);
		void OnRakPeerShutdown(void);
		void OnRakPeerShutdown(void);
		void OnRakPeerStartup(void);
		void OnRakPeerStartup(void);
		void OnReceive(RakNet::Packet *);
		void OnReceive(RakNet::Packet *);
		void OnReliabilityLayerNotification(char const*,uint,RakNet::SystemAddress,bool);
		void OnReliabilityLayerNotification(char const*,uint,RakNet::SystemAddress,bool);
		void PluginInterface2(void);
		void PushBackPacketUnified(RakNet::Packet *,bool);
		void SendUnified(RakNet::BitStream const*,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool);
		void SendUnified(char const*,int,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool);
		void SendUnified(char const*,int,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool);
		void SetRakPeerInterface(RakNet::RakPeerInterface *);
		void SetRakPeerInterface(RakNet::RakPeerInterface *);
		void SetTCPInterface(RakNet::TCPInterface *);
		void SetTCPInterface(RakNet::TCPInterface *);
		void Update(void);
		void Update(void);
		void UsesReliabilityLayer(void);
		void UsesReliabilityLayer(void);
		void ~PluginInterface2();
		void ~PluginInterface2();
		void ~PluginInterface2();
		void ~PluginInterface2();
		void ProcessOfflineNetworkPacket(RakNet::SystemAddress,char const*,int,RakNet::RakPeer *,RakNet::RakNetSocket2 *,bool *,ulong long);
		void ProcessOfflineNetworkPacket(RakNet::SystemAddress,char const*,int,RakNet::RakPeer *,RakNet::RakNetSocket2 *,bool *,ulong long);
		void BindSharedIPV4(RakNet::RNS2_BerkleyBindParameters *,char const*,uint);
		void BindSharedIPV4(RakNet::RNS2_BerkleyBindParameters *,char const*,uint);
		void BindSharedIPV4And6(RakNet::RNS2_BerkleyBindParameters *,char const*,uint);
		void BlockOnStopRecvPollingThread(void);
		void CreateRecvPollingThread(int);
		void CreateRecvPollingThread(int);
		void GetBindings(void);
		void GetSocket(void);
		void GetSystemAddressIPV4And6(int,RakNet::SystemAddress *);
		void RNS2_Berkley(void);
		void RecvFromBlockingIPV4And6(RakNet::RNS2RecvStruct *);
		void RecvFromLoop(void *);
		void RecvFromLoopInt(void);
		void SetBroadcastSocket(int);
		void SetDoNotFragment(int);
		void SetDoNotFragment(int);
		void SetIPHdrIncl(int);
		void SetNonBlockingSocket(ulong);
		void SetSocketOptions(void);
		void SignalStopRecvPollingThread(void);
		void SignalStopRecvPollingThread(void);
		void ~RNS2_Berkley();
		void ~RNS2_Berkley();
		void ~RNS2_Berkley();
		void ~RNS2_Berkley();
		void Bind(RakNet::RNS2_BerkleyBindParameters *,char const*,uint);
		void GetMyIP(RakNet::SystemAddress *);
		void Send(RakNet::RNS2_SendParameters *,char const*,uint);
		void Send(RakNet::RNS2_SendParameters *,char const*,uint);
		void ~RNS2_Linux();
		void ~RNS2_Linux();
		void Send_Windows_Linux_360NoVDP(int,RakNet::RNS2_SendParameters *,char const*,uint);
		void Send_Windows_Linux_360NoVDP(int,RakNet::RNS2_SendParameters *,char const*,uint);
		void FromString(char const*);
		void FromString(char const*);
		RakNetGUID(void);
		RakNetGUID(void);
		void ToString(char *);
		void ToString(void);
		void ToString(void);
		void ToUint32(RakNet::RakNetGUID const&);
		void ToUint32(RakNet::RakNetGUID const&);
		void operator!=(RakNet::RakNetGUID const&);
		void operator!=(RakNet::RakNetGUID const&);
		void operator<(RakNet::RakNetGUID const&);
		void operator<(RakNet::RakNetGUID const&);
		void operator==(RakNet::RakNetGUID const&);
		void operator==(RakNet::RakNetGUID const&);
		void operator>(RakNet::RakNetGUID const&);
		void FillBufferMT(void *,uint);
		void FrandomMT(void);
		RakNetRandom(void);
		RakNetRandom(void);
		void RandomMT(void);
		void ReloadMT(void);
		void SeedMT(uint);
		void SeedMT(uint);
		void ~RakNetRandom();
		void DomainNameToIP(char const*,char *);
		void DomainNameToIP(char const*,char *);
		void GetBoundAddress(void);
		void GetBoundAddress(void);
		void GetEventHandler(void);
		void GetMyIP(RakNet::SystemAddress *);
		void GetMyIP(RakNet::SystemAddress *);
		void GetSocketType(void);
		void GetUserConnectionSocketIndex(void);
		void GetUserConnectionSocketIndex(void);
		void IsBerkleySocket(void);
		void IsBerkleySocket(void);
		RakNetSocket2(void);
		void SetRecvEventHandler(RakNet::RNS2EventHandler *);
		void SetSocketType(RakNet::RNS2Type);
		void SetUserConnectionSocketIndex(uint);
		void SetUserConnectionSocketIndex(uint);
		void ~RakNetSocket2();
		void ~RakNetSocket2();
		void ~RakNetSocket2();
		void ~RakNetSocket2();
		void AllocRNS2(void);
		void AllocRNS2(void);
		void DeallocRNS2(RakNet::RakNetSocket2 *);
		void DeallocRNS2(RakNet::RakNetSocket2 *);
		void AddToActiveSystemList(uint);
		void AddToBanList(char const*,uint);
		void AddToBanList(char const*,uint);
		void AddToSecurityExceptionList(char const*);
		void AddToSecurityExceptionList(char const*);
		void AdvertiseSystem(char const*,ushort,char const*,int,uint);
		void AllocPacket(uint,char const*,uint);
		void AllocPacket(uint,uchar *,char const*,uint);
		void AllocRNS2RecvStruct(char const*,uint);
		void AllocRNS2RecvStruct(char const*,uint);
		void AllocatePacket(uint);
		void AllocatePacket(uint);
		void AllowConnectionResponseIPMigration(bool);
		void AllowConnectionResponseIPMigration(bool);
		void AllowIncomingConnections(void);
		void ApplyNetworkSimulator(float,ushort,ushort);
		void ApplyNetworkSimulator(float,ushort,ushort);
		void AssignSystemAddressToRemoteSystemList(RakNet::SystemAddress,RakNet::RakPeer::RemoteSystemStruct::ConnectMode,RakNet::RakNetSocket2 *,bool *,RakNet::SystemAddress,int,RakNet::RakNetGUID,bool);
		void AttachPlugin(RakNet::PluginInterface2 *);
		void AttachPlugin(RakNet::PluginInterface2 *);
		void CallPluginCallbacks(DataStructures::List<RakNet::PluginInterface2 *> &,RakNet::Packet *);
		void CallPluginCallbacks(DataStructures::List<RakNet::PluginInterface2 *> &,RakNet::Packet *);
		void CancelConnectionAttempt(RakNet::SystemAddress);
		void ChangeSystemAddress(RakNet::RakNetGUID,RakNet::SystemAddress const&);
		void ChangeSystemAddress(RakNet::RakNetGUID,RakNet::SystemAddress const&);
		void ClearBanList(void);
		void ClearBanList(void);
		void ClearBufferedCommands(void);
		void ClearBufferedCommands(void);
		void ClearBufferedPackets(void);
		void ClearBufferedPackets(void);
		void ClearRemoteSystemLookup(void);
		void ClearRemoteSystemLookup(void);
		void ClearRequestedConnectionList(void);
		void ClearRequestedConnectionList(void);
		void ClearSocketQueryOutput(void);
		void CloseConnection(RakNet::AddressOrGUID,bool,uchar,PacketPriority);
		void CloseConnectionInternal(RakNet::AddressOrGUID const&,bool,bool,uchar,PacketPriority);
		void CloseConnectionInternal(RakNet::AddressOrGUID const&,bool,bool,uchar,PacketPriority);
		void Connect(char const*,ushort,char const*,int,RakNet::PublicKey *,uint,uint,uint,uint);
		void Connect(char const*,ushort,char const*,int,RakNet::PublicKey *,uint,uint,uint,uint);
		void ConnectWithSocket(char const*,ushort,char const*,int,RakNet::RakNetSocket2 *,RakNet::PublicKey *,uint,uint,uint);
		void ConnectWithSocket(char const*,ushort,char const*,int,RakNet::RakNetSocket2 *,RakNet::PublicKey *,uint,uint,uint);
		void DeallocRNS2RecvStruct(RakNet::RNS2RecvStruct *,char const*,uint);
		void DeallocRNS2RecvStruct(RakNet::RNS2RecvStruct *,char const*,uint);
		void DeallocatePacket(RakNet::Packet *);
		void DeallocatePacket(RakNet::Packet *);
		void DerefAllSockets(void);
		void DereferenceRemoteSystem(RakNet::SystemAddress const&);
		void DetachPlugin(RakNet::PluginInterface2 *);
		void DetachPlugin(RakNet::PluginInterface2 *);
		void DisableSecurity(void);
		void DisableSecurity(void);
		void FillIPList(void);
		void GenerateGUID(void);
		void GenerateSeedFromGuid(void);
		void GetAveragePing(RakNet::AddressOrGUID);
		void GetBestClockDifferential(RakNet::SystemAddress);
		void GetClientPublicKeyFromSystemAddress(RakNet::SystemAddress,char *);
		void GetClientPublicKeyFromSystemAddress(RakNet::SystemAddress,char *);
		void GetClockDifferential(RakNet::AddressOrGUID);
		void GetClockDifferentialInt(RakNet::RakPeer::RemoteSystemStruct *);
		void GetConnectionList(RakNet::SystemAddress *,ushort *);
		void GetConnectionList(RakNet::SystemAddress *,ushort *);
		void GetConnectionState(RakNet::AddressOrGUID);
		void GetConnectionState(RakNet::AddressOrGUID);
		void GetExternalID(RakNet::SystemAddress);
		void GetGUIDFromIndex(uint);
		void GetGUIDFromIndex(uint);
		void GetGuidFromSystemAddress(RakNet::SystemAddress);
		void GetIncomingPassword(char *,int *);
		void GetIncomingPassword(char *,int *);
		void GetIndexFromGuid(RakNet::RakNetGUID);
		void GetIndexFromGuid(RakNet::RakNetGUID);
		void GetIndexFromSystemAddress(RakNet::SystemAddress);
		void GetIndexFromSystemAddress(RakNet::SystemAddress);
		void GetIndexFromSystemAddress(RakNet::SystemAddress,bool);
		void GetIndexFromSystemAddress(RakNet::SystemAddress,bool);
		void GetInternalID(RakNet::SystemAddress,int);
		void GetLastPing(RakNet::AddressOrGUID);
		void GetLocalIP(uint);
		void GetLocalIP(uint);
		void GetLoopbackAddress(void);
		void GetLowestPing(RakNet::AddressOrGUID);
		void GetMTUSize(RakNet::SystemAddress);
		void GetMaximumIncomingConnections(void);
		void GetMaximumIncomingConnections(void);
		void GetMaximumNumberOfPeers(void);
		void GetMaximumNumberOfPeers(void);
		void GetMyBoundAddress(int);
		void GetMyBoundAddress(int);
		void GetMyGUID(void);
		void GetMyGUID(void);
		void GetNextSendReceipt(void);
		void GetNextSendReceipt(void);
		void GetNumberOfAddresses(void);
		void GetNumberOfAddresses(void);
		void GetNumberOfRemoteInitiatedConnections(void);
		void GetOfflinePingResponse(char **,uint *);
		void GetOfflinePingResponse(char **,uint *);
		void GetRakNetSocketFromUserConnectionSocketIndex(uint);
		void GetReceiveBufferSize(void);
		void GetReceiveBufferSize(void);
		void GetRemoteSystem(RakNet::AddressOrGUID,bool,bool);
		void GetRemoteSystem(RakNet::AddressOrGUID,bool,bool);
		void GetRemoteSystem(RakNet::SystemAddress const&);
		void GetRemoteSystemFromGUID(RakNet::RakNetGUID,bool);
		void GetRemoteSystemFromSystemAddress(RakNet::SystemAddress,bool,bool);
		void GetRemoteSystemFromSystemAddress(RakNet::SystemAddress,bool,bool);
		void GetRemoteSystemIndex(RakNet::SystemAddress const&);
		void GetSocket(RakNet::SystemAddress);
		void GetSockets(DataStructures::List<RakNet::RakNetSocket2 *> &);
		void GetSockets(DataStructures::List<RakNet::RakNetSocket2 *> &);
		void GetSplitMessageProgressInterval(void);
		void GetSplitMessageProgressInterval(void);
		void GetStatistics(RakNet::SystemAddress,RakNet::RakNetStatistics *);
		void GetStatistics(RakNet::SystemAddress,RakNet::RakNetStatistics *);
		void GetStatistics(uint,RakNet::RakNetStatistics *);
		void GetStatistics(uint,RakNet::RakNetStatistics *);
		void GetStatisticsList(DataStructures::List<RakNet::SystemAddress> &,DataStructures::List<RakNet::RakNetGUID> &,DataStructures::List<RakNet::RakNetStatistics> &);
		void GetStatisticsList(DataStructures::List<RakNet::SystemAddress> &,DataStructures::List<RakNet::RakNetGUID> &,DataStructures::List<RakNet::RakNetStatistics> &);
		void GetSystemAddressFromGuid(RakNet::RakNetGUID);
		void GetSystemAddressFromGuid(RakNet::RakNetGUID);
		void GetSystemAddressFromIndex(uint);
		void GetSystemAddressFromIndex(uint);
		void GetSystemIndexFromGuid(RakNet::RakNetGUID);
		void GetSystemIndexFromGuid(RakNet::RakNetGUID);
		void GetSystemList(DataStructures::List<RakNet::SystemAddress> &,DataStructures::List<RakNet::RakNetGUID> &);
		void GetSystemList(DataStructures::List<RakNet::SystemAddress> &,DataStructures::List<RakNet::RakNetGUID> &);
		void GetTimeoutTime(RakNet::SystemAddress);
		void IncrementNextSendReceipt(void);
		void IncrementNextSendReceipt(void);
		void InitializeSecurity(char const*,char const*,bool);
		void InitializeSecurity(char const*,char const*,bool);
		void IsActive(void);
		void IsActive(void);
		void IsBanned(char const*);
		void IsBanned(char const*);
		void IsInSecurityExceptionList(char const*);
		void IsInSecurityExceptionList(char const*);
		void IsLocalIP(char const*);
		void IsLocalIP(char const*);
		void IsLoopbackAddress(RakNet::AddressOrGUID const&,bool);
		void IsNetworkSimulatorActive(void);
		void IsNetworkSimulatorActive(void);
		void NotifyAndFlagForShutdown(RakNet::SystemAddress,bool,uchar,PacketPriority);
		void NumberOfConnections(void);
		void NumberOfConnections(void);
		void OnConnectedPong(ulong long,ulong long,RakNet::RakPeer::RemoteSystemStruct *);
		void OnConnectionRequest(RakNet::RakPeer::RemoteSystemStruct *,ulong long);
		void OnRNS2Recv(RakNet::RNS2RecvStruct *);
		void OnRNS2Recv(RakNet::RNS2RecvStruct *);
		void ParseConnectionRequestPacket(RakNet::RakPeer::RemoteSystemStruct *,RakNet::SystemAddress const&,char const*,int);
		void Ping(RakNet::SystemAddress);
		void Ping(RakNet::SystemAddress);
		void Ping(char const*,ushort,bool,uint);
		void PingInternal(RakNet::SystemAddress,bool,PacketReliability);
		void PopBufferedPacket(void);
		void PushBackPacket(RakNet::Packet *,bool);
		void PushBackPacket(RakNet::Packet *,bool);
		void PushBufferedPacket(RakNet::RNS2RecvStruct *);
		void RakPeer(void);
		void RakPeer(void);
		void Receive(void);
		void Receive(void);
		void ReferenceRemoteSystem(RakNet::SystemAddress const&,uint);
		void ReleaseSockets(DataStructures::List<RakNet::RakNetSocket2 *> &);
		void ReleaseSockets(DataStructures::List<RakNet::RakNetSocket2 *> &);
		void RemoteSystemLookupHashIndex(RakNet::SystemAddress const&);
		void RemoveFromActiveSystemList(RakNet::SystemAddress const&);
		void RemoveFromBanList(char const*);
		void RemoveFromBanList(char const*);
		void RemoveFromSecurityExceptionList(char const*);
		void RemoveFromSecurityExceptionList(char const*);
		void ResetSendReceipt(void);
		void RunUpdateCycle(RakNet::BitStream &);
		void RunUpdateCycle(RakNet::BitStream &);
		void Send(RakNet::BitStream const*,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,uint);
		void Send(char const*,int,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,uint);
		void SendBuffered(char const*,uint,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,RakNet::RakPeer::RemoteSystemStruct::ConnectMode,uint);
		void SendBuffered(char const*,uint,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,RakNet::RakPeer::RemoteSystemStruct::ConnectMode,uint);
		void SendBufferedList(char const**,int const*,int,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,RakNet::RakPeer::RemoteSystemStruct::ConnectMode,uint);
		void SendBufferedList(char const**,int const*,int,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,RakNet::RakPeer::RemoteSystemStruct::ConnectMode,uint);
		void SendConnectionRequest(char const*,ushort,char const*,int,RakNet::PublicKey *,uint,uint,uint,uint,uint);
		void SendConnectionRequest(char const*,ushort,char const*,int,RakNet::PublicKey *,uint,uint,uint,uint,uint,RakNet::RakNetSocket2 *);
		void SendConnectionRequest(char const*,ushort,char const*,int,RakNet::PublicKey *,uint,uint,uint,uint,uint,RakNet::RakNetSocket2 *);
		void SendImmediate(char *,uint,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,bool,ulong long,uint);
		void SendList(char const**,int const*,int,PacketPriority,PacketReliability,char,RakNet::AddressOrGUID,bool,uint);
		void SendLoopback(char const*,int);
		void SendNatTraversalMessage(RakNet::SystemAddress);
		void SendOutOfBand(char const*,ushort,char const*,uint,uint);
		void SendTTL(char const*,ushort,int,uint);
		void SetIncomingDatagramEventHandler(bool (*);
		void SetIncomingDatagramEventHandler(bool (*);
		void SetIncomingPassword(char const*,int);
		void SetIncomingPassword(char const*,int);
		void SetInternalID(RakNet::SystemAddress,int);
		void SetLimitIPConnectionFrequency(bool);
		void SetLimitIPConnectionFrequency(bool);
		void SetMaximumIncomingConnections(ushort);
		void SetMaximumIncomingConnections(ushort);
		void SetOccasionalPing(bool);
		void SetOccasionalPing(bool);
		void SetOfflinePingResponse(char const*,uint);
		void SetOfflinePingResponse(char const*,uint);
		void SetPerConnectionOutgoingBandwidthLimit(uint);
		void SetPerConnectionOutgoingBandwidthLimit(uint);
		void SetSplitMessageProgressInterval(int);
		void SetSplitMessageProgressInterval(int);
		void SetTimeoutTime(uint,RakNet::SystemAddress);
		void SetUnreliableTimeout(uint);
		void SetUnreliableTimeout(uint);
		void SetUserUpdateThread(void (*);
		void SetUserUpdateThread(void (*);
		void SetupBufferedPackets(void);
		void ShiftIncomingTimestamp(uchar *,RakNet::SystemAddress const&);
		void Shutdown(uint,uchar,PacketPriority);
		void Startup(uint,RakNet::SocketDescriptor *,uint,int);
		void Startup(uint,RakNet::SocketDescriptor *,uint,int);
		void ValidateRemoteSystemLookup(void);
		void WriteOutOfBandHeader(RakNet::BitStream *);
		void ~RakPeer();
		void ~RakPeer();
		void ~RakPeer();
		void ~RakPeer();
		void DestroyInstance(RakNet::RakPeerInterface*);
		void DestroyInstance(RakNet::RakPeerInterface*);
		void Get64BitUniqueRandomNumber(void);
		void GetInstance(void);
		void GetInstance(void);
		void Allocate(uint);
		void Allocate(uint);
		void AppendBytes(char const*,uint);
		void Assign(char const*);
		void Assign(char const*,std::__va_list);
		void Assign(char const*,uint,uint);
		void Clear(void);
		void Clear(void);
		void Clone(void);
		void Clone(void);
		void ContainsNonprintableExceptSpaces(void);
		void Deserialize(RakNet::BitStream *);
		void Deserialize(RakNet::BitStream *);
		void Deserialize(char *,RakNet::BitStream *);
		void Deserialize(char *,RakNet::BitStream *);
		void DeserializeCompressed(RakNet::BitStream *,bool);
		void DeserializeCompressed(char *,RakNet::BitStream *,bool);
		void Erase(uint,uint);
		void FPrintf(__sFILE *);
		void Find(char const*,uint);
		void FormatForDELETE(char const*,char const*);
		void FormatForGET(char const*,char const*);
		void FormatForPOST(char const*,char const*,char const*,char const*);
		void FormatForPUT(char const*,char const*,char const*,char const*);
		void FormatForPUTOrPost(char const*,char const*,char const*,char const*,char const*);
		void FormatForPUTOrPost(char const*,char const*,char const*,char const*,char const*);
		void Free(void);
		void Free(void);
		void FreeMemory(void);
		void FreeMemoryNoMutex(void);
		void GetCharacterCount(char);
		void GetLength(void);
		void GetLength(void);
		void GetLengthUTF8(void);
		void IPAddressMatch(char const*);
		void IPAddressMatch(char const*);
		void IsEmailAddress(void);
		void IsEmpty(void);
		void IsEmpty(void);
		void LockMutex(void);
		void MakeFilePath(void);
		void NonVariadic(char const*);
		void Printf(void);
		void RakString(RakNet::RakString const&);
		void RakString(RakNet::RakString const&);
		void RakString(RakNet::RakString::SharedString *);
		void RakString(char const*,...);
		void RakString(char const*,...);
		void RakString(char);
		void RakString(uchar const*,...);
		void RakString(uchar);
		void RakString(void);
		void RakString(void);
		void RakStringComp(RakNet::RakString const&,RakNet::RakString const&);
		void Realloc(RakNet::RakString::SharedString *,uint);
		void RemoveCharacter(char);
		void Replace(uint,uint,uchar);
		void SQLEscape(void);
		void Serialize(RakNet::BitStream *);
		void Serialize(RakNet::BitStream *);
		void Serialize(char const*,RakNet::BitStream *);
		void Serialize(char const*,RakNet::BitStream *);
		void SerializeCompressed(RakNet::BitStream *,uchar,bool);
		void SerializeCompressed(char const*,RakNet::BitStream *,uchar,bool);
		void Set(char const*,...);
		void Set(char const*,...);
		void SetChar(uint,RakNet::RakString);
		void SetChar(uint,uchar);
		void SplitURI(RakNet::RakString&,RakNet::RakString&,RakNet::RakString&);
		void SplitURI(RakNet::RakString&,RakNet::RakString&,RakNet::RakString&);
		void StartAfterFirstCharacter(char);
		void StartAfterLastCharacter(char);
		void StrCmp(RakNet::RakString const&);
		void StrICmp(RakNet::RakString const&);
		void StrNCmp(RakNet::RakString const&,uint);
		void SubStr(uint,uint);
		void SubStr(uint,uint);
		void TerminateAtFirstCharacter(char);
		void TerminateAtLastCharacter(char);
		void ToInteger(RakNet::RakString const&);
		void ToInteger(char const*);
		void ToLower(uchar);
		void ToLower(void);
		void ToString(long long);
		void ToString(ulong long);
		void ToUpper(uchar);
		void ToUpper(void);
		void Truncate(uint);
		void TruncateUTF8(uint);
		void URLDecode(void);
		void URLEncode(void);
		void UnlockMutex(void);
		void operator!=(RakNet::RakString const&);
		void operator!=(char *);
		void operator!=(char const*);
		void operator+=(RakNet::RakString const&);
		void operator+=(RakNet::RakString const&);
		void operator+=(char *);
		void operator+=(char const*);
		void operator+=(char const*);
		void operator+=(char);
		void operator+=(uchar *);
		void operator+=(uchar const*);
		void operator<(RakNet::RakString const&);
		void operator<=(RakNet::RakString const&);
		void operator=(RakNet::RakString const&);
		void operator=(RakNet::RakString const&);
		void operator=(char *);
		void operator=(char *);
		void operator=(char const*);
		void operator=(char const*);
		void operator=(char);
		void operator=(uchar *);
		void operator=(uchar const*);
		void operator==(RakNet::RakString const&);
		void operator==(RakNet::RakString const&);
		void operator==(char *);
		void operator==(char const*);
		void operator>(RakNet::RakString const&);
		void operator>=(RakNet::RakString const&);
		void operator[](uint);
		void ~RakString();
		void ~RakString();
		void Create(void * (*);
		void Create(void * (*);
		void AckTimeout(ulong long);
		void AckTimeout(ulong long);
		void AddFirstToDatagramHistory(RakNet::uint24_t,RakNet::uint24_t,ulong long);
		void AddFirstToDatagramHistory(RakNet::uint24_t,RakNet::uint24_t,ulong long);
		void AddFirstToDatagramHistory(RakNet::uint24_t,ulong long);
		void AddFirstToDatagramHistory(RakNet::uint24_t,ulong long);
		void AddSubsequentToDatagramHistory(RakNet::ReliabilityLayer::MessageNumberNode *,RakNet::uint24_t);
		void AddToListTail(RakNet::InternalPacket *,bool);
		void AddToUnreliableLinkedList(RakNet::InternalPacket *);
		void AllocInternalPacketData(RakNet::InternalPacket *,RakNet::InternalPacketRefCountedData **,uchar *,uchar *);
		void AllocInternalPacketData(RakNet::InternalPacket *,uchar *);
		void AllocInternalPacketData(RakNet::InternalPacket *,uint,bool,char const*,uint);
		void AllocateFromInternalPacketPool(void);
		void ApplyNetworkSimulator(double,uint,uint);
		void AreAcksWaiting(void);
		void AreAcksWaiting(void);
		void BuildPacketFromSplitPacketList(RakNet::SplitPacketChannel *,ulong long);
		void BuildPacketFromSplitPacketList(RakNet::SplitPacketChannel *,ulong long);
		void BuildPacketFromSplitPacketList(ushort,ulong long,RakNet::RakNetSocket2 *,RakNet::SystemAddress &,RakNet::RakNetRandom *,RakNet::BitStream &);
		void BuildPacketFromSplitPacketList(ushort,ulong long,RakNet::RakNetSocket2 *,RakNet::SystemAddress &,RakNet::RakNetRandom *,RakNet::BitStream &);
		void ClearPacketsAndDatagrams(void);
		void ClearPacketsAndDatagrams(void);
		void CreateInternalPacketCopy(RakNet::InternalPacket *,int,int,ulong long);
		void CreateInternalPacketFromBitStream(RakNet::BitStream *,ulong long);
		void CreateInternalPacketFromBitStream(RakNet::BitStream *,ulong long);
		void FreeInternalPacketData(RakNet::InternalPacket *,char const*,uint);
		void FreeMemory(bool);
		void FreeThreadSafeMemory(void);
		void FreeThreadSafeMemory(void);
		void GetMaxDatagramSizeExcludingMessageHeaderBits(void);
		void GetMaxDatagramSizeExcludingMessageHeaderBytes(void);
		void GetMaxMessageHeaderLengthBits(void);
		void GetMessageHeaderLengthBits(RakNet::InternalPacket const*);
		void GetMessageNumberNodeByDatagramIndex(RakNet::uint24_t,ulong long *);
		void GetNextSendTime(void);
		void GetNextWeight(int);
		void GetResendListDataSize(void);
		void GetStatistics(RakNet::RakNetStatistics *);
		void GetStatistics(RakNet::RakNetStatistics *);
		void GetTimeBetweenPackets(void);
		void GetTimeoutTime(void);
		void GetTimeoutTime(void);
		void HandleSocketReceiveFromConnectedPlayer(char const*,uint,RakNet::SystemAddress &,DataStructures::List<RakNet::PluginInterface2 *> &,int,RakNet::RakNetSocket2 *,RakNet::RakNetRandom *,ulong long,RakNet::BitStream &);
		void InitHeapWeights(void);
		void InitializeVariables(void);
		void InitializeVariables(void);
		void InsertIntoSplitPacketList(RakNet::InternalPacket *,ulong long);
		void InsertIntoSplitPacketList(RakNet::InternalPacket *,ulong long);
		void InsertPacketIntoResendList(RakNet::InternalPacket *,ulong long,bool,bool);
		void IsDeadConnection(void);
		void IsDeadConnection(void);
		void IsOlderOrderedPacket(RakNet::uint24_t,RakNet::uint24_t);
		void IsOutgoingDataWaiting(void);
		void IsOutgoingDataWaiting(void);
		void IsResendQueueEmpty(void);
		void IsSendThrottled(int);
		void KillConnection(void);
		void MoveToListHead(RakNet::InternalPacket *);
		void PopListHead(bool);
		void PushDatagram(void);
		void PushDatagram(void);
		void PushPacket(ulong long,RakNet::InternalPacket *,bool);
		void PushPacket(ulong long,RakNet::InternalPacket *,bool);
		void Receive(uchar **);
		void Receive(uchar **);
		void ReleaseToInternalPacketPool(RakNet::InternalPacket *);
		void ReliabilityLayer(void);
		void ReliabilityLayer(void);
		void RemoveFromDatagramHistory(RakNet::uint24_t);
		void RemoveFromList(RakNet::InternalPacket *,bool);
		void RemoveFromUnreliableLinkedList(RakNet::InternalPacket *);
		void RemovePacketFromResendListAndDeleteOlderReliableSequenced(RakNet::uint24_t,ulong long,DataStructures::List<RakNet::PluginInterface2 *> &,RakNet::SystemAddress const&);
		void RemovePacketFromResendListAndDeleteOlderReliableSequenced(RakNet::uint24_t,ulong long,DataStructures::List<RakNet::PluginInterface2 *> &,RakNet::SystemAddress const&);
		void ResendBufferOverflow(void);
		void Reset(bool,int,bool);
		void Reset(bool,int,bool);
		void ResetPacketsAndDatagrams(void);
		void ResetPacketsAndDatagrams(void);
		void Send(char *,uint,PacketPriority,PacketReliability,uchar,bool,int,ulong long,uint);
		void Send(char *,uint,PacketPriority,PacketReliability,uchar,bool,int,ulong long,uint);
		void SendACKs(RakNet::RakNetSocket2 *,RakNet::SystemAddress &,ulong long,RakNet::RakNetRandom *,RakNet::BitStream &);
		void SendAcknowledgementPacket(RakNet::uint24_t,ulong long);
		void SetSplitMessageProgressInterval(int);
		void SetSplitMessageProgressInterval(int);
		void SetTimeoutTime(uint);
		void SetTimeoutTime(uint);
		void SetUnreliableTimeout(uint);
		void SetUnreliableTimeout(uint);
		void SplitPacket(RakNet::InternalPacket *);
		void TagMostRecentPushAsSecondOfPacketPair(void);
		void Update(RakNet::RakNetSocket2 *,RakNet::SystemAddress &,int,ulong long,uint,DataStructures::List<RakNet::PluginInterface2 *> &,RakNet::RakNetRandom *,RakNet::BitStream &);
		void UpdateWindowFromAck(ulong long);
		void UpdateWindowFromPacketloss(ulong long);
		void ValidateResendList(void);
		void WriteToBitStreamFromInternalPacket(RakNet::BitStream *,RakNet::InternalPacket const*,ulong long);
		void WriteToBitStreamFromInternalPacket(RakNet::BitStream *,RakNet::InternalPacket const*,ulong long);
		void ~ReliabilityLayer();
		void ~ReliabilityLayer();
		void Recv(char *,int);
		void Send(char const*,uint);
		void SendOrBuffer(char const**,uint const*,int);
		void SetActive(bool);
		void CloseEvent(void);
		void CloseEvent(void);
		void InitEvent(void);
		void InitEvent(void);
		void SetEvent(void);
		void SetEvent(void);
		void SignaledEvent(void);
		void SignaledEvent(void);
		void WaitOnEvent(int);
		void WaitOnEvent(int);
		void ~SignaledEvent();
		void ~SignaledEvent();
		void Init(void);
		void Lock(void);
		void Lock(void);
		void SimpleMutex(void);
		void SimpleMutex(void);
		void Unlock(void);
		void Unlock(void);
		void ~SimpleMutex();
		void ~SimpleMutex();
		void SocketDescriptor(ushort,char const*);
		void SocketDescriptor(ushort,char const*);
		void SocketDescriptor(void);
		void GetFirstBindableIP(char *,int);
		void GetMyIP(RakNet::SystemAddress *);
		void GetSubNetForSocketAndIp(RakNet::RakString);
		void GetSubNetForSocketAndIp(RakNet::RakString);
		void SetSocketOptions(int,bool,bool);
		void SetSocketOptions(int,bool,bool);
		void SplitPacketChannelComp(ushort const&,RakNet::SplitPacketChannel * const&);
		void StrAndBoolComp(char * const&,StrAndBool const&);
		void AddReference(void);
		void AddReference(void);
		void DecodeString(RakNet::RakString *,int,RakNet::BitStream *,uchar);
		void DecodeString(char *,int,RakNet::BitStream *,uchar);
		void DecodeString(char *,int,RakNet::BitStream *,uchar);
		void EncodeString(RakNet::RakString const*,int,RakNet::BitStream *,uchar);
		void EncodeString(char const*,int,RakNet::BitStream *,uchar);
		void GenerateTreeFromStrings(uchar *,uint,uchar);
		void Instance(void);
		void Instance(void);
		void RemoveReference(void);
		void RemoveReference(void);
		void StringCompressor(void);
		void ~StringCompressor();
		void AddReference(void);
		void AddReference(void);
		void AddString(char const*,bool);
		void DecodeString(char *,int,RakNet::BitStream *);
		void EncodeString(char const*,int,RakNet::BitStream *);
		void Instance(void);
		void LogStringNotFound(char const*);
		void RemoveReference(void);
		void RemoveReference(void);
		void StringTable(void);
		void ~StringTable();
		void CopyPort(RakNet::SystemAddress const&);
		void CopyPort(RakNet::SystemAddress const&);
		void EqualsExcludingPort(RakNet::SystemAddress const&);
		void EqualsExcludingPort(RakNet::SystemAddress const&);
		void FixForIPVersion(RakNet::SystemAddress const&);
		void FromString(char const*,char,int);
		void FromString(char const*,char,int);
		void FromStringExplicitPort(char const*,ushort,int);
		void FromStringExplicitPort(char const*,ushort,int);
		void GetIPPROTO(void);
		void GetIPPROTO(void);
		void GetIPVersion(void);
		void GetIPVersion(void);
		void GetPort(void);
		void GetPort(void);
		void GetPortNetworkOrder(void);
		void GetPortNetworkOrder(void);
		void IsLANAddress(void);
		void IsLoopback(void);
		void IsLoopback(void);
		void IsValidIPAddress(void);
		void IsValidIPAddress(void);
		void SetBinaryAddress(char const*,char);
		void SetBinaryAddress(char const*,char);
		void SetPort(ushort);
		void SetPortHostOrder(ushort);
		void SetPortHostOrder(ushort);
		void SetPortNetworkOrder(ushort);
		void SetPortNetworkOrder(ushort);
		void SetToLoopback(uchar);
		void SetToLoopback(void);
		void SystemAddress(char const*);
		void SystemAddress(char const*,ushort);
		void SystemAddress(char const*,ushort);
		void SystemAddress(void);
		void SystemAddress(void);
		void ToInteger(RakNet::SystemAddress const&);
		void ToInteger(RakNet::SystemAddress const&);
		void ToString(bool,char *,char);
		void ToString(bool,char *,char);
		void ToString(bool,char);
		void ToString(bool,char);
		void ToString_Old(bool,char *,char);
		void ToString_Old(bool,char *,char);
		void operator!=(RakNet::SystemAddress const&);
		void operator!=(RakNet::SystemAddress const&);
		void operator<(RakNet::SystemAddress const&);
		void operator<(RakNet::SystemAddress const&);
		void operator=(RakNet::SystemAddress const&);
		void operator=(RakNet::SystemAddress const&);
		void operator==(RakNet::SystemAddress const&);
		void operator==(RakNet::SystemAddress const&);
		void operator>(RakNet::SystemAddress const&);
		void size(void);
		void AllocatePacket(uint);
		void AllocatePacket(uint);
		void AttachPlugin(RakNet::PluginInterface2 *);
		void CloseConnection(RakNet::SystemAddress);
		void Connect(char const*,ushort,bool,ushort,char const*);
		void CreateListenSocket(ushort,ushort,ushort,char const*);
		void CreateListenSocket(ushort,ushort,ushort,char const*);
		void DeallocatePacket(RakNet::Packet *);
		void DeallocatePacket(RakNet::Packet *);
		void DestroyInstance(RakNet::TCPInterface*);
		void DetachPlugin(RakNet::PluginInterface2 *);
		void GetConnectionCount(void);
		void GetConnectionList(RakNet::SystemAddress *,ushort *);
		void GetInstance(void);
		void HasCompletedConnectionAttempt(void);
		void HasFailedConnectionAttempt(void);
		void HasLostConnection(void);
		void PushBackPacket(RakNet::Packet *,bool);
		void PushBackPacket(RakNet::Packet *,bool);
		void Receive(void);
		void Receive(void);
		void ReceiveHasPackets(void);
		void ReceiveHasPackets(void);
		void ReceiveInt(void);
		void ReceiveInt(void);
		void Send(char const*,uint,RakNet::SystemAddress const&,bool);
		void Send(char const*,uint,RakNet::SystemAddress const&,bool);
		void SendList(char const**,uint const*,int,RakNet::SystemAddress const&,bool);
		void SendList(char const**,uint const*,int,RakNet::SystemAddress const&,bool);
		void SocketConnect(char const*,ushort,ushort,char const*);
		void SocketConnect(char const*,ushort,ushort,char const*);
		void Start(ushort,ushort,ushort,int,ushort,char const*);
		void Start(ushort,ushort,ushort,int,ushort,char const*);
		void Stop(void);
		void Stop(void);
		void TCPInterface(void);
		void TCPInterface(void);
		void TCPInterface(void);
		void WasStarted(void);
		void WasStarted(void);
		void ~TCPInterface();
		void ~TCPInterface();
		void ~TCPInterface();
		void ~TCPInterface();
		void _DLMallocDirectMMap(uint);
		void _DLMallocDirectMMap(uint);
		void _DLMallocMMap(uint);
		void _DLMallocMMap(uint);
		void _DLMallocMUnmap(void *,uint);
		void _DLMallocMUnmap(void *,uint);
		void _RakFree(void *);
		void _RakFree(void *);
		void _RakFree_Ex(void *,char const*,uint);
		void _RakFree_Ex(void *,char const*,uint);
		void _RakMalloc(uint);
		void _RakMalloc(uint);
		void _RakMalloc_Ex(uint,char const*,uint);
		void _RakMalloc_Ex(uint,char const*,uint);
		void _RakRealloc(void *,uint);
		void _RakRealloc(void *,uint);
		void _RakRealloc_Ex(void *,uint,char const*,uint);
		void _RakRealloc_Ex(void *,uint,char const*,uint);
	}
};

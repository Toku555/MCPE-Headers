#pragma once
class PistonBlockEntity{
	public:
		PistonBlockEntity(BlockPos const&,bool);
		PistonBlockEntity(BlockPos const&,bool);
		void _attachedBlockWalker(BlockSource &,BlockPos const&,signed char,signed char);
		void _attachedBlockWalker(BlockSource &,BlockPos const&,signed char,signed char);
		void _checkAttachedBlocks(BlockSource &);
		void _checkAttachedBlocks(BlockSource &);
		void _checkInceptionAchievement(BlockEntity &,BlockSource &,BlockPos const&);
		void _checkInceptionAchievement(BlockEntity &,BlockSource &,BlockPos const&);
		void _clearBlockInfront(BlockSource &,BlockPos const&,BlockPos const&);
		void _clearBlockInfront(BlockSource &,BlockPos const&,BlockPos const&);
		void _expand(void);
		void _handleSlimeConnections(BlockSource &,BlockPos const&,signed char,signed char);
		void _handleSlimeConnections(BlockSource &,BlockPos const&,signed char,signed char);
		void _hasBlockAttached(BlockPos const&);
		void _moveCollidedEntities(BlockSource &);
		void _moveCollidedEntities(BlockSource &);
		void _retract(void);
		void _sortAttachedBlocks(BlockSource &);
		void _sortAttachedBlocks(BlockSource &);
		void _spawnBlocks(BlockSource &);
		void _spawnBlocks(BlockSource &);
		void _spawnMovingBlocks(BlockSource &);
		void _spawnMovingBlocks(BlockSource &);
		void forceUpsateRedstoneSignal(void);
		void forceUpsateRedstoneSignal(void);
		void getFacingDir(BlockSource &);
		void getFacingDir(BlockSource &);
		void getLastProgress(void);
		void getProgress(float);
		void getProgress(float);
		void getUpdatePacket(BlockSource &);
		void getUpdatePacket(BlockSource &);
		void handleRedstoneSignal(int);
		void handleRedstoneSignal(int);
		void isExpanded(void);
		void isExpanded(void);
		void isExpanding(void);
		void isMoving(void);
		void isRetracted(void);
		void isRetracted(void);
		void isRetracting(void);
		void isRetracting(void);
		void isSticky(void);
		void isSticky(void);
		void load(CompoundTag const&);
		void load(CompoundTag const&);
		void onRemoved(BlockSource &);
		void onRemoved(BlockSource &);
		void onUpdatePacket(CompoundTag &);
		void onUpdatePacket(CompoundTag &);
		void save(CompoundTag &);
		void save(CompoundTag &);
		void tick(BlockSource &);
		void tick(BlockSource &);
		void ~PistonBlockEntity();
		void ~PistonBlockEntity();
		void ~PistonBlockEntity();
		void ~PistonBlockEntity();
};

#pragma once
namespace xbox{
	class services{
		public:
		void _Deserialize(web::json::value const&);
		void achievement(std::string,std::string,std::string,std::vector<xbox::services::achievements::achievement_title_association,std::allocator<xbox::services::achievements::achievement_title_association>>,xbox::services::achievements::achievement_progress_state,std::vector<xbox::services::achievements::achievement_media_asset,std::allocator<xbox::services::achievements::achievement_media_asset>>,std::vector<std::string,std::allocator<std::string>>,bool,std::string,std::string,std::string,xbox::services::achievements::achievement_type,xbox::services::achievements::achievement_participation_type,xbox::services::achievements::achievement_time_window,std::vector<xbox::services::achievements::achievement_reward,std::allocator<xbox::services::achievements::achievement_reward>>,std::chrono::duration<long long,std::ratio<1ll,1ll>>,std::string,bool,xbox::services::achievements::achievement_progression);
		void achievement(void);
		void achievement(void);
		void achievement(void);
		void achievement(xbox::services::achievements::achievement const&);
		void achievement(xbox::services::achievements::achievement const&);
		void achievement(xbox::services::achievements::achievement&&);
		void achievement(xbox::services::achievements::achievement&&);
		void available(void);
		void deep_link(void);
		void estimated_unlock_time(void);
		void id(void);
		void id(void);
		void is_revoked(void);
		void is_secret(void);
		void is_secret(void);
		void locked_description(void);
		void locked_description(void);
		void media_assets(void);
		void media_assets(void);
		void name(void);
		void name(void);
		void operator=(xbox::services::achievements::achievement const&);
		void operator=(xbox::services::achievements::achievement const&);
		void participation_type(void);
		void platforms_available_on(void);
		void product_id(void);
		void progress_state(void);
		void progress_state(void);
		void progression(void);
		void progression(void);
		void rewards(void);
		void rewards(void);
		void service_configuration_id(void);
		void title_associations(void);
		void type(void);
		void unlocked_description(void);
		void unlocked_description(void);
		void ~achievement();
		void ~achievement();
		void _Convert_string_to_media_asset_type(std::string const&);
		void _Convert_string_to_media_asset_type(std::string const&);
		void _Deserialize(web::json::value const&);
		void achievement_media_asset(std::string,xbox::services::achievements::achievement_media_asset_type,web::uri);
		void achievement_media_asset(void);
		void achievement_media_asset(void);
		void achievement_media_asset(void);
		void media_asset_type(void);
		void name(void);
		void operator=(xbox::services::achievements::achievement_media_asset const&);
		void operator=(xbox::services::achievements::achievement_media_asset const&);
		void url(void);
		void url(void);
		void _Deserialize(web::json::value const&);
		void achievement_progression(std::vector<xbox::services::achievements::achievement_requirement,std::allocator<xbox::services::achievements::achievement_requirement>>,utility::datetime);
		void achievement_progression(void);
		void achievement_progression(void);
		void requirements(void);
		void requirements(void);
		void time_unlocked(void);
		void time_unlocked(void);
		void _Deserialize(web::json::value const&);
		void achievement_requirement(std::string,std::string,std::string);
		void achievement_requirement(void);
		void current_progress_value(void);
		void current_progress_value(void);
		void id(void);
		void target_progress_value(void);
		void target_progress_value(void);
		void _Deserialize(web::json::value const&);
		void achievement_reward(std::string,std::string,std::string,xbox::services::achievements::achievement_reward_type,std::string,xbox::services::achievements::achievement_media_asset);
		void achievement_reward(void);
		void achievement_reward(void);
		void achievement_reward(xbox::services::achievements::achievement_reward const&);
		void achievement_reward(xbox::services::achievements::achievement_reward const&);
		void convert_string_to_reward_type(std::string const&);
		void convert_string_to_reward_type(std::string const&);
		void description(void);
		void media_asset(void);
		void name(void);
		void reward_type(void);
		void reward_type(void);
		void value(void);
		void value(void);
		void value_type(void);
		void ~achievement_reward();
		void ~achievement_reward();
		void achievement_by_id_sub_path(std::string const&,std::string const&,std::string const&);
		void achievement_by_id_sub_path(std::string const&,std::string const&,std::string const&);
		void achievement_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void achievement_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void achievements_sub_path(std::string const&,std::vector<uint,std::allocator<uint>> const&,std::string const&,bool,std::string const&,uint,uint,std::string const&);
		void achievements_sub_path(std::string const&,std::vector<uint,std::allocator<uint>> const&,std::string const&,bool,std::string const&,uint,uint,std::string const&);
		void convert_order_by_to_string(xbox::services::achievements::achievement_order_by);
		void convert_order_by_to_string(xbox::services::achievements::achievement_order_by);
		void convert_type_to_string(xbox::services::achievements::achievement_type);
		void convert_type_to_string(xbox::services::achievements::achievement_type);
		void get_achievement(std::string const&,std::string const&,std::string const&);
		void get_achievements(std::string const&,std::vector<uint,std::allocator<uint>> const&,xbox::services::achievements::achievement_type,bool,xbox::services::achievements::achievement_order_by,uint,uint,std::string const&);
		void get_achievements(std::string const&,std::vector<uint,std::allocator<uint>> const&,xbox::services::achievements::achievement_type,bool,xbox::services::achievements::achievement_order_by,uint,uint,std::string const&);
		void get_achievements_for_title_id(std::string const&,uint,xbox::services::achievements::achievement_type,bool,xbox::services::achievements::achievement_order_by,uint,uint);
		void get_achievements_for_title_id(std::string const&,uint,xbox::services::achievements::achievement_type,bool,xbox::services::achievements::achievement_order_by,uint,uint);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void achievement_time_window(utility::datetime,utility::datetime);
		void achievement_time_window(void);
		void achievement_time_window(void);
		void end_date(void);
		void start_date(void);
		void _Deserialize(web::json::value const&);
		void achievement_title_association(std::string,uint);
		void achievement_title_association(void);
		void name(void);
		void title_id(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Init_next_page_info(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::string,std::vector<uint,std::allocator<uint>>,xbox::services::achievements::achievement_type,bool,xbox::services::achievements::achievement_order_by);
		void _Init_next_page_info(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::string,std::vector<uint,std::allocator<uint>>,xbox::services::achievements::achievement_type,bool,xbox::services::achievements::achievement_order_by);
		void achievements_result(void);
		void achievements_result(void);
		void achievements_result(xbox::services::achievements::achievements_result const&);
		void achievements_result(xbox::services::achievements::achievements_result const&);
		void get_next(uint);
		void get_next(uint);
		void has_next(void);
		void has_next(void);
		void items(void);
		void items(void);
		void operator=(xbox::services::achievements::achievements_result const&);
		void operator=(xbox::services::achievements::achievements_result const&);
		void operator=(xbox::services::achievements::achievements_result&&);
		void operator=(xbox::services::achievements::achievements_result&&);
		void ~achievements_result();
		void ~achievements_result();
		void _Deserialize(web::json::value const&);
		void contextual_config_result(std::vector<xbox::services::contextual_search::contextual_config_result_stat,std::allocator<xbox::services::contextual_search::contextual_config_result_stat>>,std::vector<xbox::services::contextual_search::contextual_config_result_metadata,std::allocator<xbox::services::contextual_search::contextual_config_result_metadata>>,std::vector<xbox::services::contextual_search::contextual_config_result_set,std::allocator<xbox::services::contextual_search::contextual_config_result_set>>);
		void contextual_config_result(void);
		void contextual_config_result(xbox::services::contextual_search::contextual_config_result const&);
		void contextual_config_result(xbox::services::contextual_search::contextual_config_result const&);
		void get_contextual_search_configured_stats(void);
		void get_contextual_search_configured_stats(void);
		void metadata_set(void);
		void sets(void);
		void stats(void);
		void ~contextual_config_result();
		void ~contextual_config_result();
		void _Deserialize(web::json::value const&);
		void contextual_config_result_metadata(std::string,std::string,bool,bool,xbox::services::contextual_search::contextual_search_stat_display_type,std::string,ulong long,ulong long);
		void contextual_config_result_metadata(void);
		void convert_string_to_display_type(std::string const&);
		void convert_string_to_display_type(std::string const&);
		void display_name(void);
		void filter(void);
		void name(void);
		void range_max(void);
		void range_min(void);
		void setname(void);
		void sort(void);
		void type(void);
		void _Deserialize(web::json::value const&);
		void contextual_config_result_set(std::string,std::unordered_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>);
		void contextual_config_result_set(void);
		void name(void);
		void values(void);
		void ~contextual_config_result_set();
		void ~contextual_config_result_set();
		void _Deserialize(web::json::value const&);
		void contextual_config_result_set_pair(std::string,std::string);
		void contextual_config_result_set_pair(void);
		void display_name(void);
		void stat_value(void);
		void _Deserialize(web::json::value const&);
		void contextual_config_result_stat(std::string,std::string,xbox::services::contextual_search::contextual_search_stat_visibility);
		void contextual_config_result_stat(void);
		void convert_string_to_visibility(std::string const&);
		void convert_string_to_visibility(std::string const&);
		void name(void);
		void type(void);
		void visibility(void);
		void _Deserialize(web::json::value const&);
		void broadcaster_id_from_provider(void);
		void contextual_search_broadcast(std::string,std::string,std::string,ulong long,utility::datetime,std::unordered_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>);
		void contextual_search_broadcast(void);
		void contextual_search_broadcast(void);
		void contextual_search_broadcast(xbox::services::contextual_search::contextual_search_broadcast const&);
		void contextual_search_broadcast(xbox::services::contextual_search::contextual_search_broadcast const&);
		void current_stats(void);
		void provider(void);
		void started_date(void);
		void viewers(void);
		xbox_user_id(void);
		void ~contextual_search_broadcast();
		void ~contextual_search_broadcast();
		void can_be_filtered(void);
		void can_be_sorted(void);
		void contextual_search_configured_stat(std::string,std::string,xbox::services::contextual_search::contextual_search_stat_visibility,std::string,bool,bool,xbox::services::contextual_search::contextual_search_stat_display_type,std::unordered_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>,ulong long,ulong long);
		void contextual_search_configured_stat(std::string,std::string,xbox::services::contextual_search::contextual_search_stat_visibility,std::string,bool,bool,xbox::services::contextual_search::contextual_search_stat_display_type,std::unordered_map<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>,ulong long,ulong long);
		void contextual_search_configured_stat(void);
		void contextual_search_configured_stat(xbox::services::contextual_search::contextual_search_configured_stat const&);
		void contextual_search_configured_stat(xbox::services::contextual_search::contextual_search_configured_stat const&);
		void data_type(void);
		void display_name(void);
		void display_type(void);
		void name(void);
		void range_max(void);
		void range_min(void);
		void value_to_display_name_map(void);
		void visibility(void);
		void ~contextual_search_configured_stat();
		void ~contextual_search_configured_stat();
		void contextual_search_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void contextual_search_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void convert_operator_to_string(xbox::services::contextual_search::contextual_search_filter_operator);
		void convert_operator_to_string(xbox::services::contextual_search::contextual_search_filter_operator);
		void create_broadcasts_url(uint,uint,uint,std::string const&,bool,std::string const&);
		void create_broadcasts_url(uint,uint,uint,std::string const&,bool,std::string const&);
		void deserialize_broadcasts_result(web::json::value const&);
		void deserialize_broadcasts_result(web::json::value const&);
		void deserialize_configuration_result(web::json::value const&);
		void deserialize_configuration_result(web::json::value const&);
		void get_broadcasts(uint);
		void get_broadcasts(uint,uint,uint,std::string const&,bool,std::string const&);
		void get_broadcasts(uint,uint,uint,std::string const&,bool,std::string const&);
		void get_broadcasts(uint,uint,uint,std::string const&,bool,std::string const&,xbox::services::contextual_search::contextual_search_filter_operator,std::string const&);
		void get_configuration(uint);
		void create_xbox_live_http_call(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&);
		void events_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void events_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void write_in_game_event(std::string const&);
		void write_in_game_event(std::string const&,web::json::value const&,web::json::value const&);
		void write_in_game_event(std::string const&,web::json::value const&,web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void allocation_result(void);
		void allocation_result(void);
		void allocation_result(xbox::services::game_server_platform::allocation_result const&);
		void allocation_result(xbox::services::game_server_platform::allocation_result const&);
		void allocation_result(xbox::services::game_server_platform::game_server_fulfillment_state,std::string,std::string,std::string,std::vector<xbox::services::game_server_platform::game_server_port_mapping,std::allocator<xbox::services::game_server_platform::game_server_port_mapping>>,std::string);
		void convert_string_to_fulfillment_state(std::string const&);
		void convert_string_to_fulfillment_state(std::string const&);
		void fulfillment_state(void);
		void host_name(void);
		void operator=(xbox::services::game_server_platform::allocation_result&&);
		void operator=(xbox::services::game_server_platform::allocation_result&&);
		void port_mappings(void);
		void region(void);
		void secure_device_address(void);
		void session_host_id(void);
		void ~allocation_result();
		void ~allocation_result();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void cluster_result(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,xbox::services::game_server_platform::game_server_fulfillment_state,std::string,std::string,std::vector<xbox::services::game_server_platform::game_server_port_mapping,std::allocator<xbox::services::game_server_platform::game_server_port_mapping>>,std::string);
		void cluster_result(void);
		void cluster_result(void);
		void cluster_result(xbox::services::game_server_platform::cluster_result const&);
		void cluster_result(xbox::services::game_server_platform::cluster_result const&);
		void convert_string_to_fulfillment_state(std::string const&);
		void convert_string_to_fulfillment_state(std::string const&);
		void fulfillment_state(void);
		void host_name(void);
		void operator=(xbox::services::game_server_platform::cluster_result&&);
		void operator=(xbox::services::game_server_platform::cluster_result&&);
		void poll_interval(void);
		void port_mappings(void);
		void region(void);
		void secure_device_address(void);
		void ~cluster_result();
		void ~cluster_result();
		void _Deserialize(web::json::value const&);
		void _Set_schema(xbox::services::game_server_platform::game_variant_schema);
		void _Set_schema(xbox::services::game_server_platform::game_variant_schema);
		void game_server_image_set(ulong long,ulong long,std::string,std::string,ulong long,std::string,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>);
		void game_server_image_set(ulong long,ulong long,std::string,std::string,ulong long,std::string,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>);
		void game_server_image_set(void);
		void game_server_image_set(void);
		void game_server_image_set(xbox::services::game_server_platform::game_server_image_set const&);
		void game_server_image_set(xbox::services::game_server_platform::game_server_image_set const&);
		void id(void);
		void max_players(void);
		void min_players(void);
		void name(void);
		void operator=(xbox::services::game_server_platform::game_server_image_set const&);
		void operator=(xbox::services::game_server_platform::game_server_image_set const&);
		void schema_content(void);
		void schema_id(void);
		void schema_id(void);
		void schema_name(void);
		void selection_order(void);
		void tags(void);
		void ~game_server_image_set();
		void ~game_server_image_set();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void game_server_image_sets(void);
		void game_server_metadata_result(std::vector<xbox::services::game_server_platform::game_variant,std::allocator<xbox::services::game_server_platform::game_variant>>,std::vector<xbox::services::game_server_platform::game_variant_schema,std::allocator<xbox::services::game_server_platform::game_variant_schema>>,std::vector<xbox::services::game_server_platform::game_server_image_set,std::allocator<xbox::services::game_server_platform::game_server_image_set>>);
		void game_server_metadata_result(void);
		void game_server_metadata_result(void);
		void game_variants(void);
		void operator=(xbox::services::game_server_platform::game_server_metadata_result&&);
		void operator=(xbox::services::game_server_platform::game_server_metadata_result&&);
		void allocate_cluster(uint,std::string const&,std::string const&,std::string const&,bool);
		void allocate_cluster_inline(uint,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,ulong long,std::string const&,bool);
		void allocate_session_host(uint,std::vector<std::string,std::allocator<std::string>> const&,std::string const&,std::string const&,std::string const&,std::string const&);
		void game_server_platform_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void game_server_platform_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void game_server_session_id_path(std::string const&,std::string const&,std::string const&);
		void game_server_session_id_path(std::string const&,std::string const&,std::string const&);
		void get_game_server_metadata(uint,uint,bool,uint,std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>> const&);
		void get_quality_of_service_servers(void);
		void get_session_host_allocation_status(uint,std::string const&);
		void get_ticket_status(uint,std::string const&);
		void pathandquery_game_server_allocate_session_host_subpath(uint);
		void pathandquery_game_server_allocate_session_host_subpath(uint);
		void pathandquery_game_server_allocation_status_subpath(uint,std::string const&);
		void pathandquery_game_server_allocation_status_subpath(uint,std::string const&);
		void pathandquery_game_server_create_cluster_subpath(uint,bool);
		void pathandquery_game_server_create_cluster_subpath(uint,bool);
		void pathandquery_game_server_gamevariant_list_subpath(uint);
		void pathandquery_game_server_gamevariant_list_subpath(uint);
		void pathandquery_game_server_ticket_status_subpath(uint,std::string const&);
		void pathandquery_game_server_ticket_status_subpath(uint,std::string const&);
		void _Deserialize(web::json::value const&);
		void external_port_number(void);
		void game_server_port_mapping(std::string,uint,uint);
		void game_server_port_mapping(void);
		void internal_port_number(void);
		void port_name(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void cluster_id(void);
		void convert_string_to_host_status(std::string const&);
		void convert_string_to_host_status(std::string const&);
		void description(void);
		void game_host_id(void);
		void game_server_ticket_status(std::string,std::string,uint,std::string,xbox::services::game_server_platform::game_server_host_status,std::string,std::string,std::vector<xbox::services::game_server_platform::game_server_port_mapping,std::allocator<xbox::services::game_server_platform::game_server_port_mapping>>,std::string,std::string);
		void game_server_ticket_status(void);
		void game_server_ticket_status(void);
		void game_server_ticket_status(xbox::services::game_server_platform::game_server_ticket_status const&);
		void game_server_ticket_status(xbox::services::game_server_platform::game_server_ticket_status const&);
		void host_name(void);
		void operator=(xbox::services::game_server_platform::game_server_ticket_status&&);
		void operator=(xbox::services::game_server_platform::game_server_ticket_status&&);
		void port_mappings(void);
		void region(void);
		void secure_context(void);
		void status(void);
		void ticket_id(void);
		void title_id(void);
		void ~game_server_ticket_status();
		void ~game_server_ticket_status();
		void _Deserialize(web::json::value const&);
		void _Set_schema(xbox::services::game_server_platform::game_variant_schema);
		void _Set_schema(xbox::services::game_server_platform::game_variant_schema);
		void game_variant(std::string,std::string,bool,ulong long,std::string);
		void game_variant(void);
		void game_variant(xbox::services::game_server_platform::game_variant const&);
		void game_variant(xbox::services::game_server_platform::game_variant const&);
		void id(void);
		void is_publisher(void);
		void name(void);
		void rank(void);
		void schema_content(void);
		void schema_id(void);
		void schema_id(void);
		void schema_name(void);
		void ~game_variant();
		void ~game_variant();
		void _Deserialize(web::json::value const&);
		void game_variant_schema(std::string,std::string,std::string);
		void game_variant_schema(void);
		void game_variant_schema(void);
		void schema_content(void);
		void schema_content(void);
		void schema_id(void);
		void schema_id(void);
		void schema_name(void);
		void schema_name(void);
		void _Deserialize(web::json::value const&);
		void quality_of_service_server(std::string,std::string,std::string);
		void quality_of_service_server(void);
		void secure_device_address_base64(void);
		void secure_device_address_base64(void);
		void server_full_qualified_domain_name(void);
		void target_location(void);
		void target_location(void);
		void nsal ();
		void token_result ();
		void http_call_data(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&,xbox::services::xbox_live_api);
		void http_call_data(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&,xbox::services::xbox_live_api);
		void ~http_call_data();
		void ~http_call_data();
		void add_default_headers(void);
		void add_default_headers(void);
		void content_type_header_value(void);
		void content_type_header_value(void);
		void get_config(std::shared_ptr<xbox::services::http_call_data> const&);
		void get_config(std::shared_ptr<xbox::services::http_call_data> const&);
		void get_default_request(void);
		void get_default_request(void);
		void get_http_call_response(std::shared_ptr<xbox::services::http_call_data> const&,web::http::http_response const&);
		void get_http_call_response(std::shared_ptr<xbox::services::http_call_data> const&,web::http::http_response const&);
		void get_response(std::shared_ptr<xbox::services::system::ecdsa>,xbox::services::system::signature_policy const&,xbox::services::http_call_response_body_type);
		void get_response(std::shared_ptr<xbox::services::system::ecdsa>,xbox::services::system::signature_policy const&,xbox::services::http_call_response_body_type);
		void get_response(xbox::services::http_call_response_body_type);
		void get_response(xbox::services::http_call_response_body_type);
		void get_response(xbox::services::http_call_response_body_type,web::http::http_request const&);
		void get_response(xbox::services::http_call_response_body_type,web::http::http_request const&);
		void get_response_with_auth(std::shared_ptr<xbox::services::user_context> const&,xbox::services::http_call_response_body_type,bool);
		void get_response_with_auth(std::shared_ptr<xbox::services::user_context> const&,xbox::services::http_call_response_body_type,bool);
		void get_response_with_auth(xbox::services::http_call_response_body_type);
		void get_response_with_auth(xbox::services::http_call_response_body_type);
		void get_xbox_live_error_code_from_http_status(ushort const&);
		void handle_fast_fail(xbox::services::http_retry_after_api_state const&,std::shared_ptr<xbox::services::http_call_data> const&);
		void handle_fast_fail(xbox::services::http_retry_after_api_state const&,std::shared_ptr<xbox::services::http_call_data> const&);
		void handle_json_body_response(web::http::http_response,std::shared_ptr<xbox::services::http_call_response>);
		void handle_json_body_response(web::http::http_response,std::shared_ptr<xbox::services::http_call_response>);
		void handle_response_error(std::shared_ptr<xbox::services::http_call_response> const&,xbox::services::xbox_live_error_code,std::string const&,web::http::http_response const&);
		void handle_response_error(std::shared_ptr<xbox::services::http_call_response> const&,xbox::services::xbox_live_error_code,std::string const&,web::http::http_response const&);
		void handle_string_body_response(web::http::http_response,std::shared_ptr<xbox::services::http_call_response>);
		void handle_string_body_response(web::http::http_response,std::shared_ptr<xbox::services::http_call_response>);
		void handle_unauthorized_error(std::shared_ptr<xbox::services::http_call_data> const&);
		void handle_unauthorized_error(std::shared_ptr<xbox::services::http_call_data> const&);
		void handle_vector_body_response(web::http::http_response,std::shared_ptr<xbox::services::http_call_response>);
		void handle_vector_body_response(web::http::http_response,std::shared_ptr<xbox::services::http_call_response>);
		void http_call_impl(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&,xbox::services::xbox_live_api);
		void http_call_impl(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&,xbox::services::xbox_live_api);
		void http_call_impl(void);
		void http_method(void);
		void http_method(void);
		void internal_get_response(std::shared_ptr<xbox::services::http_call_data> const&);
		void internal_get_response(std::shared_ptr<xbox::services::http_call_data> const&);
		void internal_get_response_with_auth(std::shared_ptr<xbox::services::user_context> const&,xbox::services::http_call_response_body_type,bool);
		void internal_get_response_with_auth(std::shared_ptr<xbox::services::user_context> const&,xbox::services::http_call_response_body_type,bool);
		void long_http_call(void);
		void long_http_call(void);
		void path_query_fragment(void);
		void path_query_fragment(void);
		void request_body(void);
		void request_body(void);
		void retry_allowed(void);
		void retry_allowed(void);
		void server_name(void);
		void server_name(void);
		void set_add_default_headers(bool);
		void set_add_default_headers(bool);
		void set_content_type_header_value(std::string const&);
		void set_content_type_header_value(std::string const&);
		void set_custom_header(std::string const&,std::string const&);
		void set_custom_header(std::string const&,std::string const&);
		void set_http_timeout(std::shared_ptr<xbox::services::http_call_data> const&,std::chrono::time_point<std::chrono::_V2::system_clock,std::chrono::duration<long long,std::ratio<1ll,1000000000ll>>> const&);
		void set_long_http_call(bool);
		void set_long_http_call(bool);
		void set_request_body(std::string const&);
		void set_request_body(std::string const&);
		void set_request_body(std::vector<uchar,std::allocator<uchar>> const&);
		void set_request_body(std::vector<uchar,std::allocator<uchar>> const&);
		void set_request_body(web::json::value const&);
		void set_request_body(web::json::value const&);
		void set_retry_allowed(bool);
		void set_retry_allowed(bool);
		void set_user_agent(std::shared_ptr<xbox::services::http_call_data> const&);
		void set_user_agent(std::shared_ptr<xbox::services::http_call_data> const&);
		void set_xbox_contract_version_header_value(std::string const&);
		void set_xbox_contract_version_header_value(std::string const&);
		void should_fast_fail(xbox::services::http_retry_after_api_state const&,std::shared_ptr<xbox::services::http_call_data> const&,std::chrono::time_point<std::chrono::_V2::system_clock,std::chrono::duration<long long,std::ratio<1ll,1000000000ll>>> const&);
		void should_retry(std::shared_ptr<xbox::services::http_call_response> const&,std::shared_ptr const&<xbox::services::http_call_data>,xbox::services::xbox_live_error_code);
		void should_retry(std::shared_ptr<xbox::services::http_call_response> const&,std::shared_ptr const&<xbox::services::http_call_data>,xbox::services::xbox_live_error_code);
		xbox_contract_version_header_value(void);
		xbox_contract_version_header_value(void);
		void ~http_call_impl();
		void ~http_call_impl();
		void ~http_call_impl();
		void ~http_call_impl();
		void get_http_request_message_type(void);
		void get_http_request_message_type(void);
		void http_call_request_message(std::string);
		void http_call_request_message(std::string);
		void http_call_request_message(std::vector<uchar,std::allocator<uchar>>);
		void http_call_request_message(std::vector<uchar,std::allocator<uchar>>);
		void http_call_request_message(void);
		void http_call_request_message(void);
		void request_message_string(void);
		void request_message_string(void);
		void request_message_vector(void);
		void request_message_vector(void);
		void _Context_settings(void);
		void _Context_settings(void);
		void _Local_response_time(void);
		void _Local_response_time(void);
		void _Request(void);
		void _Request(void);
		void _Route_service_call(void);
		void _Route_service_call(void);
		void _Set_error_info(std::error_code const&,std::string const&);
		void _Set_error_info(std::error_code const&,std::string const&);
		void _Set_response_body(std::string const&);
		void _Set_response_body(std::string const&);
		void _Set_response_body(std::vector<uchar,std::allocator<uchar>> const&);
		void _Set_response_body(std::vector<uchar,std::allocator<uchar>> const&);
		void _Set_response_body(web::json::value const&);
		void _Set_response_body(web::json::value const&);
		void _Set_timing(std::chrono::time_point<std::chrono::_V2::system_clock,std::chrono::duration<long long,std::ratio<1ll,1000000000ll>>> const&,std::chrono::time_point<std::chrono::_V2::system_clock,std::chrono::duration<long long,std::ratio<1ll,1000000000ll>>> const&);
		void _Set_timing(std::chrono::time_point<std::chrono::_V2::system_clock,std::chrono::duration<long long,std::ratio<1ll,1000000000ll>>> const&,std::chrono::time_point<std::chrono::_V2::system_clock,std::chrono::duration<long long,std::ratio<1ll,1000000000ll>>> const&);
		void extract_retry_after_from_header(web::http::http_headers const&);
		void extract_retry_after_from_header(web::http::http_headers const&);
		void get_throttling_error_message(void);
		void get_throttling_error_message(void);
		void http_call_response(std::string const&,std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,web::http::http_request const&,xbox::services::http_call_request_message const&,xbox::services::xbox_live_api,web::http::http_response const&);
		void http_call_response(std::string const&,std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,web::http::http_request const&,xbox::services::http_call_request_message const&,xbox::services::xbox_live_api,web::http::http_response const&);
		void record_service_result(void);
		void record_service_result(void);
		void response_body_to_string(void);
		void ~http_call_response();
		void ~http_call_response();
		void clear_state(xbox::services::xbox_live_api);
		void clear_state(xbox::services::xbox_live_api);
		void get_http_retry_after_manager_singleton(void);
		void get_state(xbox::services::xbox_live_api);
		void get_state(xbox::services::xbox_live_api);
		void set_state(xbox::services::xbox_live_api,xbox::services::http_retry_after_api_state const&);
		void app_callback_intent(void);
		void app_callback_intent(void);
		void deinitialize(void);
		void finish_initialization(_JNIEnv *,_jobject *,_jmethodID *,bool);
		void finish_initialization(_JNIEnv *,_jobject *,_jmethodID *,bool);
		void get_activity(void);
		void get_activity(void);
		void get_context_object(void);
		void get_context_object(void);
		void get_java_interop_singleton(void);
		void get_java_interop_singleton(void);
		void get_java_vm(void);
		void get_java_vm(void);
		void get_local_storage_path(void);
		void get_local_storage_path(void);
		void get_market_activity_class(void);
		void get_market_activity_class(void);
		void get_tcui_interop_class(void);
		void get_tcui_interop_class(void);
		void init_cll(std::string const&);
		void init_cll(std::string const&);
		void initialize(_JNIEnv *,_jclass *,_jobject *);
		void initialize(_JavaVM *,_jobject *);
		void initialize(_JavaVM *,_jobject *);
		void java_interop(void);
		void log_cll(std::string const&,std::string const&,std::string const&);
		void log_cll(std::string const&,std::string const&,std::string const&);
		void read_config_file(void);
		void read_config_file(void);
		void register_natives(JNINativeMethod *);
		void register_natives(JNINativeMethod *);
		void set_app_callback_intent(_jobject *);
		void create_leaderboard_for_social_group_url(std::string const&,std::string const&,std::string const&,std::string const&,uint,std::string const&,std::string const&,uint,std::string const&);
		void create_leaderboard_for_social_group_url(std::string const&,std::string const&,std::string const&,std::string const&,uint,std::string const&,std::string const&,uint,std::string const&);
		void create_leaderboard_url(std::string const&,std::string const&,uint,std::string const&,uint,std::string const&,bool,std::string const&,std::string const&);
		void create_leaderboard_url(std::string const&,std::string const&,uint,std::string const&,uint,std::string const&,bool,std::string const&,std::string const&);
		void display_name(void);
		void leaderboard_column(std::string,std::string,xbox::services::leaderboard::leaderboard_stat_type);
		void leaderboard_column(std::string,std::string,xbox::services::leaderboard::leaderboard_stat_type);
		void stat_name(void);
		void stat_type(void);
		void ~leaderboard_global_query();
		void ~leaderboard_global_query();
		void _Parse_additional_columns(std::vector<std::string,std::allocator<std::string>> const&);
		void _Parse_additional_columns(std::vector<std::string,std::allocator<std::string>> const&);
		void _Set_next_query(std::shared_ptr<xbox::services::leaderboard::leaderboard_global_query>);
		void _Set_next_query(std::shared_ptr<xbox::services::leaderboard::leaderboard_global_query>);
		void _Set_next_query(std::shared_ptr<xbox::services::leaderboard::leaderboard_social_query>);
		void _Set_next_query(std::shared_ptr<xbox::services::leaderboard::leaderboard_social_query>);
		void columns(void);
		void display_name(void);
		void get_next(uint);
		void has_next(void);
		void leaderboard_result(std::string,uint,std::string,std::vector<xbox::services::leaderboard::leaderboard_column,std::allocator<xbox::services::leaderboard::leaderboard_column>>,std::vector<xbox::services::leaderboard::leaderboard_row,std::allocator<xbox::services::leaderboard::leaderboard_row>>,std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void leaderboard_result(std::string,uint,std::string,std::vector<xbox::services::leaderboard::leaderboard_column,std::allocator<xbox::services::leaderboard::leaderboard_column>>,std::vector<xbox::services::leaderboard::leaderboard_row,std::allocator<xbox::services::leaderboard::leaderboard_row>>,std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void leaderboard_result(void);
		void leaderboard_result(void);
		void leaderboard_result(xbox::services::leaderboard::leaderboard_result const&);
		void leaderboard_result(xbox::services::leaderboard::leaderboard_result const&);
		void operator=(xbox::services::leaderboard::leaderboard_result const&);
		void operator=(xbox::services::leaderboard::leaderboard_result const&);
		void operator=(xbox::services::leaderboard::leaderboard_result&&);
		void operator=(xbox::services::leaderboard::leaderboard_result&&);
		void rows(void);
		void total_row_count(void);
		void ~leaderboard_result();
		void ~leaderboard_result();
		void column_values(void);
		void gamertag(void);
		void leaderboard_row(std::string,std::string,double,uint,std::vector<std::string,std::allocator<std::string>>,std::string);
		void leaderboard_row(std::string,std::string,double,uint,std::vector<std::string,std::allocator<std::string>>,std::string);
		void leaderboard_row(xbox::services::leaderboard::leaderboard_row const&);
		void leaderboard_row(xbox::services::leaderboard::leaderboard_row const&);
		void percentile(void);
		void rank(void);
		xbox_user_id(void);
		void ~leaderboard_row();
		void ~leaderboard_row();
		void get_leaderboard(std::string const&,std::string const&,std::string const&,std::string const&,uint,std::vector<std::string,std::allocator<std::string>> const&);
		void get_leaderboard(std::string const&,std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void get_leaderboard(std::string const&,std::string const&,uint,std::string const&,std::string const&,uint,std::vector<std::string,std::allocator<std::string>> const&);
		void get_leaderboard(std::string const&,std::string const&,uint,uint,std::vector<std::string,std::allocator<std::string>> const&);
		void get_leaderboard_for_social_group(std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,uint);
		void get_leaderboard_for_social_group(std::string const&,std::string const&,std::string const&,std::string const&,uint);
		void get_leaderboard_for_social_group_internal(std::string const&,std::string const&,std::string const&,std::string const&,uint,std::string const&,std::string const&,uint,std::string const&);
		void get_leaderboard_for_social_group_internal(std::string const&,std::string const&,std::string const&,std::string const&,uint,std::string const&,std::string const&,uint,std::string const&);
		void get_leaderboard_for_social_group_skip_to_rank(std::string const&,std::string const&,std::string const&,std::string const&,uint,std::string const&,uint);
		void get_leaderboard_for_social_group_skip_to_xuid(std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,uint);
		void get_leaderboard_internal(std::string const&,std::string const&,uint,std::string const&,std::string const&,std::string const&,uint,std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void get_leaderboard_internal(std::string const&,std::string const&,uint,std::string const&,std::string const&,std::string const&,uint,std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void get_leaderboard_skip_to_xuid(std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,uint,std::vector<std::string,std::allocator<std::string>> const&);
		void get_leaderboard_skip_to_xuid(std::string const&,std::string const&,std::string const&,uint,std::vector<std::string,std::allocator<std::string>> const&);
		void leaderboard_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void leaderboard_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void ~leaderboard_social_query();
		void ~leaderboard_social_query();
		void deserialize_column(web::json::value const&,std::error_code &);
		void deserialize_column(web::json::value const&,std::error_code &);
		void deserialize_result(web::json::value const&,std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void deserialize_result(web::json::value const&,std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void deserialize_row(web::json::value const&,std::error_code &);
		void deserialize_row(web::json::value const&,std::error_code &);
		void parse_stat_type(std::string const&);
		void client_secret(void);
		void client_secret(void);
		void delete_value_from_local_storage(std::string const&);
		void delete_value_from_local_storage(std::string const&);
		void environment(void);
		void environment(void);
		void environment_prefix(void);
		void environment_prefix(void);
		void get_bool_from_config(std::string const&,bool,bool);
		void get_local_config_singleton(void);
		void get_uint64_from_config(std::string const&,bool,ulong long);
		void get_value_from_config(std::string const&,bool,std::string const&);
		void get_value_from_local_storage(std::string const&);
		void get_value_from_local_storage(std::string const&);
		void is_android_native_activity(void);
		void is_android_native_activity(void);
		void local_config_impl(void);
		void local_config_impl(void);
		void override_scid(void);
		void override_scid(void);
		void override_title_id(void);
		void override_title_id(void);
		void read(void);
		void read(void);
		void sandbox(void);
		void sandbox(void);
		void scid(void);
		void scid(void);
		void title_id(void);
		void title_id(void);
		void use_brokered_authorization(void);
		void use_brokered_authorization(void);
		void use_first_party_token(void);
		void use_first_party_token(void);
		void write_value_to_local_storage(std::string const&,std::string const&);
		void write_value_to_local_storage(std::string const&,std::string const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void create_match_ticket_response(std::string,std::chrono::duration<long long,std::ratio<1ll,1ll>>);
		void create_match_ticket_response(void);
		void create_match_ticket_response(void);
		void estimated_wait_time(void);
		void estimated_wait_time(void);
		void match_ticket_id(void);
		void match_ticket_id(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void estimated_wait_time(void);
		void hopper_name(void);
		void hopper_statistics_response(std::string,std::chrono::duration<long long,std::ratio<1ll,1ll>>,uint);
		void hopper_statistics_response(void);
		void hopper_statistics_response(void);
		void players_waiting_to_match(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void convert_string_to_preserve_session_mode(std::string const&);
		void convert_string_to_preserve_session_mode(std::string const&);
		void convert_string_to_ticket_status(std::string const&);
		void convert_string_to_ticket_status(std::string const&);
		void estimated_wait_time(void);
		void match_status(void);
		void match_ticket_details_response(void);
		void match_ticket_details_response(void);
		void match_ticket_details_response(void);
		void match_ticket_details_response(xbox::services::matchmaking::match_ticket_details_response const&);
		void match_ticket_details_response(xbox::services::matchmaking::match_ticket_details_response const&);
		void match_ticket_details_response(xbox::services::matchmaking::ticket_status,std::chrono::duration<long long,std::ratio<1ll,1ll>>,xbox::services::matchmaking::preserve_session_mode,xbox::services::multiplayer::multiplayer_session_reference,xbox::services::multiplayer::multiplayer_session_reference,web::json::value);
		void preserve_session(void);
		void target_session(void);
		void ticket_attributes(void);
		void ticket_session(void);
		void ~match_ticket_details_response();
		void ~match_ticket_details_response();
		void convert_preserve_session_mode_to_string(xbox::services::matchmaking::preserve_session_mode);
		void create_match_ticket(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,std::string const&,std::chrono::duration<long long,std::ratio<1ll,1ll>> const&,xbox::services::matchmaking::preserve_session_mode,web::json::value const&);
		void create_match_ticket(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,std::string const&,std::chrono::duration<long long,std::ratio<1ll,1ll>> const&,xbox::services::matchmaking::preserve_session_mode,web::json::value const&);
		void delete_match_ticket(std::string const&,std::string const&,std::string const&);
		void delete_match_ticket(std::string const&,std::string const&,std::string const&);
		void get_hopper_statistics(std::string const&,std::string const&);
		void get_match_ticket_details(std::string const&,std::string const&,std::string const&);
		void hopper_sub_path(std::string const&,std::string const&);
		void hopper_sub_path(std::string const&,std::string const&);
		void matchmaking_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void matchmaking_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void matchmaking_sub_path(std::string const&,std::string const&,std::string const&);
		void matchmaking_sub_path(std::string const&,std::string const&,std::string const&);
		void find_match_completed_event_args(xbox::services::multiplayer::manager::match_status,xbox::services::multiplayer::multiplayer_measurement_failure);
		void find_match_completed_event_args(xbox::services::multiplayer::manager::match_status,xbox::services::multiplayer::multiplayer_measurement_failure);
		void initialization_failure_cause(void);
		void match_status(void);
		void ~find_match_completed_event_args();
		void ~find_match_completed_event_args();
		void host_changed_event_args(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>);
		void host_changed_event_args(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>);
		void host_member(void);
		void ~host_changed_event_args();
		void ~host_changed_event_args();
		void ~host_changed_event_args();
		void ~host_changed_event_args();
		void invited_xbox_user_id(void);
		void join_lobby_completed_event_args(std::string);
		void join_lobby_completed_event_args(std::string);
		void ~join_lobby_completed_event_args();
		void ~join_lobby_completed_event_args();
		void ~join_lobby_completed_event_args();
		void ~join_lobby_completed_event_args();
		void cancel_match(void);
		void cancel_match(void);
		void check_next_timer(void);
		void check_next_timer(void);
		void clear_multiplayer_event_queue(void);
		void clear_multiplayer_event_queue(void);
		void do_work(void);
		void estimated_match_wait_time(void);
		void estimated_match_wait_time(void);
		void find_match(std::string const&,web::json::value const&,std::chrono::duration<long long,std::ratio<1ll,1ll>> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void find_match(std::string const&,web::json::value const&,std::chrono::duration<long long,std::ratio<1ll,1ll>> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void get_latest_session(void);
		void get_latest_session(void);
		void handle_find_match_completed(std::error_code,std::string);
		void handle_find_match_completed(std::error_code,std::string);
		void handle_initialization_state_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void handle_initialization_state_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void handle_match_found(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void handle_match_found(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void handle_match_status_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void handle_match_status_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void handle_qos_measurements(void);
		void handle_qos_measurements(void);
		void handle_session_joined(void);
		void handle_session_joined(void);
		void join_session_helper(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void join_session_helper(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void match_session(void);
		void match_session(void);
		void match_status(void);
		void match_status(void);
		void matchmaking_client_manager(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void matchmaking_client_manager(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_event_queue(void);
		void multiplayer_event_queue(void);
		void on_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void on_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void resubmit_matchmaking(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void resubmit_matchmaking(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void set_match_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void set_match_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void set_quality_of_service_measurements(std::shared_ptr<std::vector<xbox::services::multiplayer::multiplayer_quality_of_service_measurements,std::allocator<xbox::services::multiplayer::multiplayer_quality_of_service_measurements>>>);
		void set_quality_of_service_measurements(std::shared_ptr<std::vector<xbox::services::multiplayer::multiplayer_quality_of_service_measurements,std::allocator<xbox::services::multiplayer::multiplayer_quality_of_service_measurements>>>);
		void ~matchmaking_client_manager();
		void ~matchmaking_client_manager();
		void member_joined_event_args(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void member_joined_event_args(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void members(void);
		void members(void);
		void ~member_joined_event_args();
		void ~member_joined_event_args();
		void ~member_joined_event_args();
		void ~member_joined_event_args();
		void member_left_event_args(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void member_left_event_args(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void members(void);
		void ~member_left_event_args();
		void ~member_left_event_args();
		void ~member_left_event_args();
		void ~member_left_event_args();
		void member(void);
		void member(void);
		void member_property_changed_event_args(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,web::json::value);
		void member_property_changed_event_args(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,web::json::value);
		void properties(void);
		void ~member_property_changed_event_args();
		void ~member_property_changed_event_args();
		void ~member_property_changed_event_args();
		void ~member_property_changed_event_args();
		void add_multiplayer_event(xbox::services::multiplayer::manager::multiplayer_event_type,xbox::services::multiplayer::manager::multiplayer_session_type,std::error_code,std::string);
		void add_multiplayer_event_helper(xbox::services::multiplayer::manager::multiplayer_event_type,xbox::services::multiplayer::manager::multiplayer_session_type,std::error_code,std::string);
		void add_multiplayer_event_helper(xbox::services::multiplayer::manager::multiplayer_event_type,xbox::services::multiplayer::manager::multiplayer_session_type,std::error_code,std::string);
		void add_to_multiplayer_event_queue(xbox::services::multiplayer::manager::multiplayer_event);
		void add_to_multiplayer_event_queue(xbox::services::multiplayer::manager::multiplayer_event);
		void check_invited_xuid(std::string const&,std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>> const&);
		void check_invited_xuid(std::string const&,std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>> const&);
		void destroy(void);
		void destroy(void);
		void do_work(void);
		void find_match(std::string const&,web::json::value const&,std::chrono::duration<long long,std::ratio<1ll,1ll>> const&);
		void find_match(std::string const&,web::json::value const&,std::chrono::duration<long long,std::ratio<1ll,1ll>> const&);
		void get_activities_for_social_group(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&);
		void get_activities_for_social_group(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&);
		void get_multiplayer_service(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_multiplayer_service(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_primary_xbox_live_context(void);
		void get_session_type(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void get_xbox_live_context_map(void);
		void handle_host_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_host_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_member_list_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_member_list_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_member_properties_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_member_properties_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_session_properties_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_session_properties_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_tournament_properties_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_tournament_properties_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void initialize(void);
		void initialize(void);
		void invite_users(std::shared_ptr<xbox::services::system::xbox_live_user>,std::vector<std::string,std::allocator<std::string>> const&,std::string const&,std::string const&);
		void invite_users(std::shared_ptr<xbox::services::system::xbox_live_user>,std::vector<std::string,std::allocator<std::string>> const&,std::string const&,std::string const&);
		void is_update_avaialable(void);
		void is_update_avaialable(void);
		void join_game(std::string const&,std::string const&);
		void join_game(std::string const&,std::string const&);
		void join_game_from_lobby(std::string const&);
		void join_game_from_lobby(std::string const&);
		void join_lobby(std::string const&,std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>>);
		void join_lobby(std::string const&,std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>>);
		void join_lobby(web::json::value const&,std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>>);
		void join_lobby(web::json::value const&,std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>>);
		void join_lobby_completed(std::error_code const&,std::string const&,std::string const&);
		void join_lobby_completed(std::error_code const&,std::string const&,std::string const&);
		void last_pending_read(void);
		void last_pending_read(void);
		void latest_pending_read(void);
		void latest_pending_read(void);
		void leave_game(void);
		void leave_game(void);
		void lobby_client(void);
		void lobby_client(void);
		void local_user_manager(void);
		void matchmaking_client_manager(void);
		void matchmaking_client_manager(void);
		void multiplayer_client_manager(std::string);
		void multiplayer_client_manager(std::string);
		void multiplayer_client_manager(xbox::services::multiplayer::manager::multiplayer_client_manager const&);
		void on_multiplayer_subscriptions_lost(void);
		void on_multiplayer_subscriptions_lost(void);
		void on_resync_message_received(void);
		void on_resync_message_received(void);
		void on_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void on_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void process_events(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void process_events(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void process_match_events(void);
		void process_match_events(void);
		void register_local_user_manager_events(void);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_properties(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,web::json::value const&,void const*);
		void set_properties(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,web::json::value const&,void const*);
		void set_synchronized_host(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,void const*);
		void set_synchronized_host(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,void const*);
		void set_synchronized_properties(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,web::json::value const&,void const*);
		void set_synchronized_properties(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,web::json::value const&,void const*);
		void synchronized_write_completed(std::error_code,std::string,xbox::services::multiplayer::manager::multiplayer_event_type,xbox::services::multiplayer::manager::multiplayer_session_type);
		void ~multiplayer_client_manager();
		void ~multiplayer_client_manager();
		void add_to_multiplayer_event_queue(std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>);
		void add_to_multiplayer_event_queue(std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>);
		void add_to_multiplayer_event_queue(xbox::services::multiplayer::manager::multiplayer_event);
		void add_to_multiplayer_event_queue(xbox::services::multiplayer::manager::multiplayer_event);
		void add_to_pending_queue(xbox::services::multiplayer::multiplayer_session_reference,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>);
		void add_to_pending_queue(xbox::services::multiplayer::multiplayer_session_reference,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>);
		void clear_multiplayer_event_queue(void);
		void convert_to_game_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>);
		void convert_to_game_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>);
		void deep_copy_if_updated(xbox::services::multiplayer::manager::multiplayer_client_pending_reader const&);
		void deep_copy_if_updated(xbox::services::multiplayer::manager::multiplayer_client_pending_reader const&);
		void do_work(void);
		void do_work(void);
		void game_client(void);
		void game_client(void);
		void get_session(xbox::services::multiplayer::multiplayer_session_reference);
		void is_game(xbox::services::multiplayer::multiplayer_session_reference);
		void is_game(xbox::services::multiplayer::multiplayer_session_reference);
		void is_lobby(xbox::services::multiplayer::multiplayer_session_reference);
		void is_lobby(xbox::services::multiplayer::multiplayer_session_reference);
		void is_local(std::string const&,std::map<std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::less<std::string>,std::allocator<std::pair<std::string const,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>>>> const&);
		void is_update_avaialable(xbox::services::multiplayer::manager::multiplayer_client_pending_reader const&);
		void is_update_avaialable(xbox::services::multiplayer::manager::multiplayer_client_pending_reader const&);
		void leave_all_local_members(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool,bool);
		void leave_all_local_members(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool,bool);
		void lobby_client(void);
		void lobby_client(void);
		void match_session(void);
		void match_session(void);
		void multiplayer_client_pending_reader(std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_client_pending_reader(std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_client_pending_reader(void);
		void multiplayer_client_pending_reader(void);
		void multiplayer_event_queue(void);
		void multiplayer_event_queue(void);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_properties(xbox::services::multiplayer::multiplayer_session_reference,std::string,web::json::value,void const*);
		void set_properties(xbox::services::multiplayer::multiplayer_session_reference,std::string,web::json::value,void const*);
		void set_synchronized_host(xbox::services::multiplayer::multiplayer_session_reference,std::string const&,void const*);
		void set_synchronized_host(xbox::services::multiplayer::multiplayer_session_reference,std::string const&,void const*);
		void set_synchronized_properties(xbox::services::multiplayer::multiplayer_session_reference,std::string,web::json::value,void const*);
		void set_synchronized_properties(xbox::services::multiplayer::multiplayer_session_reference,std::string,web::json::value,void const*);
		void update_match_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void update_match_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void update_session(xbox::services::multiplayer::multiplayer_session_reference,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void ~multiplayer_client_pending_reader();
		void ~multiplayer_client_pending_reader();
		void append_pending_changes(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,bool);
		void append_pending_changes(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,bool);
		void context(void);
		void context(void);
		void join_in_progress(void);
		void join_in_progress(void);
		void lobby_handle_id(void);
		void lobby_handle_id(void);
		void lobby_state(void);
		void lobby_state(void);
		void local_user(void);
		void local_user(void);
		void local_user_connection_address(void);
		void local_user_connection_address(void);
		void local_user_properties(void);
		void local_user_properties(void);
		void multiplayer_client_pending_request(void);
		void multiplayer_client_pending_request(void);
		void request_type(void);
		void request_type(void);
		void session_properties(void);
		void session_properties(void);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_lobby_handle_id(std::string const&);
		void set_lobby_handle_id(std::string const&);
		void set_lobby_state(xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state);
		void set_lobby_state(xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state);
		void set_local_user(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>);
		void set_local_user(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>);
		void set_local_user_connection_address(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::string,void const*);
		void set_local_user_connection_address(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::string,void const*);
		void set_local_user_properties(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::string,web::json::value,void const*);
		void set_local_user_properties(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::string,web::json::value,void const*);
		void set_session_properties(std::string,web::json::value,void const*);
		void set_session_properties(std::string,web::json::value,void const*);
		void set_synchronized_host_device_token(std::string const&,void const*);
		void set_synchronized_host_device_token(std::string const&,void const*);
		void set_synchronized_session_properties(std::string,web::json::value,void const*);
		void set_synchronized_session_properties(std::string,web::json::value,void const*);
		void synchronized_host_device_token(void);
		void synchronized_host_device_token(void);
		void synchronized_session_properties(void);
		void synchronized_session_properties(void);
		void ~multiplayer_client_pending_request();
		void ~multiplayer_client_pending_request();
		void context(void);
		void err(void);
		void err(void);
		void err_message(void);
		void err_message(void);
		void event_args(void);
		void event_args(void);
		void event_type(void);
		void event_type(void);
		void multiplayer_event(std::error_code,std::string,xbox::services::multiplayer::manager::multiplayer_event_type,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_event_args>,xbox::services::multiplayer::manager::multiplayer_session_type,void const*);
		void multiplayer_event(std::error_code,std::string,xbox::services::multiplayer::manager::multiplayer_event_type,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_event_args>,xbox::services::multiplayer::manager::multiplayer_session_type,void const*);
		void session_type(void);
		void ~multiplayer_event_args();
		void ~multiplayer_event_args();
		void ~multiplayer_event_args();
		void ~multiplayer_event_args();
		void add_multiplayer_event_helper(std::error_code const&,std::string const&,xbox::services::multiplayer::manager::multiplayer_event_type,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_event_args>,void const*);
		void add_to_pending_queue(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>);
		void add_to_pending_queue(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>);
		void add_to_processing_queue(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>);
		void convert_to_multiplayer_game(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void convert_to_multiplayer_game(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void deep_copy_if_updated(xbox::services::multiplayer::manager::multiplayer_game_client const&);
		void deep_copy_if_updated(xbox::services::multiplayer::manager::multiplayer_game_client const&);
		void do_work(void);
		void do_work(void);
		void game(void);
		void game(void);
		void initialize(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_lobby_client> const&);
		void is_pending_game_changes(void);
		void is_pending_game_changes(void);
		void join_game_for_all_local_members(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,bool);
		void join_game_for_all_local_members(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&,bool);
		void join_game_for_all_local_members_helper(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,bool,std::string const&);
		void join_game_for_all_local_members_helper(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,bool,std::string const&);
		void join_game_from_lobby_helper(void);
		void join_game_from_lobby_helper(void);
		void join_game_helper(std::shared_ptr<xbox::services::xbox_live_context>,std::string const&);
		void join_game_helper(std::shared_ptr<xbox::services::xbox_live_context>,std::string const&);
		void join_helper(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool,std::string const&);
		void join_helper(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool,std::string const&);
		void leave_remote_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool,bool);
		void leave_remote_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool,bool);
		void multiplayer_event_queue(void);
		void multiplayer_event_queue(void);
		void multiplayer_game_client(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_game_client(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_game_client(void);
		void multiplayer_game_client(void);
		void remove_stale_users_from_remote_session(void);
		void remove_stale_users_from_remote_session(void);
		void session(void);
		void session(void);
		void session_writer(void);
		void session_writer(void);
		void set_game_session_template(std::string const&);
		void set_game_session_template(std::string const&);
		void set_local_member_properties_to_remote_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user> const&,std::map<std::string,web::json::value,std::less<std::string>,std::allocator<std::pair<std::string const,web::json::value>>> const&,std::string const&);
		void set_local_member_properties_to_remote_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user> const&,std::map<std::string,web::json::value,std::less<std::string>,std::allocator<std::pair<std::string const,web::json::value>>> const&,std::string const&);
		void update_game(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_game_session> const&);
		void update_game_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_game_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_objects(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_objects(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void ~multiplayer_game_client();
		void ~multiplayer_game_client();
		void _Change_number(void);
		void _Create_deep_copy(void);
		void _Create_deep_copy(void);
		void _Set_host(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>);
		void _Set_multiplayer_client_manager(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_manager>);
		void _Set_multiplayer_client_manager(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_manager>);
		void correlation_id(void);
		void deep_copy_from(xbox::services::multiplayer::manager::multiplayer_game_session const&);
		void deep_copy_from(xbox::services::multiplayer::manager::multiplayer_game_session const&);
		void host(void);
		void is_host(std::string const&);
		void members(void);
		void multiplayer_game_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void multiplayer_game_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void multiplayer_game_session(void);
		void multiplayer_game_session(void);
		void properties(void);
		void session_reference(void);
		void set_properties(std::string const&,web::json::value const&,void const*);
		void set_synchronized_host(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,void const*);
		void set_synchronized_properties(std::string const&,web::json::value const&,void const*);
		void tournament_team_results(void);
		void tournament_teams(void);
		void ~multiplayer_game_session();
		void ~multiplayer_game_session();
		void add_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>,xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state,std::string const&);
		void add_local_users(std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>>,std::string const&);
		void add_local_users(std::vector<std::shared_ptr<xbox::services::system::xbox_live_user>,std::allocator<std::shared_ptr<xbox::services::system::xbox_live_user>>>,std::string const&);
		void add_multiplayer_event_helper(std::error_code const&,std::string const&,xbox::services::multiplayer::manager::multiplayer_event_type,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_event_args>,void const*);
		void add_to_pending_queue(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>);
		void add_to_pending_queue(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>);
		void add_to_processing_queue(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>);
		void advertise_game_session(void);
		void advertise_game_session(void);
		void clear_game_session_from_lobby(void);
		void clear_game_session_from_lobby(void);
		void commit_lobby_changes(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void commit_lobby_changes(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void commit_lobby_changes_helper(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void commit_lobby_changes_helper(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void commit_pending_lobby_changes(bool);
		void commit_pending_lobby_changes(bool);
		void convert_to_multiplayer_lobby(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void convert_to_multiplayer_lobby(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void create_game_from_lobby(void);
		void create_game_from_lobby(void);
		void deep_copy_if_updated(xbox::services::multiplayer::manager::multiplayer_lobby_client const&);
		void deep_copy_if_updated(xbox::services::multiplayer::manager::multiplayer_lobby_client const&);
		void delete_local_member_properties(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&,void const*);
		void delete_local_member_properties(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&,void const*);
		void do_work(void);
		void do_work(void);
		void get_processing_queue(void);
		void get_transfer_handle(void);
		void get_transfer_handle(void);
		void handle_join_lobby_completed(std::error_code const&,std::string const&);
		void handle_join_lobby_completed(std::error_code const&,std::string const&);
		void handle_lobby_change_events(std::error_code const&,std::string const&,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>> const&);
		void handle_lobby_change_events(std::error_code const&,std::string const&,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>> const&);
		void initialize(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_game_client> const&);
		void is_pending_lobby_changes(void);
		void is_pending_lobby_changes(void);
		void is_pending_lobby_local_user_changes(void);
		void is_pending_lobby_local_user_changes(void);
		void is_transfer_handle_state(std::string const&);
		void is_transfer_handle_state(std::string const&);
		void join_in_progress(void);
		void join_in_progress(void);
		void join_lobby_completed(std::error_code const&,std::string const&,std::string const&);
		void join_lobby_completed(std::error_code const&,std::string const&,std::string const&);
		void leave_remote_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool);
		void leave_remote_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool);
		void lobby(void);
		void lobby(void);
		void multiplayer_event_queue(void);
		void multiplayer_event_queue(void);
		void multiplayer_lobby_client(std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_lobby_client(std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_lobby_client(void);
		void multiplayer_lobby_client(void);
		void remove_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void remove_stale_xbox_live_context_from_map(void);
		void session(void);
		void session(void);
		void session_writer(void);
		void session_writer(void);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_local_member_connection_address(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string,void const*);
		void set_local_member_connection_address(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string,void const*);
		void set_local_member_properties(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string,web::json::value,void const*);
		void set_local_member_properties(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string,web::json::value,void const*);
		void should_update_host_token(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void should_update_host_token(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void stop_advertising_game_session(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>);
		void stop_advertising_game_session(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>);
		void update_lobby(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_lobby_session>);
		void update_lobby_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_lobby_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_local_lobby_members(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_local_lobby_members(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_objects(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_objects(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void user_state_changed(std::error_code const&,std::string const&,xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state,std::string);
		void user_state_changed(std::error_code const&,std::string const&,xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state,std::string);
		void ~multiplayer_lobby_client();
		void ~multiplayer_lobby_client();
		void _Change_number(void);
		void _Create_deep_copy(void);
		void _Create_deep_copy(void);
		void _Set_host(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>);
		void _Set_multiplayer_client_manager(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_manager>);
		void _Set_multiplayer_client_manager(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_manager>);
		void add_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void add_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void correlation_id(void);
		void correlation_id(void);
		void deep_copy_from(xbox::services::multiplayer::manager::multiplayer_lobby_session const&);
		void deep_copy_from(xbox::services::multiplayer::manager::multiplayer_lobby_session const&);
		void delete_local_member_properties(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&,void const*);
		void get_activities_for_social_group(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&);
		void host(void);
		void invite_users(std::shared_ptr<xbox::services::system::xbox_live_user>,std::vector<std::string,std::allocator<std::string>> const&,std::string const&,std::string const&);
		void is_host(std::string const&);
		void last_tournament_team_result(void);
		void local_members(void);
		void local_members(void);
		void members(void);
		void members(void);
		void multiplayer_lobby_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_manager>);
		void multiplayer_lobby_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_manager>);
		void multiplayer_lobby_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void multiplayer_lobby_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>,std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>>>);
		void multiplayer_lobby_session(void);
		void multiplayer_lobby_session(void);
		void properties(void);
		void properties(void);
		void remove_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void remove_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void session_reference(void);
		void session_reference(void);
		void set_local_member_connection_address(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&,void const*);
		void set_local_member_properties(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&,web::json::value const&,void const*);
		void set_local_member_properties(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string const&,web::json::value const&,void const*);
		void set_properties(std::string const&,web::json::value const&,void const*);
		void set_properties(std::string const&,web::json::value const&,void const*);
		void set_synchronized_host(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>,void const*);
		void set_synchronized_properties(std::string const&,web::json::value const&,void const*);
		void ~multiplayer_lobby_session();
		void ~multiplayer_lobby_session();
		void connection_address(void);
		void connection_address(void);
		void game_state(void);
		void game_state(void);
		void is_primary_xbox_live_context(void);
		void is_primary_xbox_live_context(void);
		void lobby_handle_id(void);
		void lobby_handle_id(void);
		void lobby_state(void);
		void lobby_state(void);
		void multiplayer_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string,bool);
		void multiplayer_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>,std::string,bool);
		void rta_resync_context(void);
		void rta_resync_context(void);
		void rta_state_changed_context(void);
		void rta_state_changed_context(void);
		void session_changed_context(void);
		void session_changed_context(void);
		void set_connection_address(std::string);
		void set_connection_address(std::string);
		void set_game_state(xbox::services::multiplayer::manager::multiplayer_local_user_game_state);
		void set_game_state(xbox::services::multiplayer::manager::multiplayer_local_user_game_state);
		void set_is_primary_xbox_live_context(bool);
		void set_is_primary_xbox_live_context(bool);
		void set_lobby_handle_id(std::string const&);
		void set_lobby_handle_id(std::string const&);
		void set_lobby_state(xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state);
		void set_lobby_state(xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state);
		void set_rta_resync_context(int);
		void set_rta_resync_context(int);
		void set_rta_state_changed_context(int);
		void set_rta_state_changed_context(int);
		void set_session_changed_context(int);
		void set_session_changed_context(int);
		void set_subscription_lost_context(int);
		void set_subscription_lost_context(int);
		void set_write_changes_to_service(bool);
		void set_write_changes_to_service(bool);
		void subscription_lost_context(void);
		void write_changes_to_service(void);
		void write_changes_to_service(void);
		xbox_live_context(void);
		xbox_live_context(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void activate_multiplayer_events(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void add_user_to_xbox_live_context_to_map(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void add_user_to_xbox_live_context_to_map(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void change_all_local_user_game_state(xbox::services::multiplayer::manager::multiplayer_local_user_game_state);
		void change_all_local_user_game_state(xbox::services::multiplayer::manager::multiplayer_local_user_game_state);
		void change_all_local_user_lobby_state(xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state);
		void change_all_local_user_lobby_state(xbox::services::multiplayer::manager::multiplayer_local_user_lobby_state);
		void deactivate_multiplayer_events(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>);
		void deactivate_multiplayer_events(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>);
		void get_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_local_user(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_local_user(std::string const&);
		void get_local_user_helper(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_local_user_helper(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_local_user_helper(std::string const&);
		void get_local_user_helper(std::string const&);
		void get_local_user_map(void);
		void get_local_user_map(void);
		void get_primary_xbox_live_context(void);
		void get_primary_xbox_live_context(void);
		void get_xbox_live_context(std::string const&);
		void is_local_user_game_state(xbox::services::multiplayer::manager::multiplayer_local_user_game_state);
		void is_local_user_game_state(xbox::services::multiplayer::manager::multiplayer_local_user_game_state);
		void multiplayer_local_user_manager(void);
		void multiplayer_local_user_manager(void);
		void on_connection_state_changed(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,xbox::services::real_time_activity::real_time_activity_connection_state);
		void on_resync_message_received(void);
		void on_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void on_subscriptions_lost(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>);
		void remove_multiplayer_session_changed_handler(int);
		void remove_multiplayer_subscription_lost_handler(int);
		void remove_rta_resync_handler(int);
		void remove_stale_local_users_from_map(void);
		void remove_stale_local_users_from_map(void);
		void ~multiplayer_local_user_manager();
		void ~multiplayer_local_user_manager();
		void _Is_dirty(void);
		void auto_fill_members_during_matchmaking(void);
		void cancel_match(void);
		void do_work(void);
		void do_work(void);
		void estimated_match_wait_time(void);
		void find_match(std::string const&,web::json::value const&,std::chrono::duration<long long,std::ratio<1ll,1ll>> const&);
		void game_session(void);
		void get_singleton_instance(void);
		void initialize(std::string);
		void initialize(std::string);
		void join_game(std::string const&,std::string const&);
		void join_game_from_lobby(std::string const&);
		void join_in_progress(void);
		void join_lobby(std::string const&,std::shared_ptr<xbox::services::system::xbox_live_user>);
		void join_lobby(std::string const&,std::shared_ptr<xbox::services::system::xbox_live_user>);
		void leave_game(void);
		void lobby_session(void);
		void lobby_session(void);
		void match_status(void);
		void multiplayer_manager(void);
		void set_auto_fill_members_during_matchmaking(bool);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_join_in_progress(xbox::services::multiplayer::manager::join_in_progress_state,void const*);
		void set_multiplayer_game_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_game_session>);
		void set_multiplayer_game_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_game_session>);
		void set_multiplayer_lobby_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_lobby_session>);
		void set_multiplayer_lobby_session(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_lobby_session>);
		void set_quality_of_service_measurements(std::shared_ptr<std::vector<xbox::services::multiplayer::multiplayer_quality_of_service_measurements,std::allocator<xbox::services::multiplayer::multiplayer_quality_of_service_measurements>>>);
		void compare_sessions(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void compare_sessions(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void convert_to_game_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member> const&,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,bool);
		void convert_to_game_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member> const&,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,bool);
		void convert_to_game_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member> const&,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,std::map<std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::less<std::string>,std::allocator<std::pair<std::string const,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>>>>);
		void convert_to_game_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member> const&,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr const&<xbox::services::multiplayer::multiplayer_session>,std::map<std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::less<std::string>,std::allocator<std::pair<std::string const,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>>>>);
		void do_sessions_match(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void do_sessions_match(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void get_local_user_xbox_user_id(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_local_user_xbox_user_id(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void get_player_in_session(std::string const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void get_player_in_session(std::string const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void has_session_property_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::string const&);
		void has_session_property_changed(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&,std::string const&);
		void host_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void host_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void is_host(std::string const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void is_host(std::string const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void is_local(std::string const&,std::map<std::string,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>,std::less<std::string>,std::allocator<std::pair<std::string const,std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user>>>> const&);
		void is_player_in_session(std::string const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void is_player_in_session(std::string const&,std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void _Device_token(void);
		void _Device_token(void);
		void connection_address(void);
		void debug_gamertag(void);
		void debug_gamertag(void);
		void is_in_game(void);
		void is_in_lobby(void);
		void is_local(void);
		void is_member_on_same_device(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_member>);
		void member_id(void);
		void multiplayer_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,bool,bool,bool,bool,bool);
		void multiplayer_member(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,bool,bool,bool,bool,bool);
		void multiplayer_member(void);
		void properties(void);
		void properties(void);
		void status(void);
		void team_id(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void ~multiplayer_member();
		void ~multiplayer_member();
		void function<void ();
		void function<void ();
		void commit_pending_changes(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>,xbox::services::multiplayer::manager::multiplayer_session_type,bool);
		void commit_pending_changes(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>,xbox::services::multiplayer::manager::multiplayer_session_type,bool);
		void commit_pending_synchronized_changes(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void commit_pending_synchronized_changes(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>,xbox::services::multiplayer::manager::multiplayer_session_type);
		void commit_synchronized_changes(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void commit_synchronized_changes(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void destroy(void);
		void get_current_session_helper(std::shared_ptr<xbox::services::xbox_live_context>,xbox::services::multiplayer::multiplayer_session_reference const&);
		void get_current_session_helper(std::shared_ptr<xbox::services::xbox_live_context>,xbox::services::multiplayer::multiplayer_session_reference const&);
		void get_primary_xbox_live_context(void);
		void handle_events(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>,std::error_code const&,std::string const&,xbox::services::multiplayer::manager::multiplayer_session_type);
		void handle_events(std::vector<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_client_pending_request>>>,std::error_code const&,std::string const&,xbox::services::multiplayer::manager::multiplayer_session_type);
		void is_tap_received(void);
		void is_write_in_progress(void);
		void leave_remote_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool);
		void leave_remote_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,bool);
		void multiplayer_session_writer(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_session_writer(std::shared_ptr<xbox::services::multiplayer::manager::multiplayer_local_user_manager>);
		void multiplayer_session_writer(void);
		void multiplayer_session_writer(void);
		void on_resync_message_received(void);
		void on_resync_message_received(void);
		void on_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void on_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void on_session_updated(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void resync(void);
		void session(void);
		void session(void);
		void set_tap_change_number(ulong long);
		void set_tap_received(bool);
		void set_write_in_progress(bool);
		void tap_change_number(void);
		void update_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void update_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session> const&);
		void write_session(std::shared_ptr<xbox::services::xbox_live_context>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,bool);
		void write_session(std::shared_ptr<xbox::services::xbox_live_context>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,bool);
		void write_session_by_handle(std::shared_ptr<xbox::services::xbox_live_context>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,std::string const&,bool);
		void write_session_by_handle(std::shared_ptr<xbox::services::xbox_live_context>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,std::string const&,bool);
		void write_session_helper(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>,bool);
		void write_session_helper(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>,bool);
		void ~multiplayer_session_writer();
		void ~multiplayer_session_writer();
		void connection_address_to_device_tokens(void);
		void perform_qos_measurements_event_args(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>);
		void perform_qos_measurements_event_args(std::map<std::string,std::string,std::less<std::string>,std::allocator<std::pair<std::string const,std::string>>>);
		void ~perform_qos_measurements_event_args();
		void ~perform_qos_measurements_event_args();
		void ~perform_qos_measurements_event_args();
		void ~perform_qos_measurements_event_args();
		void properties(void);
		void properties(void);
		void session_property_changed_event_args(web::json::value);
		void session_property_changed_event_args(web::json::value);
		void ~session_property_changed_event_args();
		void ~session_property_changed_event_args();
		void ~session_property_changed_event_args();
		void ~session_property_changed_event_args();
		void game_session_reference(void);
		void start_time(void);
		void tournament_game_session_ready_event_args(utility::datetime,xbox::services::multiplayer::multiplayer_session_reference);
		void tournament_game_session_ready_event_args(utility::datetime,xbox::services::multiplayer::multiplayer_session_reference);
		void ~tournament_game_session_ready_event_args();
		void ~tournament_game_session_ready_event_args();
		void ~tournament_game_session_ready_event_args();
		void ~tournament_game_session_ready_event_args();
		void registration_reason(void);
		void registration_state(void);
		void tournament_registration_state_changed_event_args(xbox::services::tournaments::tournament_registration_state,xbox::services::tournaments::tournament_registration_reason);
		void tournament_registration_state_changed_event_args(xbox::services::tournaments::tournament_registration_state,xbox::services::tournaments::tournament_registration_reason);
		void ~tournament_registration_state_changed_event_args();
		void ~tournament_registration_state_changed_event_args();
		void user_added_event_args(std::string);
		void user_added_event_args(std::string);
		xbox_user_id(void);
		void ~user_added_event_args();
		void ~user_added_event_args();
		void ~user_added_event_args();
		void ~user_added_event_args();
		void user_removed_event_args(std::string);
		void user_removed_event_args(std::string);
		xbox_user_id(void);
		void ~user_removed_event_args();
		void ~user_removed_event_args();
		void ~user_removed_event_args();
		void ~user_removed_event_args();
		void _Deserialize(web::json::value const&);
		void closed(void);
		void handle_id(void);
		void handle_id(void);
		void join_restriction(void);
		void max_members_count(void);
		void max_members_count(void);
		void members_count(void);
		void members_count(void);
		void multiplayer_activity_details(void);
		void multiplayer_activity_details(xbox::services::multiplayer::multiplayer_activity_details const&);
		void multiplayer_activity_details(xbox::services::multiplayer::multiplayer_activity_details const&);
		void owner_xbox_user_id(void);
		void session_reference(void);
		void session_reference(void);
		void title_id(void);
		void visibility(void);
		void ~multiplayer_activity_details();
		void ~multiplayer_activity_details();
		void multiplayer_activity_handle_post_request(void);
		void multiplayer_activity_handle_post_request(xbox::services::multiplayer::multiplayer_session_reference,uint);
		void multiplayer_activity_handle_post_request(xbox::services::multiplayer::multiplayer_session_reference,uint);
		void serialize(void);
		void serialize(void);
		void session_reference(void);
		void version(void);
		void multiplayer_activity_query_post_request(std::string,std::string,std::string);
		void multiplayer_activity_query_post_request(std::string,std::string,std::string);
		void multiplayer_activity_query_post_request(std::string,std::vector<std::string,std::allocator<std::string>>);
		void multiplayer_activity_query_post_request(std::string,std::vector<std::string,std::allocator<std::string>>);
		void multiplayer_activity_query_post_request(void);
		void scid(void);
		void serialize(void);
		void serialize(void);
		void social_group(void);
		void social_group_xuid(void);
		void xuids(void);
		void ~multiplayer_activity_query_post_request();
		void ~multiplayer_activity_query_post_request();
		void contract_version_filter(void);
		void contract_version_filter(void);
		void include_inactive_sessions(void);
		void include_inactive_sessions(void);
		void include_private_sessions(void);
		void include_private_sessions(void);
		void include_reservations(void);
		void include_reservations(void);
		void keyword_filter(void);
		void keyword_filter(void);
		void max_items(void);
		void max_items(void);
		void multiplayer_get_sessions_request(std::string,uint);
		void service_configuration_id(void);
		void service_configuration_id(void);
		void session_template_name_filter(void);
		void session_template_name_filter(void);
		void set_contract_version_filter(uint);
		void set_include_inactive_sessions(bool);
		void set_include_private_sessions(bool);
		void set_include_reservations(bool);
		void set_keyword_filter(std::string const&);
		void set_session_template_name_filter(std::string const&);
		void set_visibility_filter(xbox::services::multiplayer::multiplayer_session_visibility);
		void set_xbox_user_id_filter(std::string const&);
		void set_xbox_user_ids_filter(std::vector<std::string,std::allocator<std::string>>);
		void visibility_filter(void);
		void visibility_filter(void);
		xbox_user_id_filter(void);
		xbox_user_id_filter(void);
		xbox_user_ids_filter(void);
		xbox_user_ids_filter(void);
		void deserialize(web::json::value const&);
		void deserialize(web::json::value const&);
		void handle_id(void);
		void handle_id(void);
		void multiplayer_invite(void);
		void multiplayer_invite(void);
		void context_string(void);
		void custom_activation_context(void);
		void invited_xbox_user_id(void);
		void multiplayer_invite_handle_post_request(void);
		void multiplayer_invite_handle_post_request(xbox::services::multiplayer::multiplayer_session_reference,uint,std::string,uint,std::string,std::string);
		void multiplayer_invite_handle_post_request(xbox::services::multiplayer::multiplayer_session_reference,uint,std::string,uint,std::string,std::string);
		void serialize(void);
		void serialize(void);
		void session_reference(void);
		void title_id(void);
		void version(void);
		void ~multiplayer_invite_handle_post_request();
		void ~multiplayer_invite_handle_post_request();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Serialize(void);
		void _Serialize(void);
		void auto_evaluate(void);
		void evaluation_timeout(void);
		void join_timeout(void);
		void managed_initialization_set(void);
		void measurement_timeout(void);
		void members_need_to_start(void);
		void multiplayer_managed_initialization(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,bool,uint);
		void multiplayer_managed_initialization(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,bool,uint);
		void multiplayer_managed_initialization(void);
		void multiplayer_managed_initialization(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Serialize(void);
		void _Serialize(void);
		void bandwidth_down_minimum_in_kilobits_per_second(void);
		void bandwidth_up_minimum_in_kilobits_per_second(void);
		void host_selection_metric(void);
		void latency_maximum(void);
		void multiplayer_peer_to_host_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint,uint,xbox::services::multiplayer::multiplay_metrics);
		void multiplayer_peer_to_host_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint,uint,xbox::services::multiplayer::multiplay_metrics);
		void multiplayer_peer_to_host_requirements(void);
		void multiplayer_peer_to_host_requirements(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Serialize(void);
		void _Serialize(void);
		void bandwidth_minimum_in_kilobits_per_second(void);
		void latency_maximum(void);
		void multiplayer_peer_to_peer_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint);
		void multiplayer_peer_to_peer_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint);
		void multiplayer_peer_to_peer_requirements(void);
		void multiplayer_peer_to_peer_requirements(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Set_member_device_token(std::string const&);
		void _Set_member_device_token(std::string const&);
		void bandwidth_down_in_kilobits_per_second(void);
		void bandwidth_down_in_kilobits_per_second(void);
		void bandwidth_up_in_kilobits_per_second(void);
		void bandwidth_up_in_kilobits_per_second(void);
		void custom_json(void);
		void custom_json(void);
		void latency(void);
		void latency(void);
		void member_device_token(void);
		void member_device_token(void);
		void multiplayer_quality_of_service_measurements(std::string,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,ulong long,ulong long,std::string);
		void multiplayer_quality_of_service_measurements(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void clear_activity(std::string const&);
		void disable_multiplayer_subscriptions(void);
		void disable_multiplayer_subscriptions(void);
		void enable_multiplayer_subscriptions(void);
		void enable_multiplayer_subscriptions(void);
		void get_activities_for_social_group(std::string const&,std::string const&,std::string const&);
		void get_activities_for_social_group(std::string const&,std::string const&,std::string const&);
		void get_activities_for_users(std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void get_activities_for_users(std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void get_current_session(xbox::services::multiplayer::multiplayer_session_reference);
		void get_current_session(xbox::services::multiplayer::multiplayer_session_reference);
		void get_current_session_by_handle(std::string const&);
		void get_current_session_by_handle(std::string const&);
		void get_sessions(xbox::services::multiplayer::multiplayer_get_sessions_request);
		void multiplayer_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void multiplayer_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void multiplayer_service(void);
		void multiplayer_service(void);
		void multiplayer_session_directory_create_or_update_by_handle_subpath(std::string const&);
		void multiplayer_session_directory_create_or_update_by_handle_subpath(std::string const&);
		void multiplayer_session_directory_create_or_update_subpath(std::string const&,std::string const&,std::string const&);
		void multiplayer_session_directory_create_or_update_subpath(std::string const&,std::string const&,std::string const&);
		void multiplayer_session_directory_get_sessions_sub_path(std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,uint,bool,bool,bool,bool,uint);
		void multiplayer_session_directory_get_sessions_sub_path(std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,uint,bool,bool,bool,bool,uint);
		void operator=(xbox::services::multiplayer::multiplayer_service const&);
		void operator=(xbox::services::multiplayer::multiplayer_service const&);
		void operator=(xbox::services::multiplayer::multiplayer_service&&);
		void operator=(xbox::services::multiplayer::multiplayer_service&&);
		void remove_multiplayer_session_changed_handler(int);
		void remove_multiplayer_session_changed_handler(int);
		void remove_multiplayer_subscription_lost_handler(int);
		void send_invites(xbox::services::multiplayer::multiplayer_session_reference,std::vector<std::string,std::allocator<std::string>> const&,uint);
		void send_invites(xbox::services::multiplayer::multiplayer_session_reference,std::vector<std::string,std::allocator<std::string>> const&,uint);
		void send_invites(xbox::services::multiplayer::multiplayer_session_reference,std::vector<std::string,std::allocator<std::string>> const&,uint,std::string const&,std::string const&);
		void send_invites(xbox::services::multiplayer::multiplayer_session_reference,std::vector<std::string,std::allocator<std::string>> const&,uint,std::string const&,std::string const&);
		void set_activity(xbox::services::multiplayer::multiplayer_session_reference);
		void set_activity(xbox::services::multiplayer::multiplayer_session_reference);
		void set_transfer_handle(xbox::services::multiplayer::multiplayer_session_reference,xbox::services::multiplayer::multiplayer_session_reference);
		void set_transfer_handle(xbox::services::multiplayer::multiplayer_session_reference,xbox::services::multiplayer::multiplayer_session_reference);
		void subscriptions_enabled(void);
		void subscriptions_enabled(void);
		void write_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode);
		void write_session(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode);
		void write_session_by_handle(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,std::string const&);
		void write_session_by_handle(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,std::string const&);
		void write_session_using_subpath(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,std::string const&);
		void write_session_using_subpath(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,xbox::services::multiplayer::multiplayer_session_write_mode,std::string const&);
		void ~multiplayer_service();
		void ~multiplayer_service();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void disable_multiplayer_subscriptions(void);
		void disable_multiplayer_subscriptions(void);
		void enable_multiplayer_subscriptions(void);
		void enable_multiplayer_subscriptions(void);
		void ensure_multiplayer_subscription(void);
		void ensure_multiplayer_subscription(void);
		void multiplayer_service_impl(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void multiplayer_service_impl(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void multiplayer_session_changed(xbox::services::multiplayer::multiplayer_session_change_event_args const&);
		void multiplayer_subscription_lost(void);
		void remove_multiplayer_session_changed_handler(int);
		void remove_multiplayer_session_changed_handler(int);
		void remove_multiplayer_subscription_lost_handler(int);
		void remove_multiplayer_subscription_lost_handler(int);
		void subscriptions_enabled(void);
		void subscriptions_enabled(void);
		void ~multiplayer_service_impl();
		void ~multiplayer_service_impl();
		void _Convert_matchmaking_status_to_string(xbox::services::multiplayer::matchmaking_status);
		void _Convert_multiplayer_host_selection_metric_to_string(xbox::services::multiplayer::multiplay_metrics);
		void _Convert_multiplayer_host_selection_metric_to_string(xbox::services::multiplayer::multiplay_metrics);
		void _Convert_string_to_matchmaking_status(std::string const&);
		void _Convert_string_to_matchmaking_status(std::string const&);
		void _Convert_string_to_multiplayer_host_selection_metric(std::string const&);
		void _Convert_string_to_multiplayer_host_selection_metric(std::string const&);
		void _Convert_string_to_multiplayer_initialization_stage(std::string const&);
		void _Convert_string_to_multiplayer_initialization_stage(std::string const&);
		void _Create_deep_copy(void);
		void _Create_deep_copy(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize_me_member(web::json::value const&,std::error_code &);
		void _Deserialize_me_member(web::json::value const&,std::error_code &);
		void _Deserialize_members_list(web::json::value const&,std::error_code &);
		void _Deserialize_members_list(web::json::value const&,std::error_code &);
		void _Initialize(std::string);
		void _Initialize(std::string);
		void _Initialize_after_deserialize(std::string,std::string,xbox::services::multiplayer::multiplayer_session_reference,std::string);
		void _Initialize_after_deserialize(std::string,std::string,xbox::services::multiplayer::multiplayer_session_reference,std::string);
		void _Populate_members_with_members_list(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void _Populate_members_with_members_list(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void _Session_request(void);
		void _Session_request(void);
		void _Set_write_session_status(int);
		void _Set_write_session_status(int);
		void add_member_reservation(std::string const&,web::json::value const&);
		void add_member_reservation(std::string const&,web::json::value const&,bool);
		void add_member_reservation_helper(std::string const&,web::json::value const&,bool,bool);
		void add_member_reservation_helper(std::string const&,web::json::value const&,bool,bool);
		void arbitration_server(void);
		void arbitration_server(void);
		void branch(void);
		void change_number(void);
		void change_number(void);
		void compare_multiplayer_sessions(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void compare_multiplayer_sessions(std::shared_ptr<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::multiplayer::multiplayer_session>);
		void convert_http_status_to_write_session_status(int);
		void current_user(void);
		void current_user(void);
		void date_of_next_timer(void);
		void date_of_next_timer(void);
		void date_of_session(void);
		void date_of_session(void);
		void deep_copy_from(xbox::services::multiplayer::multiplayer_session const&);
		void deep_copy_from(xbox::services::multiplayer::multiplayer_session const&);
		void delete_current_user_member_custom_property_json(std::string const&);
		void delete_session_custom_property_json(std::string const&);
		void delete_session_custom_property_json(std::string const&);
		void e_tag(void);
		void e_tag(void);
		void ensure_session_subscription_id_initialized(void);
		void host_candidates(void);
		void initialization_stage(void);
		void initialization_stage(void);
		void initializing_stage_start_time(void);
		void intializing_episode(void);
		void intializing_episode(void);
		void join(web::json::value const&,bool,bool,bool);
		void join(web::json::value const&,bool,bool,bool);
		void join_helper(web::json::value,bool,bool,bool);
		void join_helper(web::json::value,bool,bool,bool);
		void leave(void);
		void leave(void);
		void matchmaking_server(void);
		void matchmaking_server(void);
		void members(void);
		void members(void);
		void members_accepted(void);
		void multiplayer_correlation_id(void);
		void multiplayer_correlation_id(void);
		void multiplayer_session(std::string);
		void multiplayer_session(std::string);
		void multiplayer_session(std::string,xbox::services::multiplayer::multiplayer_session_reference);
		void multiplayer_session(std::string,xbox::services::multiplayer::multiplayer_session_reference);
		void multiplayer_session(std::string,xbox::services::multiplayer::multiplayer_session_reference,uint,xbox::services::multiplayer::multiplayer_session_visibility,std::vector<std::string,std::allocator<std::string>>,web::json::value);
		void multiplayer_session(void);
		void multiplayer_session(void);
		void multiplayer_session(void);
		void multiplayer_session(xbox::services::multiplayer::multiplayer_session const&);
		void multiplayer_session(xbox::services::multiplayer::multiplayer_session const&);
		void multiplayer_session(xbox::services::multiplayer::multiplayer_session&&);
		void multiplayer_session(xbox::services::multiplayer::multiplayer_session&&);
		void operator=(xbox::services::multiplayer::multiplayer_session const&);
		void operator=(xbox::services::multiplayer::multiplayer_session const&);
		void operator=(xbox::services::multiplayer::multiplayer_session&&);
		void operator=(xbox::services::multiplayer::multiplayer_session&&);
		void servers_json(void);
		void session_constants(void);
		void session_properties(void);
		void session_properties(void);
		void session_reference(void);
		void session_reference(void);
		void set_closed(bool);
		void set_closed(bool);
		void set_current_user_member_arbitration_results(std::unordered_map<std::string,xbox::services::tournaments::tournament_team_result,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,xbox::services::tournaments::tournament_team_result>>> const&);
		void set_current_user_member_custom_property_json(std::string const&,web::json::value const&);
		void set_current_user_member_custom_property_json(std::string const&,web::json::value const&);
		void set_current_user_members_in_group(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>> const&);
		void set_current_user_quality_of_service_measurements(std::shared_ptr<std::vector<xbox::services::multiplayer::multiplayer_quality_of_service_measurements,std::allocator<xbox::services::multiplayer::multiplayer_quality_of_service_measurements>>>);
		void set_current_user_quality_of_service_measurements(std::shared_ptr<std::vector<xbox::services::multiplayer::multiplayer_quality_of_service_measurements,std::allocator<xbox::services::multiplayer::multiplayer_quality_of_service_measurements>>>);
		void set_current_user_quality_of_service_measurements_json(web::json::value const&);
		void set_current_user_secure_device_address_base64(std::string const&);
		void set_current_user_secure_device_address_base64(std::string const&);
		void set_current_user_status(xbox::services::multiplayer::multiplayer_session_member_status);
		void set_host_device_token(std::string const&);
		void set_host_device_token(std::string const&);
		void set_initialization_status(bool);
		void set_managed_initialization(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,bool,uint);
		void set_matchmaking_resubmit(bool);
		void set_matchmaking_resubmit(bool);
		void set_matchmaking_server_connection_path(std::string const&);
		void set_matchmaking_target_session_constants_json(web::json::value);
		void set_max_members_in_session(uint);
		void set_measurement_server_addresses(std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>> const&);
		void set_peer_to_host_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint,uint,xbox::services::multiplayer::multiplay_metrics);
		void set_peer_to_peer_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint);
		void set_quality_of_service_connectivity_metrics(bool,bool,bool,bool);
		void set_server_connection_string_candidates(std::vector<std::string,std::allocator<std::string>> const&);
		void set_servers_json(web::json::value const&);
		void set_session_capabilities(xbox::services::multiplayer::multiplayer_session_capabilities const&);
		void set_session_change_subscription(xbox::services::multiplayer::multiplayer_session_change_types);
		void set_session_change_subscription(xbox::services::multiplayer::multiplayer_session_change_types);
		void set_session_custom_property_json(std::string const&,web::json::value const&);
		void set_session_custom_property_json(std::string const&,web::json::value const&);
		void set_timeouts(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>);
		void set_visibility(xbox::services::multiplayer::multiplayer_session_visibility);
		void start_time(void);
		void subscribed_change_types(void);
		void tournaments_server(void);
		void tournaments_server(void);
		void write_status(void);
		void ~multiplayer_session();
		void ~multiplayer_session();
		void _Convert_string_to_arbitration_state(std::string const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Is_null(void);
		void _Is_same(xbox::services::multiplayer::multiplayer_session_arbitration_server const&);
		void _Is_same(xbox::services::multiplayer::multiplayer_session_arbitration_server const&);
		void multiplayer_session_arbitration_server(void);
		void multiplayer_session_arbitration_server(void);
		void result_confidence_level(void);
		void result_source(void);
		void result_state(void);
		void result_state(void);
		void results(void);
		void results(void);
		void connection_required_for_active_members(void);
		void connection_required_for_active_members(void);
		void connectivity(void);
		void connectivity(void);
		void crossplay(void);
		void crossplay(void);
		void gameplay(void);
		void gameplay(void);
		void large(void);
		void large(void);
		void multiplayer_session_capabilities(void);
		void multiplayer_session_capabilities(void);
		void set_connection_required_for_active_members(bool);
		void set_connection_required_for_active_members(bool);
		void set_connectivity(bool);
		void set_connectivity(bool);
		void set_crossplay(bool);
		void set_crossplay(bool);
		void set_gameplay(bool);
		void set_gameplay(bool);
		void set_large(bool);
		void set_large(bool);
		void set_suppress_presence_activity_check(bool);
		void set_suppress_presence_activity_check(bool);
		void set_user_authorization_style(bool);
		void set_user_authorization_style(bool);
		void suppress_presence_activity_check(void);
		void suppress_presence_activity_check(void);
		void team(void);
		void team(void);
		void user_authorization_style(void);
		void user_authorization_style(void);
		void branch(void);
		void change_number(void);
		void change_number(void);
		void multiplayer_session_change_event_args(xbox::services::multiplayer::multiplayer_session_reference,std::string,ulong long);
		void multiplayer_session_change_event_args(xbox::services::multiplayer::multiplayer_session_reference,std::string,ulong long);
		void session_reference(void);
		void session_reference(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Serialize(void);
		void _Serialize(void);
		void _Set_managed_initialization(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,bool,uint);
		void _Set_measurement_server_addresses(std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>> const&);
		void _Set_peer_to_host_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint,uint,xbox::services::multiplayer::multiplay_metrics);
		void _Set_peer_to_peer_requirements(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,uint);
		void _Set_quality_of_service_connectivity_metrics(bool,bool,bool,bool);
		void _Set_session_capabilities(xbox::services::multiplayer::multiplayer_session_capabilities const&);
		void _Set_timeouts(std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>,std::chrono::duration<long long,std::ratio<1ll,1000ll>>);
		void capabilities_large(void);
		void initiator_xbox_user_ids(void);
		void max_members_in_session(void);
		void max_members_in_session(void);
		void measurement_server_addresses_json(void);
		void multiplayer_session_constants(uint,xbox::services::multiplayer::multiplayer_session_visibility,std::vector<std::string,std::allocator<std::string>>,web::json::value);
		void multiplayer_session_constants(uint,xbox::services::multiplayer::multiplayer_session_visibility,std::vector<std::string,std::allocator<std::string>>,web::json::value);
		void multiplayer_session_constants(void);
		void multiplayer_session_constants(void);
		void multiplayer_session_constants(void);
		void multiplayer_session_constants(xbox::services::multiplayer::multiplayer_session_constants const&);
		void multiplayer_session_constants(xbox::services::multiplayer::multiplayer_session_constants const&);
		void session_custom_constants_json(void);
		void set_max_members_in_session(uint);
		void set_max_members_in_session(uint);
		void set_visibility(xbox::services::multiplayer::multiplayer_session_visibility);
		void set_visibility(xbox::services::multiplayer::multiplayer_session_visibility);
		void visibility(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void is_null(void);
		void is_null(void);
		void multiplayer_session_matchmaking_server(void);
		void multiplayer_session_matchmaking_server(void);
		void multiplayer_session_matchmaking_server(xbox::services::multiplayer::multiplayer_session_matchmaking_server const&);
		void multiplayer_session_matchmaking_server(xbox::services::multiplayer::multiplayer_session_matchmaking_server const&);
		void status(void);
		void status(void);
		void status_details(void);
		void target_session_ref(void);
		void target_session_ref(void);
		void typical_wait(void);
		void _Convert_string_to_arbitration_status(std::string const&);
		void _Convert_string_to_arbitration_status(std::string const&);
		void _Convert_string_to_multiplayer_metric_stage(std::string const&);
		void _Convert_string_to_multiplayer_metric_stage(std::string const&);
		void _Convert_string_to_multiplayer_nat_setting(std::string const&);
		void _Convert_string_to_multiplayer_nat_setting(std::string const&);
		void _Convert_string_vector_to_change_types(std::vector<std::string,std::allocator<std::string>>);
		void _Convert_string_vector_to_change_types(std::vector<std::string,std::allocator<std::string>>);
		void _Create_deep_copy(void);
		void _Create_deep_copy(void);
		void _Delete_custom_property_json(std::string const&);
		void _Delete_custom_property_json(std::string const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Member_request(void);
		void _Member_request(void);
		void _Session_request(void);
		void _Set_arbitration_results(std::unordered_map<std::string,xbox::services::tournaments::tournament_team_result,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,xbox::services::tournaments::tournament_team_result>>> const&);
		void _Set_arbitration_results(std::unordered_map<std::string,xbox::services::tournaments::tournament_team_result,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,xbox::services::tournaments::tournament_team_result>>> const&);
		void _Set_current_user_members_in_group(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void _Set_current_user_members_in_group(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void _Set_current_user_quality_of_service_measurements(std::shared_ptr<std::vector<xbox::services::multiplayer::multiplayer_quality_of_service_measurements,std::allocator<xbox::services::multiplayer::multiplayer_quality_of_service_measurements>>>);
		void _Set_current_user_quality_of_service_measurements(std::shared_ptr<std::vector<xbox::services::multiplayer::multiplayer_quality_of_service_measurements,std::allocator<xbox::services::multiplayer::multiplayer_quality_of_service_measurements>>>);
		void _Set_current_user_quality_of_service_server_measurements_json(web::json::value);
		void _Set_current_user_quality_of_service_server_measurements_json(web::json::value);
		void _Set_current_user_status(xbox::services::multiplayer::multiplayer_session_member_status);
		void _Set_current_user_status(xbox::services::multiplayer::multiplayer_session_member_status);
		void _Set_is_current_user(bool);
		void _Set_is_current_user(bool);
		void _Set_member_custom_property_json(std::string const&,web::json::value const&);
		void _Set_member_id(uint);
		void _Set_member_id(uint);
		void _Set_member_request(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member_request>);
		void _Set_member_request(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member_request>);
		void _Set_rta_connection_id(std::string const&);
		void _Set_rta_connection_id(std::string const&);
		void _Set_secure_device_base_address64(std::string const&);
		void _Set_session_change_subscription(xbox::services::multiplayer::multiplayer_session_change_types,std::string const&);
		void _Set_session_change_subscription(xbox::services::multiplayer::multiplayer_session_change_types,std::string const&);
		void _Set_session_request(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_request>);
		void _Set_session_request(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_request>);
		void _Subscribed_change_types(void);
		void _Subscribed_change_types(void);
		void active_title_id(void);
		void arbitration_status(void);
		void convert_measure_json_to_vector(void);
		void convert_measure_json_to_vector(void);
		void deep_copy_from(xbox::services::multiplayer::multiplayer_session_member const&);
		void device_token(void);
		void device_token(void);
		void encounters(void);
		void gamertag(void);
		void gamertag(void);
		void groups(void);
		void initialization_episode(void);
		void initialization_failure_cause(void);
		void initialization_failure_cause(void);
		void initialize_requested(void);
		void is_current_user(void);
		void is_current_user(void);
		void is_turn_available(void);
		void join_time(void);
		void matchmaking_result_server_measurements_json(void);
		void member_custom_constants_json(void);
		void member_custom_properties_json(void);
		void member_id(void);
		void member_id(void);
		void member_measurements(void);
		void member_server_measurements_json(void);
		void members_in_group(void);
		void multiplayer_session_member(bool,uint,std::string,web::json::value);
		void multiplayer_session_member(bool,uint,std::string,web::json::value);
		void multiplayer_session_member(void);
		void multiplayer_session_member(void);
		void multiplayer_session_member(void);
		void multiplayer_session_member(xbox::services::multiplayer::multiplayer_session_member const&);
		void multiplayer_session_member(xbox::services::multiplayer::multiplayer_session_member const&);
		void multiplayer_session_member(xbox::services::multiplayer::multiplayer_session_member&&);
		void multiplayer_session_member(xbox::services::multiplayer::multiplayer_session_member&&);
		void nat(void);
		void results(void);
		void secure_device_base_address64(void);
		void set_encounters(std::vector<std::string,std::allocator<std::string>>);
		void set_groups(std::vector<std::string,std::allocator<std::string>>);
		void set_members_list(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void set_members_list(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void status(void);
		void team_id(void);
		void team_id(void);
		void tournament_team_session_reference(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void ~multiplayer_session_member();
		void ~multiplayer_session_member();
		void custom_constants(void);
		void custom_properties(void);
		void custom_properties(void);
		void does_initialized_requested_exist(void);
		void encounters(void);
		void get_vector_view_for_change_types(xbox::services::multiplayer::multiplayer_session_change_types);
		void get_vector_view_for_change_types(xbox::services::multiplayer::multiplayer_session_change_types);
		void groups(void);
		void initialize_requested(void);
		void is_active(void);
		void member_id(void);
		void member_id(void);
		void member_measurements_json(void);
		void member_server_measurements_json(void);
		void members_in_group(void);
		void multiplayer_session_member_request(bool,std::string,std::string,web::json::value,bool,bool);
		void multiplayer_session_member_request(bool,std::string,std::string,web::json::value,bool,bool);
		void multiplayer_session_member_request(void);
		void multiplayer_session_member_request(void);
		void operator=(xbox::services::multiplayer::multiplayer_session_member_request const&);
		void operator=(xbox::services::multiplayer::multiplayer_session_member_request const&);
		void results(void);
		void rta_connection_id(void);
		void serialize(void);
		void serialize(void);
		void service_device_address_base64(void);
		void set_custom_properties(web::json::value);
		void set_custom_properties(web::json::value);
		void set_custom_properties_property(std::string,web::json::value);
		void set_custom_properties_property(std::string,web::json::value);
		void set_encounters(std::vector<std::string,std::allocator<std::string>>);
		void set_encounters(std::vector<std::string,std::allocator<std::string>>);
		void set_groups(std::vector<std::string,std::allocator<std::string>>);
		void set_groups(std::vector<std::string,std::allocator<std::string>>);
		void set_is_active(bool);
		void set_is_active(bool);
		void set_member_measurements_json(web::json::value);
		void set_member_measurements_json(web::json::value);
		void set_member_server_measurements_json(web::json::value);
		void set_member_server_measurements_json(web::json::value);
		void set_members_in_group(std::vector<uint,std::allocator<uint>>);
		void set_members_in_group(std::vector<uint,std::allocator<uint>>);
		void set_result(std::string const&,xbox::services::tournaments::tournament_team_result const&);
		void set_results(std::unordered_map<std::string,xbox::services::tournaments::tournament_team_result,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,xbox::services::tournaments::tournament_team_result>>> const&);
		void set_results(std::unordered_map<std::string,xbox::services::tournaments::tournament_team_result,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,xbox::services::tournaments::tournament_team_result>>> const&);
		void set_rta_connection_id(std::string);
		void set_rta_connection_id(std::string);
		void set_secure_device_address_base64(std::string);
		void set_secure_device_address_base64(std::string);
		void set_subscribed_change_types(xbox::services::multiplayer::multiplayer_session_change_types);
		void set_subscribed_change_types(xbox::services::multiplayer::multiplayer_session_change_types);
		void set_subscription_id(std::string);
		void set_subscription_id(std::string);
		void set_write_is_active(bool);
		void set_write_is_active(bool);
		void set_write_member_measurements_json(bool);
		void set_write_member_measurements_json(bool);
		void set_write_member_server_measurements_json(bool);
		void set_write_member_server_measurements_json(bool);
		void set_write_members_in_group(bool);
		void set_write_members_in_group(bool);
		void set_write_secure_device_address_base64(bool);
		void set_write_secure_device_address_base64(bool);
		void set_write_subscribed_change_types(bool);
		void set_write_subscribed_change_types(bool);
		void subscribed_change_types(void);
		void subscription_id(void);
		void write_constants(void);
		void write_is_active(void);
		void write_member_measurements_json(void);
		void write_member_server_measurements_json(void);
		void write_members_in_group(void);
		void write_request(void);
		void write_secure_device_address_base64(void);
		void write_subscribed_change_types(void);
		xbox_user_id(void);
		void ~multiplayer_session_member_request();
		void ~multiplayer_session_member_request();
		void _Deep_copy(xbox::services::multiplayer::multiplayer_session_properties const&);
		void _Deep_copy(xbox::services::multiplayer::multiplayer_session_properties const&);
		void _Delete_session_custom_property_json(std::string const&);
		void _Delete_session_custom_property_json(std::string const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Initialize(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_request>,std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void _Initialize(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_request>,std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void _Set_matchmaking_target_session_constants_json(web::json::value const&);
		void _Set_session_custom_property_json(std::string const&,web::json::value const&);
		void closed(void);
		void host_device_token(void);
		void host_device_token(void);
		void join_restriction(void);
		void matchmaking_server_connection_string(void);
		void multiplayer_session_properties(void);
		void multiplayer_session_properties(void);
		void multiplayer_session_properties(void);
		void multiplayer_session_properties(xbox::services::multiplayer::multiplayer_session_properties const&);
		void multiplayer_session_properties(xbox::services::multiplayer::multiplayer_session_properties const&);
		void multiplayer_session_properties(xbox::services::multiplayer::multiplayer_session_properties&&);
		void multiplayer_session_properties(xbox::services::multiplayer::multiplayer_session_properties&&);
		void session_custom_properties_json(void);
		void set_join_restriction(xbox::services::multiplayer::multiplayer_session_restriction);
		void set_read_restriction(xbox::services::multiplayer::multiplayer_session_restriction);
		void set_turn_collection(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member>>>);
		void ~multiplayer_session_properties();
		void ~multiplayer_session_properties();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Serialize(void);
		void _Serialize(void);
		void is_null(void);
		void is_null(void);
		void multiplayer_session_reference(std::string,std::string,std::string);
		void multiplayer_session_reference(std::string,std::string,std::string);
		void multiplayer_session_reference(std::string,std::string,std::string);
		void multiplayer_session_reference(void);
		void multiplayer_session_reference(void);
		void parse_from_uri_path(std::string const&);
		void parse_from_uri_path(std::string const&);
		void service_configuration_id(void);
		void service_configuration_id(void);
		void session_name(void);
		void session_name(void);
		void session_template_name(void);
		void session_template_name(void);
		void to_uri_path(void);
		void add_member_request(bool,bool,std::string,web::json::value,bool,bool);
		void add_member_request(bool,bool,std::string,web::json::value,bool,bool);
		void closed(void);
		void create_deep_copy(void);
		void create_deep_copy(void);
		void create_matchmaking_json(void);
		void create_matchmaking_json(void);
		void create_properties_json(void);
		void create_properties_json(void);
		void deep_copy_from(xbox::services::multiplayer::multiplayer_session_request const&);
		void deep_copy_from(xbox::services::multiplayer::multiplayer_session_request const&);
		void host_device_token(void);
		void initialization_succeeded(void);
		void join_restriction(void);
		void leave_session(void);
		void leave_session(void);
		void matchmaking_match_resubmit(void);
		void matchmaking_server_connection_path(void);
		void members(void);
		void multiplayer_session_request(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_constants>);
		void multiplayer_session_request(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_constants>);
		void multiplayer_session_request(void);
		void multiplayer_session_request(void);
		void read_restriction(void);
		void serialize(void);
		void serialize(void);
		void server_connection_string_candidates(void);
		void servers(void);
		void session_constants(void);
		void session_properties_custom_properties(void);
		void session_properties_custom_properties(void);
		void session_properties_keywords(void);
		void session_properties_target_sessions_constants(void);
		void session_properties_turns(void);
		void session_reference(void);
		void set_closed(bool);
		void set_closed(bool);
		void set_host_device_token(std::string);
		void set_host_device_token(std::string);
		void set_initialization_succeeded(bool);
		void set_initialization_succeeded(bool);
		void set_join_restriction(xbox::services::multiplayer::multiplayer_session_restriction);
		void set_join_restriction(xbox::services::multiplayer::multiplayer_session_restriction);
		void set_leave_session(bool);
		void set_matchmaking_match_resubmit(bool);
		void set_matchmaking_match_resubmit(bool);
		void set_matchmaking_server_connection_path(std::string);
		void set_matchmaking_server_connection_path(std::string);
		void set_members(std::vector<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member_request>,std::allocator<std::shared_ptr<xbox::services::multiplayer::multiplayer_session_member_request>>>);
		void set_read_restriction(xbox::services::multiplayer::multiplayer_session_restriction);
		void set_read_restriction(xbox::services::multiplayer::multiplayer_session_restriction);
		void set_server_connection_string_candidates(std::vector<std::string,std::allocator<std::string>>);
		void set_server_connection_string_candidates(std::vector<std::string,std::allocator<std::string>>);
		void set_servers(web::json::value);
		void set_servers(web::json::value);
		void set_session_constants(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_constants>);
		void set_session_constants(std::shared_ptr<xbox::services::multiplayer::multiplayer_session_constants>);
		void set_session_custom_properties(web::json::value);
		void set_session_custom_properties(web::json::value);
		void set_session_properties_keywords(std::vector<std::string,std::allocator<std::string>>);
		void set_session_properties_keywords(std::vector<std::string,std::allocator<std::string>>);
		void set_session_properties_target_sessions_constants(web::json::value);
		void set_session_properties_target_sessions_constants(web::json::value);
		void set_session_properties_turns(std::vector<uint,std::allocator<uint>>);
		void set_session_properties_turns(std::vector<uint,std::allocator<uint>>);
		void set_session_reference(xbox::services::multiplayer::multiplayer_session_reference);
		void set_session_reference(xbox::services::multiplayer::multiplayer_session_reference);
		void set_write_closed(bool);
		void set_write_closed(bool);
		void set_write_host_device_token(bool);
		void set_write_host_device_token(bool);
		void set_write_initialization_status(bool);
		void set_write_initialization_status(bool);
		void set_write_matchmaking_client_result(bool);
		void set_write_matchmaking_resubmit(bool);
		void set_write_matchmaking_resubmit(bool);
		void set_write_matchmaking_server_connection_path(bool);
		void set_write_matchmaking_server_connection_path(bool);
		void set_write_matchmaking_session_constants(bool);
		void set_write_matchmaking_session_constants(bool);
		void set_write_server_connection_string_candidates(bool);
		void set_write_server_connection_string_candidates(bool);
		void write_closed(void);
		void write_host_device_token(void);
		void write_initialization_status(void);
		void write_matchmaking_client_result(void);
		void write_matchmaking_resubmit(void);
		void write_matchmaking_server_connection_path(void);
		void write_matchmaking_session_constants(void);
		void write_server_connection_string_candidates(void);
		void ~multiplayer_session_request();
		void ~multiplayer_session_request();
		void _Convert_multiplayer_session_restriction_to_string(xbox::services::multiplayer::multiplayer_session_restriction);
		void _Convert_multiplayer_session_restriction_to_string(xbox::services::multiplayer::multiplayer_session_restriction);
		void _Convert_multiplayer_session_visibility_to_string(xbox::services::multiplayer::multiplayer_session_visibility);
		void _Convert_multiplayer_session_visibility_to_string(xbox::services::multiplayer::multiplayer_session_visibility);
		void _Convert_string_to_multiplayer_session_restriction(std::string const&);
		void _Convert_string_to_multiplayer_session_restriction(std::string const&);
		void _Convert_string_to_session_status(std::string const&);
		void _Convert_string_to_session_status(std::string const&);
		void _Convert_string_to_session_visibility(std::string const&);
		void _Convert_string_to_session_visibility(std::string const&);
		void _Deserialize(web::json::value const&);
		void accepted_member_count(void);
		void is_my_turn(void);
		void join_restriction(void);
		void keywords(void);
		void multiplayer_session_states(void);
		void multiplayer_session_states(void);
		void multiplayer_session_states(xbox::services::multiplayer::multiplayer_session_states const&);
		void multiplayer_session_states(xbox::services::multiplayer::multiplayer_session_states const&);
		void session_reference(void);
		void start_time(void);
		void status(void);
		void visibility(void);
		xbox_user_id(void);
		void ~multiplayer_session_states();
		void ~multiplayer_session_states();
		void _Convert_string_to_registration_reason(std::string const&);
		void _Convert_string_to_registration_reason(std::string const&);
		void _Convert_string_to_registration_result(std::string const&);
		void _Convert_string_to_registration_result(std::string const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Is_null(void);
		void _Is_same(xbox::services::multiplayer::multiplayer_session_tournaments_server const&);
		void _Is_same(xbox::services::multiplayer::multiplayer_session_tournaments_server const&);
		void last_game_end_time(void);
		void last_game_result_source(void);
		void last_team_result(void);
		void last_team_result(void);
		void multiplayer_session_tournaments_server(void);
		void multiplayer_session_tournaments_server(void);
		void multiplayer_session_tournaments_server(void);
		void multiplayer_session_tournaments_server(xbox::services::multiplayer::multiplayer_session_tournaments_server const&);
		void multiplayer_session_tournaments_server(xbox::services::multiplayer::multiplayer_session_tournaments_server const&);
		void next_game_session_reference(void);
		void next_game_session_reference(void);
		void next_game_start_time(void);
		void next_game_start_time(void);
		void registration_reason(void);
		void registration_reason(void);
		void registration_state(void);
		void registration_state(void);
		void teams(void);
		void teams(void);
		void tournament_reference(void);
		void ~multiplayer_session_tournaments_server();
		void ~multiplayer_session_tournaments_server();
		void _Set_state(xbox::services::real_time_activity::real_time_activity_subscription_state);
		void _Set_state(xbox::services::real_time_activity::real_time_activity_subscription_state);
		void function<void ();
		void function<void ();
		void on_event_received(web::json::value const&);
		void on_event_received(web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void rta_connection_id(void);
		void ~multiplayer_subscription();
		void ~multiplayer_subscription();
		void ~multiplayer_subscription();
		void ~multiplayer_subscription();
		void multiplayer_transfer_handle_post_request(void);
		void multiplayer_transfer_handle_post_request(xbox::services::multiplayer::multiplayer_session_reference,xbox::services::multiplayer::multiplayer_session_reference,uint);
		void multiplayer_transfer_handle_post_request(xbox::services::multiplayer::multiplayer_session_reference,xbox::services::multiplayer::multiplayer_session_reference,uint);
		void origin_session_reference(void);
		void serialize(void);
		void serialize(void);
		void target_session_reference(void);
		void version(void);
		void ~multiplayer_transfer_handle_post_request();
		void ~multiplayer_transfer_handle_post_request();
		void get_notification_service_singleton(void);
		void initialize(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void initialize(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void notification_service(void);
		void notification_service(void);
		void subscribe_to_notifications(void);
		void subscribe_to_notifications(void);
		void subscribe_to_notifications_helper(std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,std::vector<xbox::services::notification::notification_filter,std::allocator<xbox::services::notification::notification_filter>>);
		void subscribe_to_notifications_helper(std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,std::vector<xbox::services::notification::notification_filter,std::allocator<xbox::services::notification::notification_filter>>);
		void unsubscribe_from_notifications(std::string const&);
		void unsubscribe_from_notifications(std::string const&);
		void unsubscribe_from_notifications(void);
		void unsubscribe_from_notifications(void);
		void unsubscribe_from_notifications_helper(std::string const&);
		void unsubscribe_from_notifications_helper(std::string const&);
		void ~notification_service();
		void ~notification_service();
		void initialize(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void initialize(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void notification_service_android(void);
		void notification_service_android(void);
		void notificiation_registration_callback(_JNIEnv *,_jclass *,_jstring *,uchar);
		void notificiation_registration_callback(_JNIEnv *,_jclass *,_jstring *,uchar);
		void subscribe_to_notifications(void);
		void subscribe_to_notifications_finish(std::string const&,std::shared_ptr<xbox::services::notification::notification_service_android> const&);
		void subscribe_to_notifications_finish(std::string const&,std::shared_ptr<xbox::services::notification::notification_service_android> const&);
		void device_presence_change_event_args(std::string,xbox::services::presence::presence_device_type,bool);
		void device_presence_change_event_args(std::string,xbox::services::presence::presence_device_type,bool);
		void device_presence_change_event_args(void);
		void device_presence_change_event_args(void);
		void device_type(void);
		void is_user_logged_on_device(void);
		xbox_user_id(void);
		void function<void ();
		void function<void ();
		void on_event_received(web::json::value const&);
		void on_event_received(web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		xbox_user_id(void);
		void ~device_presence_change_subscription();
		void ~device_presence_change_subscription();
		void ~device_presence_change_subscription();
		void ~device_presence_change_subscription();
		void media_id(void);
		void media_id_type(void);
		void media_presence_data(std::string,xbox::services::presence::presence_media_id_type);
		void media_presence_data(void);
		void media_presence_data(void);
		void serialize(void);
		void serialize(void);
		void should_serialize(void);
		void should_serialize(void);
		void operator=(xbox::services::presence::presence_activity_data&&);
		void operator=(xbox::services::presence::presence_activity_data&&);
		void presence_activity_data(void);
		void presence_activity_data(void);
		void presence_activity_data(xbox::services::presence::presence_data,xbox::services::presence::media_presence_data);
		void presence_activity_data(xbox::services::presence::presence_data,xbox::services::presence::media_presence_data);
		void serialize(void);
		void serialize(void);
		void should_serialize(void);
		void should_serialize(void);
		void ~presence_activity_data();
		void ~presence_activity_data();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void broadcast_id(void);
		void operator!=(xbox::services::presence::presence_broadcast_record const&);
		void operator!=(xbox::services::presence::presence_broadcast_record const&);
		void presence_broadcast_record(void);
		void presence_broadcast_record(void);
		void provider(void);
		void session(void);
		void start_time(void);
		void viewer_count(void);
		void _Serialize(void);
		void _Serialize(void);
		void _Should_serialize(void);
		void _Should_serialize(void);
		void presence_data(std::string,std::string);
		void presence_data(std::string,std::string);
		void presence_data(std::string,std::string,std::vector<std::string,std::allocator<std::string>>);
		void presence_data(void);
		void presence_data(void);
		void presence_id(void);
		void presence_token_ids(void);
		void service_configuration_id(void);
		void _Add_title_record(uint,xbox::services::presence::title_presence_state);
		void _Add_title_record(uint,xbox::services::presence::title_presence_state);
		void _Convert_presence_device_type_to_string(xbox::services::presence::presence_device_type);
		void _Convert_presence_device_type_to_string(xbox::services::presence::presence_device_type);
		void _Convert_string_to_presence_device_type(std::string const&);
		void _Convert_string_to_presence_device_type(std::string const&);
		void _Deserialize(web::json::value const&);
		void create_map_from_title_records(std::vector<xbox::services::presence::presence_title_record,std::allocator<xbox::services::presence::presence_title_record>> const&);
		void create_map_from_title_records(std::vector<xbox::services::presence::presence_title_record,std::allocator<xbox::services::presence::presence_title_record>> const&);
		void device_type(void);
		void device_type(void);
		void operator!=(xbox::services::presence::presence_device_record const&);
		void presence_device_record(void);
		void presence_device_record(xbox::services::presence::presence_device_type);
		void presence_device_record(xbox::services::presence::presence_device_type);
		void presence_title_records(void);
		void presence_title_records(void);
		void _Compare(xbox::services::presence::presence_record const&,xbox::services::presence::presence_record const&);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Update_device(xbox::services::presence::presence_device_type,bool);
		void _Update_title(uint,xbox::services::presence::title_presence_state);
		void convert_string_to_user_presence_state(std::string const&);
		void convert_string_to_user_presence_state(std::string const&);
		void is_user_playing_title(uint);
		void presence_device_records(void);
		void presence_device_records(void);
		void presence_record(void);
		void presence_record(void);
		void user_state(void);
		void user_state(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void function<void ();
		void function<void ();
		void get_presence(std::string const&);
		void get_presence(std::string const&);
		void get_presence_for_multiple_users(std::vector<std::string,std::allocator<std::string>> const&);
		void get_presence_for_multiple_users(std::vector<std::string,std::allocator<std::string>> const&,std::vector const&<xbox::services::presence::presence_device_type,std::allocator<std::vector const>>,std::vector const&<uint,std::allocator<uint>>,xbox::services::presence::presence_detail_level,bool,bool);
		void get_presence_for_multiple_users(std::vector<std::string,std::allocator<std::string>> const&,std::vector const&<xbox::services::presence::presence_device_type,std::allocator<std::vector const>>,std::vector const&<uint,std::allocator<uint>>,xbox::services::presence::presence_detail_level,bool,bool);
		void get_presence_for_social_group(std::string const&);
		void get_presence_for_social_group(std::string const&,std::string const&,std::vector<xbox::services::presence::presence_device_type,std::allocator<xbox::services::presence::presence_device_type>> const&,std::vector const&<uint,std::allocator<uint>>,xbox::services::presence::presence_detail_level,bool,bool);
		void get_presence_for_social_group_subpath(std::string const&,std::string const&);
		void get_presence_for_social_group_subpath(std::string const&,std::string const&);
		void get_presence_sub_path(std::string const&);
		void get_presence_sub_path(std::string const&);
		void get_presence_user_batch_subpath(void);
		void operator=(xbox::services::presence::presence_service&&);
		void operator=(xbox::services::presence::presence_service&&);
		void presence_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void presence_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void presence_service(void);
		void presence_service(void);
		void remove_device_presence_changed_handler(int);
		void remove_title_presence_changed_handler(int);
		void set_presence(bool);
		void set_presence(bool);
		void set_presence(bool,xbox::services::presence::presence_data);
		void set_presence(bool,xbox::services::presence::presence_data);
		void set_presence_helper(bool,xbox::services::presence::presence_data);
		void set_presence_helper(bool,xbox::services::presence::presence_data);
		void set_presence_sub_path(std::string const&);
		void set_presence_sub_path(std::string const&);
		void subscribe_to_device_presence_change(std::string const&);
		void subscribe_to_title_presence_change(std::string const&,uint);
		void unsubscribe_from_device_presence_change(std::shared_ptr<xbox::services::presence::device_presence_change_subscription>);
		void unsubscribe_from_title_presence_change(std::shared_ptr<xbox::services::presence::title_presence_change_subscription>);
		void ~presence_service();
		void ~presence_service();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void device_presence_changed(xbox::services::presence::device_presence_change_event_args const&);
		void presence_service_impl(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void presence_service_impl(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void remove_device_presence_changed_handler(int);
		void remove_device_presence_changed_handler(int);
		void remove_title_presence_changed_handler(int);
		void remove_title_presence_changed_handler(int);
		void subscribe_to_device_presence_change(std::string const&);
		void subscribe_to_device_presence_change(std::string const&);
		void subscribe_to_title_presence_change(std::string const&,uint);
		void subscribe_to_title_presence_change(std::string const&,uint);
		void title_presence_changed(xbox::services::presence::title_presence_change_event_args const&);
		void unsubscribe_from_device_presence_change(std::shared_ptr<xbox::services::presence::device_presence_change_subscription>);
		void unsubscribe_from_device_presence_change(std::shared_ptr<xbox::services::presence::device_presence_change_subscription>);
		void unsubscribe_from_title_presence_change(std::shared_ptr<xbox::services::presence::title_presence_change_subscription>);
		void unsubscribe_from_title_presence_change(std::shared_ptr<xbox::services::presence::title_presence_change_subscription>);
		void ~presence_service_impl();
		void ~presence_service_impl();
		void _Convert_string_to_presence_title_view_state(std::string const&);
		void _Convert_string_to_presence_title_view_state(std::string const&);
		void _Deserialize(web::json::value const&);
		void _Set_title_state(xbox::services::presence::title_presence_state);
		void _Set_title_state(xbox::services::presence::title_presence_state);
		void broadcast_record(void);
		void is_title_active(void);
		void is_title_active(void);
		void last_modified_date(void);
		void operator!=(xbox::services::presence::presence_title_record const&);
		void operator!=(xbox::services::presence::presence_title_record const&);
		void presence(void);
		void presence(void);
		void presence_title_record(uint,xbox::services::presence::title_presence_state);
		void presence_title_record(uint,xbox::services::presence::title_presence_state);
		void presence_title_record(void);
		void presence_title_record(void);
		void presence_title_record(xbox::services::presence::presence_title_record const&);
		void presence_title_record(xbox::services::presence::presence_title_record const&);
		void presence_title_view(void);
		void title_id(void);
		void title_id(void);
		void title_name(void);
		void title_name(void);
		void ~presence_title_record();
		void ~presence_title_record();
		void presence_title_request(bool,xbox::services::presence::presence_data,xbox::services::presence::media_presence_data);
		void presence_title_request(bool,xbox::services::presence::presence_data,xbox::services::presence::media_presence_data);
		void serialize(void);
		void serialize(void);
		void convert_detail_level_to_string(xbox::services::presence::presence_detail_level);
		void convert_detail_level_to_string(xbox::services::presence::presence_detail_level);
		void presence_user_batch_request(std::vector<std::string,std::allocator<std::string>>,std::string,std::string,std::vector<xbox::services::presence::presence_device_type,std::allocator<xbox::services::presence::presence_device_type>>,std::vector<uint,std::allocator<uint>>,xbox::services::presence::presence_detail_level,bool,bool);
		void presence_user_batch_request(std::vector<std::string,std::allocator<std::string>>,std::string,std::string,std::vector<xbox::services::presence::presence_device_type,std::allocator<xbox::services::presence::presence_device_type>>,std::vector<uint,std::allocator<uint>>,xbox::services::presence::presence_detail_level,bool,bool);
		void serialize(void);
		void serialize(void);
		void ~presence_user_batch_request();
		void ~presence_user_batch_request();
		void get_presence_writer_singleton(void);
		void handle_timer_trigger(void);
		void presence_writer(void);
		void presence_writer(void);
		void set_active_in_title(void);
		void set_active_in_title(void);
		void set_inactive_in_title(void);
		void set_inactive_in_title(void);
		void start_timer(std::weak_ptr<xbox::services::presence::presence_writer>);
		void start_writer(xbox::services::presence::presence_service);
		void start_writer(xbox::services::presence::presence_service);
		void stop_writer(void);
		void stop_writer(void);
		void title_id(void);
		void title_presence_change_event_args(std::string,uint,xbox::services::presence::title_presence_state);
		void title_presence_change_event_args(std::string,uint,xbox::services::presence::title_presence_state);
		void title_presence_change_event_args(void);
		void title_presence_change_event_args(void);
		void title_state(void);
		xbox_user_id(void);
		void on_event_received(web::json::value const&);
		void on_event_received(web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void title_id(void);
		void function<void ();
		void function<void ();
		xbox_user_id(void);
		void ~title_presence_change_subscription();
		void ~title_presence_change_subscription();
		void ~title_presence_change_subscription();
		void ~title_presence_change_subscription();
		void deserializer(web::json::value const&);
		void deserializer(web::json::value const&);
		void deserializer(web::json::value const&);
		void _Deserializer(web::json::value const&);
		void initialize(uint,std::string const&);
		void initialize(uint,std::string const&);
		void items(void);
		void items(void);
		void multiple_permissions_check_result(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void _Deserializer(web::json::value const&);
		void _Deserializer(web::json::value const&);
		void deny_reasons(void);
		void initialize(std::string const&);
		void initialize(std::string const&);
		void is_allowed(void);
		void is_allowed(void);
		void permission_check_result(void);
		void permission_check_result(void);
		void permission_check_result(xbox::services::privacy::permission_check_result const&);
		void permission_check_result(xbox::services::privacy::permission_check_result const&);
		void permission_requested(void);
		void _Deserializer(web::json::value const&);
		void permission_deny_reason(void);
		void reason(void);
		void avoid_mute_list_sub_path(std::string const&,std::string const&);
		void avoid_mute_list_sub_path(std::string const&,std::string const&);
		void check_multiple_permissions_with_multiple_target_users(std::vector<std::string,std::allocator<std::string>>,std::vector<std::string,std::allocator<std::string>>);
		void check_multiple_permissions_with_multiple_target_users(std::vector<std::string,std::allocator<std::string>>,std::vector<std::string,std::allocator<std::string>>);
		void check_permission_with_target_user(std::string const&,std::string const&);
		void get_avoid_list(void);
		void get_avoid_list(void);
		void get_avoid_or_mute_list(std::string const&);
		void get_avoid_or_mute_list(std::string const&);
		void get_mute_list(void);
		void permission_batch_validate_sub_path(std::string const&);
		void permission_batch_validate_sub_path(std::string const&);
		void permission_validate_sub_path(std::string const&,std::string const&,std::string const&);
		void permission_validate_sub_path(std::string const&,std::string const&,std::string const&);
		void privacy_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void privacy_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void read_local_storage_helper(std::string const&);
		void read_local_storage_helper(std::string const&);
		void connection_state_to_string(xbox::services::web_socket_connection_state);
		void _Add_subscription(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_subscription>);
		void _Close_websocket(void);
		void _Close_websocket(void);
		void _Remove_subscription(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_subscription>);
		void _Remove_subscription(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_subscription>);
		void _Trigger_subscription_error(xbox::services::real_time_activity::real_time_activity_subscription_error_event_args);
		void activate(void);
		void activate(void);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void clear_all_subscriptions(void);
		void clear_all_subscriptions(void);
		void complete_subscribe(web::json::value &);
		void complete_subscribe(web::json::value &);
		void complete_unsubscribe(web::json::value &);
		void complete_unsubscribe(web::json::value &);
		void convert_rta_error_code_to_xbox_live_error_code(int);
		void convert_rta_error_code_to_xbox_live_error_code(int);
		void deactivate(void);
		void deactivate(void);
		void handle_change_event(web::json::value &);
		void handle_change_event(web::json::value &);
		void on_socket_connection_state_change(xbox::services::web_socket_connection_state,xbox::services::web_socket_connection_state);
		void on_socket_connection_state_change(xbox::services::web_socket_connection_state,xbox::services::web_socket_connection_state);
		void on_socket_message_received(std::string const&);
		void real_time_activity_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void real_time_activity_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void remove_connection_state_change_handler(int);
		void remove_connection_state_change_handler(int);
		void remove_resync_handler(int);
		void remove_resync_handler(int);
		void remove_subscription_error_handler(int);
		void submit_subscriptions(void);
		void submit_subscriptions(void);
		void trigger_resync_event(void);
		void trigger_resync_event(void);
		void ~real_time_activity_service();
		void ~real_time_activity_service();
		void _Set_state(xbox::services::real_time_activity::real_time_activity_subscription_state);
		void _Set_state(xbox::services::real_time_activity::real_time_activity_subscription_state);
		void on_event_received(web::json::value const&);
		void on_event_received(web::json::value const&);
		void on_state_changed(xbox::services::real_time_activity::real_time_activity_subscription_state);
		void on_state_changed(xbox::services::real_time_activity::real_time_activity_subscription_state);
		void on_subscription_created(uint,web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void function<void ();
		void function<void ();
		void real_time_activity_subscription(xbox::services::real_time_activity::real_time_activity_subscription const&);
		void real_time_activity_subscription(xbox::services::real_time_activity::real_time_activity_subscription const&);
		void resource_uri(void);
		void resource_uri(void);
		void set_resource_uri(std::string);
		void set_subscription_id(uint);
		void state(void);
		void state(void);
		void subscription_id(void);
		void subscription_id(void);
		void ~real_time_activity_subscription();
		void ~real_time_activity_subscription();
		void ~real_time_activity_subscription();
		void ~real_time_activity_subscription();
		void err(void);
		void err_message(void);
		void real_time_activity_subscription_error_event_args(xbox::services::real_time_activity::real_time_activity_subscription,std::error_code,std::string);
		void real_time_activity_subscription_error_event_args(xbox::services::real_time_activity::real_time_activity_subscription,std::error_code,std::string);
		void real_time_activity_subscription_error_event_args(xbox::services::real_time_activity::real_time_activity_subscription_error_event_args const&);
		void real_time_activity_subscription_error_event_args(xbox::services::real_time_activity::real_time_activity_subscription_error_event_args const&);
		void subscription(void);
		void get_small_gamerpic(web::uri const&,xbox::services::social::profile_service::xbox_image_size);
		void get_small_gamerpic(web::uri const&,xbox::services::social::profile_service::xbox_image_size);
		void get_user_profile(std::string);
		void get_user_profiles(std::vector<std::string,std::allocator<std::string>> const&);
		void get_user_profiles(std::vector<std::string,std::allocator<std::string>> const&);
		void get_user_profiles_for_gamertag(std::string const&);
		void get_user_profiles_for_gamertag(std::string const&);
		void get_user_profiles_for_social_group(std::string const&);
		void pathandquery_user_profiles_for_gamertag(std::string const&);
		void pathandquery_user_profiles_for_gamertag(std::string const&);
		void pathandquery_user_profiles_for_social_group(std::string const&);
		void pathandquery_user_profiles_for_social_group(std::string const&);
		void profile_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void profile_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void serialize_settings_json(void);
		void serialize_settings_json(void);
		void settings_query(void);
		void settings_query(void);
		void evidence_resource_id(void);
		void feedback_type(void);
		void feedback_type(void);
		void reason_message(void);
		void reputation_feedback_item(std::string,xbox::services::social::reputation_feedback_type,xbox::services::multiplayer::multiplayer_session_reference,std::string,std::string);
		void reputation_feedback_item(void);
		void session_reference(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void convert_reputation_feedback_type_to_string(xbox::services::social::reputation_feedback_type);
		void convert_reputation_feedback_type_to_string(xbox::services::social::reputation_feedback_type);
		void reputation_feedback_request(xbox::services::social::reputation_feedback_type,std::string,std::string,std::string);
		void reputation_feedback_request(xbox::services::social::reputation_feedback_type,std::string,std::string,std::string);
		void serialize_batch_feedback_request(std::vector<xbox::services::social::reputation_feedback_item,std::allocator<xbox::services::social::reputation_feedback_item>> const&,std::error_code &);
		void serialize_batch_feedback_request(std::vector<xbox::services::social::reputation_feedback_item,std::allocator<xbox::services::social::reputation_feedback_item>> const&,std::error_code &);
		void serialize_feedback_request(void);
		void serialize_feedback_request(void);
		void reputation_feedback_subpath(std::string const&);
		void reputation_feedback_subpath(std::string const&);
		void reputation_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void reputation_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void submit_batch_reputation_feedback(std::vector<xbox::services::social::reputation_feedback_item,std::allocator<xbox::services::social::reputation_feedback_item>> const&);
		void submit_reputation_feedback(std::string const&,xbox::services::social::reputation_feedback_type,std::string const&,std::string const&,std::string const&);
		void caller_xbox_user_id(void);
		void social_notification(void);
		void social_relationship_change_event_args(std::string,xbox::services::social::social_notification_type,std::vector<std::string,std::allocator<std::string>>);
		void social_relationship_change_event_args(std::string,xbox::services::social::social_notification_type,std::vector<std::string,std::allocator<std::string>>);
		void social_relationship_change_event_args(void);
		xbox_user_ids(void);
		void convert_string_type_to_notification_type(std::string const&);
		void convert_string_type_to_notification_type(std::string const&);
		void on_event_received(web::json::value const&);
		void on_event_received(web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void function<void ();
		void function<void ();
		xbox_user_id(void);
		void ~social_relationship_change_subscription();
		void ~social_relationship_change_subscription();
		void ~social_relationship_change_subscription();
		void ~social_relationship_change_subscription();
		void function<void ();
		void get_social_relationships(std::string const&);
		void get_social_relationships(std::string const&,xbox::services::social::xbox_social_relationship_filter,uint,uint);
		void get_social_relationships(void);
		void get_social_relationships(xbox::services::social::xbox_social_relationship_filter);
		void get_social_relationships(xbox::services::social::xbox_social_relationship_filter,uint,uint);
		void get_social_relationships(xbox::services::social::xbox_social_relationship_filter,uint,uint);
		void remove_social_relationship_changed_handler(int);
		void social_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void social_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void subscribe_to_social_relationship_change(std::string const&);
		void unsubscribe_from_social_relationship_change(std::shared_ptr<xbox::services::social::social_relationship_change_subscription>);
		void function<void ();
		void function<void ();
		void get_social_relationships(std::string const&,xbox::services::social::xbox_social_relationship_filter,uint,uint);
		void get_social_relationships(std::string const&,xbox::services::social::xbox_social_relationship_filter,uint,uint);
		void get_social_relationships(xbox::services::social::xbox_social_relationship_filter,uint,uint);
		void get_social_relationships(xbox::services::social::xbox_social_relationship_filter,uint,uint);
		void pathandquery_social_subpath(std::string const&,bool,std::string const&,ulong long,ulong long);
		void pathandquery_social_subpath(std::string const&,bool,std::string const&,ulong long,ulong long);
		void remove_social_relationship_changed_handler(int);
		void remove_social_relationship_changed_handler(int);
		void social_relationship_changed(xbox::services::social::social_relationship_change_event_args);
		void social_service_impl(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void social_service_impl(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void subscribe_to_social_relationship_change(std::string const&);
		void subscribe_to_social_relationship_change(std::string const&);
		void unsubscribe_from_social_relationship_change(std::shared_ptr<xbox::services::social::social_relationship_change_subscription>);
		void unsubscribe_from_social_relationship_change(std::shared_ptr<xbox::services::social::social_relationship_change_subscription>);
		xbox_social_relationship_filter_to_string(xbox::services::social::xbox_social_relationship_filter);
		void ~social_service_impl();
		void ~social_service_impl();
		void _Deserialize(web::json::value const&);
		void is_favorite(void);
		void is_favorite(void);
		void is_following_caller(void);
		void is_following_caller(void);
		void social_networks(void);
		xbox_social_relationship(std::string,bool,bool,std::vector<std::string,std::allocator<std::string>>);
		xbox_social_relationship(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Init_next_page_info(std::shared_ptr<xbox::services::social::social_service_impl>,xbox::services::social::xbox_social_relationship_filter,uint);
		void _Init_next_page_info(std::shared_ptr<xbox::services::social::social_service_impl>,xbox::services::social::xbox_social_relationship_filter,uint);
		void get_next(uint);
		void get_next(uint);
		void has_next(void);
		void items(void);
		void items(void);
		void total_count(void);
		xbox_social_relationship_result(std::vector<xbox::services::social::xbox_social_relationship,std::allocator<xbox::services::social::xbox_social_relationship>>,uint);
		xbox_social_relationship_result(void);
		xbox_social_relationship_result(void);
		void _Deserialize(web::json::value const&);
		void account_tier(void);
		void app_display_name(void);
		void app_display_picture_resize_uri(void);
		void convert_string_to_account_tier(std::string const&);
		void game_display_name(void);
		void game_display_name(void);
		void game_display_picture_resize_uri(void);
		void game_display_picture_resize_uri(void);
		void gamerscore(void);
		void gamerscore(void);
		void gamertag(void);
		void gamertag(void);
		void operator=(xbox::services::social::xbox_user_profile const&);
		void operator=(xbox::services::social::xbox_user_profile const&);
		void operator=(xbox::services::social::xbox_user_profile&&);
		void operator=(xbox::services::social::xbox_user_profile&&);
		xbox_user_id(void);
		xbox_user_id(void);
		xbox_user_profile(void);
		xbox_user_profile(void);
		xbox_user_profile(void);
		xbox_user_profile(xbox::services::social::xbox_account_tier,std::string,web::uri,std::string,web::uri,std::string,std::string,std::string);
		xbox_user_profile(xbox::services::social::xbox_user_profile const&);
		xbox_user_profile(xbox::services::social::xbox_user_profile const&);
		void ~xbox_user_profile();
		void ~xbox_user_profile();
		void CreateBaseRequest(std::string,std::string);
		void CreateBaseRequest(std::string,std::string);
		void GetSegments(std::string);
		void GetSegments(std::string);
		void cidr_nsal_endpoint>(std::vector<xbox::services::system::cidr_nsal_endpoint,std::allocator<xbox::services::system::cidr_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void fqdn_nsal_endpoint>(std::vector<xbox::services::system::fqdn_nsal_endpoint,std::allocator<xbox::services::system::fqdn_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void ip_nsal_endpoint>(std::vector<xbox::services::system::ip_nsal_endpoint,std::allocator<xbox::services::system::ip_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void wildcard_nsal_endpoint>(std::vector<xbox::services::system::wildcard_nsal_endpoint,std::allocator<xbox::services::system::wildcard_nsal_endpoint>> &,xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void app_id(void);
		void auth_config(std::string,std::string,std::string,bool);
		void auth_config(std::string,std::string,std::string,bool);
		void auth_config(void);
		void detail_error(void);
		void detail_error(void);
		void device_token_endpoint(void);
		void device_token_endpoint(void);
		void environment(void);
		void environment(void);
		void http_status_code(void);
		void http_status_code(void);
		void microsoft_account_id(void);
		void redirect(void);
		void reset(void);
		void rps_ticket_policy(void);
		void rps_ticket_service(void);
		void service_token_endpoint(void);
		void set_app_id(std::string);
		void set_detail_error(uint);
		void set_detail_error(uint);
		void set_device_token_endpoint(std::string);
		void set_http_status_code(uint);
		void set_http_status_code(uint);
		void set_microsoft_account_id(std::string);
		void set_redirect(std::string);
		void set_redirect(std::string);
		void set_rps_ticket_policy(std::string);
		void set_rps_ticket_service(std::string);
		void set_service_token_endpoint(std::string);
		void set_title_token_endpoint(std::string);
		void set_user_token_endpoint(std::string);
		void set_user_token_site_name(std::string);
		void set_x_title_endpoint(std::string);
		void set_x_token_endpoint(std::string);
		void set_xbox_live_endpoint(std::string);
		void set_xbox_live_relying_party(std::string);
		void set_xtoken_composition(std::vector<xbox::services::system::token_identity_type,std::allocator<xbox::services::system::token_identity_type>>);
		void set_xtoken_composition(std::vector<xbox::services::system::token_identity_type,std::allocator<xbox::services::system::token_identity_type>>);
		void title_token_endpoint(void);
		void title_token_endpoint(void);
		void use_compact_ticket(void);
		void use_compact_ticket(void);
		void use_win10_auth(void);
		void user_token_endpoint(void);
		void user_token_endpoint(void);
		void user_token_site_name(void);
		void user_token_site_name(void);
		void x_title_endpoint(void);
		void x_title_endpoint(void);
		void x_token_endpoint(void);
		void x_token_endpoint(void);
		xbox_live_endpoint(void);
		xbox_live_endpoint(void);
		xbox_live_relying_party(void);
		xbox_live_relying_party(void);
		void xtoken_composition(void);
		void xtoken_composition(void);
		void ~auth_config();
		void ~auth_config();
		void auth_flow_result(xbox::services::system::auth_flow_result const&);
		void auth_flow_result(xbox::services::system::auth_flow_result const&);
		void clear(void);
		void clear(void);
		void init(xbox::services::system::token_and_signature_result const&);
		void ~auth_flow_result();
		void ~auth_flow_result();
		void auth_manager(std::shared_ptr<xbox::services::system::auth_config>);
		void auth_manager(std::shared_ptr<xbox::services::system::auth_config>);
		void get_auth_config(void);
		void get_auth_config(void);
		void get_auth_manager_instance(void);
		void get_auth_manager_instance(void);
		void initialize_default_nsal(void);
		void initialize_default_nsal(void);
		void initialize_title_nsal(std::string const&);
		void initialize_title_nsal(std::string const&);
		void internal_get_token_and_signature(std::string,std::string const&,std::string const&,std::string,std::vector<uchar,std::allocator<uchar>> const&,bool,bool,std::string const&);
		void internal_get_token_and_signature(std::string,std::string const&,std::string const&,std::string,std::vector<uchar,std::allocator<uchar>> const&,bool,bool,std::string const&);
		void set_rps_ticket(std::string const&);
		void set_rps_ticket(std::string const&);
		void ~auth_manager();
		void ~auth_manager();
		void big_num(void);
		void big_num(void);
		void bn(void);
		void bn(void);
		void get_bytes(int);
		void get_bytes(void);
		void ~big_num();
		void ~big_num();
		void address(void);
		void cidr(std::string const&);
		void cidr(void);
		void cidr(xbox::services::system::ip_address const&,int);
		void contains(xbox::services::system::ip_address const&);
		void contains(xbox::services::system::ip_address const&);
		void operator==(xbox::services::system::cidr const&);
		void operator==(xbox::services::system::cidr const&);
		void prefix_size(void);
		void try_parse(std::string,xbox::services::system::cidr&);
		void cidr_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void cidr_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void is_match(xbox::services::system::nsal_protocol,xbox::services::system::ip_address const&,int);
		void is_match(xbox::services::system::nsal_protocol,xbox::services::system::ip_address const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void create_title_nsal_path(std::string const&);
		void create_title_nsal_path(std::string const&);
		void get_d_token_from_service(std::string const&,std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void get_d_token_from_service(std::string const&,std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void ecc_pub_key(std::vector<uchar,std::allocator<uchar>>,std::vector<uchar,std::allocator<uchar>>);
		void ecdsa(void);
		void pub_key(void);
		void pub_key(void);
		void sign_hash(std::vector<uchar,std::allocator<uchar>> const&);
		void ~ecdsa();
		void ~ecdsa();
		void fqdn_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void fqdn_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void is_match(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_match(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void get_endpoint_path(std::string const&,std::string const&,std::string const&,bool);
		void get_endpoint_path(std::string const&,std::string const&,std::string const&,bool);
		void hash_ascii_str(xbox::services::system::sha256 &,std::string const&);
		void hash_ascii_str(xbox::services::system::sha256 &,std::string const&);
		void bytes(void);
		void bytes(void);
		void get_type(void);
		void get_type(void);
		void ip_address(std::string const&);
		void ip_address(std::vector<uchar,std::allocator<uchar>> const&,xbox::services::system::ip_address_type);
		void ip_address(void);
		void ip_address(void);
		void operator==(xbox::services::system::ip_address const&);
		void operator==(xbox::services::system::ip_address const&);
		void try_parse(std::string const&,xbox::services::system::ip_address&);
		void try_parse(std::string const&,xbox::services::system::ip_address&);
		void ip_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void ip_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void is_match(xbox::services::system::nsal_protocol,xbox::services::system::ip_address const&,int);
		void is_match(xbox::services::system::nsal_protocol,xbox::services::system::ip_address const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void serialize_json_web_key(std::shared_ptr<xbox::services::system::ecdsa>);
		void serialize_json_web_key(std::shared_ptr<xbox::services::system::ecdsa>);
		void add_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int,std::string const&,std::string const&,std::string const&,std::string const&,int);
		void add_signature_policy(xbox::services::system::signature_policy const&);
		void deserialize(web::json::value const&);
		void deserialize_endpoint(xbox::services::system::nsal&,web::json::value const&);
		void deserialize_endpoint(xbox::services::system::nsal&,web::json::value const&);
		void deserialize_host_name_type(std::string const&);
		void deserialize_host_name_type(std::string const&);
		void deserialize_port(xbox::services::system::nsal_protocol,web::json::value const&);
		void deserialize_protocol(std::string const&);
		void deserialize_protocol(std::string const&);
		void deserialize_signature_policy(xbox::services::system::nsal&,web::json::value const&);
		void deserialize_signature_policy(xbox::services::system::nsal&,web::json::value const&);
		void get_endpoint(web::uri &,xbox::services::system::nsal_endpoint_info &);
		void get_endpoint(xbox::services::system::nsal_protocol,std::string const&,int,std::string const&,xbox::services::system::nsal_endpoint_info &);
		void get_endpoint(xbox::services::system::nsal_protocol,std::string const&,int,std::string const&,xbox::services::system::nsal_endpoint_info &);
		void get_signature_policy(int);
		void get_signature_policy(int);
		void operator=(xbox::services::system::nsal&&);
		void operator=(xbox::services::system::nsal&&);
		void ~nsal();
		void ~nsal();
		void add_info(std::string const&,xbox::services::system::nsal_endpoint_info const&);
		void add_info(std::string const&,xbox::services::system::nsal_endpoint_info const&);
		void get_info(std::string const&,xbox::services::system::nsal_endpoint_info &);
		void get_info(std::string const&,xbox::services::system::nsal_endpoint_info &);
		void get_info_for_exact_path(std::string const&,xbox::services::system::nsal_endpoint_info &);
		void get_info_for_exact_path(std::string const&,xbox::services::system::nsal_endpoint_info &);
		void host_name_type(void);
		void is_match(xbox::services::system::nsal_protocol,int);
		void nsal_endpoint(xbox::services::system::nsal_protocol,xbox::services::system::nsal_host_name_type,int);
		void port(void);
		void protocol(void);
		void nsal_endpoint_info(std::string,std::string,std::string,int);
		void nsal_endpoint_info(std::string,std::string,std::string,int);
		void nsal_endpoint_info(void);
		void nsal_endpoint_info(void);
		void operator==(xbox::services::system::nsal_endpoint_info const&);
		void operator==(xbox::services::system::nsal_endpoint_info const&);
		void relying_party(void);
		void relying_party(void);
		void signature_policy_index(void);
		void signature_policy_index(void);
		void sub_relying_party(void);
		void sub_relying_party(void);
		void token_type(void);
		void token_type(void);
		void parse_helper(std::string const&,xbox::services::system::ip_address &,int &);
		void parse_helper(std::string const&,xbox::services::system::ip_address &,int &);
		void parse_helper_unix(std::string const&,std::vector<uchar,std::allocator<uchar>> &,xbox::services::system::ip_address_type &);
		void parse_helper_unix(std::string const&,std::vector<uchar,std::allocator<uchar>> &,xbox::services::system::ip_address_type &);
		void hash_request(xbox::services::system::signature_policy const&,long long,std::string const&,std::string const&,web::http::http_headers const&,std::vector<uchar,std::allocator<uchar>> const&);
		void hash_request(xbox::services::system::signature_policy const&,long long,std::string const&,std::string const&,web::http::http_headers const&,std::vector<uchar,std::allocator<uchar>> const&);
		void sign_request(xbox::services::system::ecdsa &,xbox::services::system::signature_policy const&,long long,std::string const&,std::string const&,web::http::http_headers const&,std::vector<uchar,std::allocator<uchar>> const&);
		void get_header_or_empty_string(web::http::http_headers const&,std::string const&);
		void get_header_or_empty_string(web::http::http_headers const&,std::string const&);
		void insert_timestamp(uchar *,long long);
		void insert_timestamp(uchar *,long long);
		void insert_version(uchar *,uint);
		void insert_version(uchar *,uint);
		void add_bytes(std::vector<uchar,std::allocator<uchar>>);
		void add_bytes(uchar const*,uint);
		void add_bytes(uchar const*,uint);
		void get_hash(void);
		void get_hash(void);
		void sha256(void);
		void sha256(void);
		void _Internal_user(void);
		void sign_out_completed_event_args(std::weak_ptr<xbox::services::system::xbox_live_user>,std::shared_ptr<xbox::services::system::user_impl>);
		void sign_out_completed_event_args(std::weak_ptr<xbox::services::system::xbox_live_user>,std::shared_ptr<xbox::services::system::user_impl>);
		void user(void);
		void extra_headers(void);
		void extra_headers(void);
		void max_body_bytes(void);
		void max_body_bytes(void);
		void operator==(xbox::services::system::signature_policy const&);
		void signature_policy(int,int,std::vector<std::string,std::allocator<std::string>> const&);
		void signature_policy(int,int,std::vector<std::string,std::allocator<std::string>> const&);
		void version(void);
		void version(void);
		void ~signature_policy();
		void string_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void string_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void string_service(void);
		void string_service(void);
		void verify_string(std::string const&);
		void verify_strings(std::vector<std::string,std::allocator<std::string>> const&);
		void verify_strings(std::vector<std::string,std::allocator<std::string>> const&);
		void tcui_init(void);
		void tcui_init(void);
		void check_gaming_privilege_silently(xbox::services::system::gaming_privilege);
		void check_gaming_privilege_with_ui(xbox::services::system::gaming_privilege,std::string);
		void show_add_friends_ui(void);
		void show_add_friends_ui(void);
		void show_change_friend_relationship_ui(std::string const&);
		void show_friend_finder_ui(void);
		void show_friend_finder_ui(void);
		void show_game_invite_ui(xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&);
		void show_player_picker_ui(std::string const&,std::vector<std::string,std::allocator<std::string>> const&,std::vector<std::string,std::allocator<std::string>> const&,uint,uint);
		void show_profile_card_ui(std::string const&);
		void show_profile_card_ui(std::string const&);
		void show_title_achievements_ui(uint);
		void show_title_hub_ui(void);
		void show_title_hub_ui(void);
		void show_user_profile_ui(std::string const&);
		void show_user_profile_ui(std::string const&);
		void show_user_settings_ui(void);
		void show_user_settings_ui(void);
		void tcui_completed_callback(_JNIEnv *,_jclass *,int);
		void tcui_completed_callback(_JNIEnv *,_jclass *,int);
		void get_t_token_from_service(std::string const&,std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::string const&);
		void get_t_token_from_service(std::string const&,std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::string const&);
		void age_group(void);
		void age_group(void);
		void gamertag(void);
		void gamertag(void);
		void privileges(void);
		void privileges(void);
		void reserved(void);
		void signature(void);
		void signature(void);
		void token(void);
		void token(void);
		void token_and_signature_result(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string);
		void token_and_signature_result(std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string,std::string);
		void token_and_signature_result(void);
		void token_and_signature_result(void);
		void token_and_signature_result(xbox::services::system::token_and_signature_result const&);
		void token_and_signature_result(xbox::services::system::token_and_signature_result const&);
		void web_account_id(void);
		xbox_user_hash(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void ~token_and_signature_result();
		void ~token_and_signature_result();
		void deserialize(web::json::value const&);
		void identity(void);
		void redirect(void);
		void redirect(void);
		void token_error(std::string,uint,std::string);
		void token_error(void);
		void token_error(void);
		void xerr(void);
		void xerr(void);
		void clear_token_cache(void);
		void clear_token_cache(void);
		void create_cache_key(std::string const&,std::string const&,std::string const&,xbox::services::system::token_identity_type);
		void create_cache_key(std::string const&,std::string const&,std::string const&,xbox::services::system::token_identity_type);
		void get_event_token_from_xuid(std::string const&);
		void get_rps_ticket(void);
		void get_token_from_cache(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::string const&,std::string const&,std::string const&,xbox::services::system::token_identity_type,bool);
		void get_token_from_cache(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::string const&,std::string const&,std::string const&,xbox::services::system::token_identity_type,bool);
		void get_token_from_cache_or_service(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::string const&,std::string const&,std::string,bool,xbox::services::system::token_identity_type,bool);
		void get_token_from_cache_or_service(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::string const&,std::string const&,std::string,bool,xbox::services::system::token_identity_type,bool);
		void get_xtoken(std::string const&,std::string const&,std::string,bool,bool);
		void get_xtoken(std::string const&,std::string const&,std::string,bool,bool);
		void refresh_d_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>);
		void refresh_d_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>);
		void refresh_t_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>);
		void refresh_t_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>);
		void refresh_u_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>);
		void refresh_u_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>);
		void refresh_x_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>,bool);
		void refresh_x_token(std::shared_ptr<xbox::services::system::token_manager::token_state>,std::shared_ptr<xbox::services::system::token_manager::token_info>,bool);
		void set_rps_ticket(std::string const&);
		void set_rps_ticket(std::string const&);
		void set_token_result(xbox::services::system::token_result const&);
		void set_token_result(xbox::services::system::token_result const&);
		void token_info(std::string,std::string,std::string);
		void token_info(std::string,std::string,std::string);
		void token_info(void);
		void ~token_info();
		void ~token_info();
		void token_manager(std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void token_manager(std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void token_state(std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void ~token_state();
		void ~token_state();
		void create_device_token_request(std::string,std::string,std::shared_ptr<xbox::services::system::ecdsa>,std::string,std::string,std::string);
		void create_device_token_request(std::string,std::string,std::shared_ptr<xbox::services::system::ecdsa>,std::string,std::string,std::string);
		void create_service_token_request(std::string,std::string,std::shared_ptr<xbox::services::system::ecdsa>);
		void create_title_token_request(std::string,std::string,std::string,std::shared_ptr<xbox::services::system::ecdsa>,std::string,std::string,std::string);
		void create_title_token_request(std::string,std::string,std::string,std::shared_ptr<xbox::services::system::ecdsa>,std::string,std::string,std::string);
		void create_user_token_request(std::string,std::string,std::string,std::string,std::string,std::shared_ptr<xbox::services::system::ecdsa>);
		void create_user_token_request(std::string,std::string,std::string,std::string,std::string,std::shared_ptr<xbox::services::system::ecdsa>);
		void create_xtoken_request(std::string,std::string,std::string,std::string,std::string,std::string,std::string);
		void create_xtoken_request(std::string,std::string,std::string,std::string,std::string,std::string,std::string);
		void age_group(void);
		void age_group(void);
		void deserialize(web::json::value const&);
		void error(void);
		void error(void);
		void expiration(void);
		void expiration(void);
		void http_status_code(void);
		void http_status_code(void);
		void privileges(void);
		void privileges(void);
		void set_http_status_code(uint);
		void set_http_status_code(uint);
		void set_title_id(std::string const&);
		void set_title_id(std::string const&);
		void title_id(void);
		void title_id(void);
		void token(void);
		void token(void);
		void token_result(std::string,long long,std::string,std::string,std::string,std::string,std::string,std::string);
		void token_result(void);
		void token_result(void);
		void token_result(xbox::services::system::token_error);
		void token_result(xbox::services::system::token_error);
		void token_result(xbox::services::system::token_result const&);
		void token_result(xbox::services::system::token_result const&);
		void user_gamertag(void);
		void user_gamertag(void);
		void user_hash(void);
		void user_hash(void);
		void user_xuid(void);
		void user_xuid(void);
		void xerr(void);
		void xerr(void);
		void ~token_result();
		void ~token_result();
		void add(std::string,xbox::services::system::nsal_endpoint_info);
		void add(std::string,xbox::services::system::nsal_endpoint_info);
		void get(std::string,xbox::services::system::nsal_endpoint_info&);
		void get(std::string,xbox::services::system::nsal_endpoint_info&);
		void get_exact(std::string,xbox::services::system::nsal_endpoint_info&);
		void get_exact(std::string,xbox::services::system::nsal_endpoint_info&);
		void get_internal(xbox::services::system::trie_node<xbox::services::system::nsal_endpoint_info> const&,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,xbox::services::system::nsal_endpoint_info&);
		void get_internal(xbox::services::system::trie_node<xbox::services::system::nsal_endpoint_info> const&,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,__gnu_cxx::__normal_iterator<std::string *,std::vector<std::string,std::allocator<std::string>>>,xbox::services::system::nsal_endpoint_info&);
		void trie_node(xbox::services::system::trie_node<xbox::services::system::nsal_endpoint_info> const&);
		void trie_node(xbox::services::system::trie_node<xbox::services::system::nsal_endpoint_info> const&);
		void value(void);
		void value(void);
		void ~trie_node();
		void ~trie_node();
		void create_user_impl(void);
		void create_user_impl(void);
		void function<void ();
		void function<void ();
		void get_token_and_signature(std::string const&,std::string const&,std::string const&);
		void get_token_and_signature(std::string const&,std::string const&,std::string const&);
		void get_token_and_signature(std::string const&,std::string const&,std::string const&,std::string const&);
		void get_token_and_signature(std::string const&,std::string const&,std::string const&,std::string const&);
		void get_token_and_signature_array(std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&);
		void get_token_and_signature_array(std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&);
		void is_signed_in(void);
		void is_signed_in(void);
		void remove_sign_in_completed_handler(int);
		void remove_sign_out_completed_handler(int);
		void set_user_pointer(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void set_user_pointer(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void sign_in_impl(std::string const&,bool);
		void sign_in_impl(std::string const&,bool);
		void switch_account(void);
		void switch_account(void);
		void trigger_sign_in_event(void);
		void user_impl(bool);
		void user_impl(bool);
		void user_signed_out(void);
		void user_signed_out(void);
		void ~user_impl();
		void ~user_impl();
		void auth_flow_callback(_JNIEnv *,_jclass *,long long,int,_jstring *);
		void auth_flow_callback(_JNIEnv *,_jclass *,long long,int,_jstring *);
		void clear_pending_intent(void);
		void clear_pending_intent(void);
		void complete_sign_in_with_ui(xbox::services::system::auth_flow_result const&);
		void complete_sign_in_with_ui(xbox::services::system::auth_flow_result const&);
		void delete_offline_data(void);
		void delete_offline_data(void);
		void finish_sign_in(xbox::services::system::auth_flow_status,std::string);
		void get_instance(void);
		void get_instance(void);
		void get_supporting_x_token_callback(_JNIEnv *,_jclass *,_jstring *);
		void get_supporting_x_token_callback(_JNIEnv *,_jclass *,_jstring *);
		void get_uploader_x_token_callback(_JNIEnv *,_jclass *,uchar);
		void get_uploader_x_token_callback(_JNIEnv *,_jclass *,uchar);
		void init_sign_in_activity(int);
		void init_sign_in_activity(int);
		void initiate_sign_in_flow(bool);
		void initiate_sign_in_flow(bool);
		void internal_get_token_and_signature(std::string const&,std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&,bool,bool);
		void internal_get_token_and_signature(std::string const&,std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&,bool,bool);
		void internal_signout(void);
		void internal_signout(void);
		void invoke_auth_flow(void);
		void invoke_auth_flow(void);
		void invoke_brokered_msa_auth(void);
		void invoke_brokered_msa_auth(void);
		void invoke_brokered_pending_intent(void);
		void invoke_brokered_pending_intent(void);
		void invoke_event_initialization(_JNIEnv *,_jclass *,long long,_jstring *,_jobject *);
		void invoke_event_initialization(_JNIEnv *,_jclass *,long long,_jstring *,_jobject *);
		void invoke_event_initialization_internal(_JNIEnv *,_jobject *,std::string const&);
		void invoke_event_initialization_internal(_JNIEnv *,_jobject *,std::string const&);
		void invoke_x_token_acquisition(_JNIEnv *,_jclass *,long long,_jobject *);
		void invoke_x_token_acquisition(_JNIEnv *,_jclass *,long long,_jobject *);
		void invoke_x_token_acquisition_internal(_JNIEnv *,_jobject *);
		void invoke_x_token_acquisition_internal(_JNIEnv *,_jobject *);
		void invoke_xb_login(_JNIEnv *,_jclass *,long long,_jstring *,_jobject *);
		void invoke_xb_login(_JNIEnv *,_jclass *,long long,_jstring *,_jobject *);
		void invoke_xb_login_internal(_JNIEnv *,_jobject *,std::string const&);
		void invoke_xb_login_internal(_JNIEnv *,_jobject *,std::string const&);
		void invoke_xb_logout(_JNIEnv *,_jclass *,long long,_jobject *);
		void invoke_xb_logout(_JNIEnv *,_jclass *,long long,_jobject *);
		void invoke_xb_logout_internal(_JNIEnv *,_jobject *);
		void invoke_xb_logout_internal(_JNIEnv *,_jobject *);
		void is_prod(void);
		void is_prod(void);
		void msa_sign_in(void);
		void msa_sign_in(void);
		void read_offline_data(void);
		void read_offline_data(void);
		void send_error(_JNIEnv *,_jobject *,uint,uint,std::string const&);
		void send_event_initialization_success(_JNIEnv *,_jobject *,std::string const&);
		void send_x_token(_JNIEnv *,_jobject *,xbox::services::system::token_and_signature_result const&);
		void send_x_token(_JNIEnv *,_jobject *,xbox::services::system::token_and_signature_result const&);
		void send_xb_login_success(_JNIEnv *,_jobject *,xbox::services::system::token_and_signature_result const&,bool);
		void send_xb_login_success(_JNIEnv *,_jobject *,xbox::services::system::token_and_signature_result const&,bool);
		void send_xb_logout_finished(_JNIEnv *,_jobject *);
		void set_user(std::weak_ptr<xbox::services::system::xbox_live_user> const&);
		void set_user(std::weak_ptr<xbox::services::system::xbox_live_user> const&);
		void sign_in_impl(bool,bool);
		void sign_in_impl(bool,bool);
		void sign_in_impl(std::string const&,bool);
		void sign_in_silent(bool);
		void sign_in_silent(bool);
		void sign_in_with_ui(void);
		void sign_out_callback(_JNIEnv *,_jclass *);
		void sign_out_callback(_JNIEnv *,_jclass *);
		void signout(void);
		void signout(void);
		void start_sign_in(void);
		void ticket_callback(_JNIEnv *,_jclass *,_jstring *,int,int,_jstring *);
		void ticket_callback(_JNIEnv *,_jclass *,_jstring *,int,int,_jstring *);
		void user(void);
		void user(void);
		void user_impl_android(void);
		void user_impl_android(void);
		void write_offline_data(void);
		void write_offline_data(void);
		void ~user_impl_android();
		void ~user_impl_android();
		void get_u_token_from_service(std::string const&,std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void get_u_token_from_service(std::string const&,std::shared_ptr<xbox::services::system::ecdsa>,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void _Deserialize(web::json::value const&);
		void first_offending_substring(void);
		void result_code(void);
		void verify_string_result(void);
		void verify_string_result(void);
		void verify_string_result(xbox::services::system::verify_string_result_code,std::string);
		void is_match(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_match(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void is_same(xbox::services::system::nsal_protocol,std::string const&,int);
		void wildcard_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void wildcard_nsal_endpoint(xbox::services::system::nsal_protocol,std::string const&,xbox::services::system::nsal_host_name_type,int);
		void get(void);
		void get(void);
		void operator=(xbox::services::system::xbox_live_mutex const&);
		xbox_live_mutex(void);
		xbox_live_mutex(void);
		xbox_live_mutex(xbox::services::system::xbox_live_mutex const&);
		void function<void ();
		void function<void ();
		void age_group(void);
		void auth_config(void);
		void gamertag(void);
		void gamertag(void);
		void get_token_and_signature(std::string const&,std::string const&,std::string const&);
		void get_token_and_signature(std::string const&,std::string const&,std::string const&);
		void get_token_and_signature(std::string const&,std::string const&,std::string const&,std::string const&);
		void get_token_and_signature(std::string const&,std::string const&,std::string const&,std::string const&);
		void get_token_and_signature_array(std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&);
		void get_token_and_signature_array(std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&);
		void is_signed_in(void);
		void is_signed_in(void);
		void privileges(void);
		void privileges(void);
		void remove_sign_out_completed_handler(int);
		void signin(void);
		void signin(void);
		void signin_silently(void);
		void signin_silently(void);
		void signout(void);
		void signout(void);
		void switch_account(void);
		xbox_live_user(void);
		xbox_live_user(void);
		xbox_user_id(void);
		xbox_user_id(void);
		void get_factory(void);
		void get_factory(void);
		void init_factory(void);
		void create_device_token(void);
		void create_device_token(void);
		void create_http_call(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&,xbox::services::xbox_live_api);
		void create_http_call(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&,xbox::services::xbox_live_api);
		void create_http_call_internal(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&);
		void create_http_call_internal(std::shared_ptr<xbox::services::xbox_live_context_settings> const&,std::string const&,std::string const&,web::uri const&);
		void create_http_client(web::uri const&,web::http::client::http_client_config const&);
		void create_http_client(web::uri const&,web::http::client::http_client_config const&);
		void create_local_config(void);
		void create_local_config(void);
		void create_title_token(void);
		void create_title_token(void);
		void create_user_impl(void);
		void create_user_impl(void);
		void create_user_token(void);
		void create_user_token(void);
		void create_web_socket_client(void);
		void create_web_socket_client(void);
		void create_xsts_token(void);
		void create_xsts_token(void);
		void create_xtitle_service(void);
		void create_xtitle_service(void);
		void get_x_token_from_service(std::shared_ptr<xbox::services::system::ecdsa>,std::string,std::string,std::string,std::string,std::string,std::string,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::string);
		void get_x_token_from_service(std::shared_ptr<xbox::services::system::ecdsa>,std::string,std::string,std::string,std::string,std::string,std::string,std::shared_ptr<xbox::services::system::auth_config>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::string);
		void get_default_nsal(std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::system::auth_config>);
		void get_default_nsal(std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::system::auth_config>);
		void get_title_nsal(std::shared_ptr<xbox::services::system::auth_manager>,std::string const&,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::system::auth_config>);
		void get_title_nsal(std::shared_ptr<xbox::services::system::auth_manager>,std::string const&,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::system::auth_config>);
		void _Convert_string_to_title_storage_blob_type(std::string const&);
		void _Convert_string_to_title_storage_blob_type(std::string const&);
		void _Convert_title_storage_blob_type_to_string(xbox::services::title_storage::title_storage_blob_type);
		void _Convert_title_storage_blob_type_to_string(xbox::services::title_storage::title_storage_blob_type);
		void _Deserialize(web::json::value const&);
		void _Initialize(std::string,std::string,std::string,std::string,xbox::services::title_storage::title_storage_type);
		void _Initialize(std::string,std::string,std::string,std::string,xbox::services::title_storage::title_storage_type);
		void _Set_e_tag_and_length(std::string,ulong long);
		void _Set_e_tag_and_length(std::string,ulong long);
		void blob_path(void);
		void blob_path(void);
		void blob_type(void);
		void blob_type(void);
		void client_timestamp(void);
		void client_timestamp(void);
		void create_title_storage_blob_metadata_for_session_storage(std::string,std::string,xbox::services::title_storage::title_storage_blob_type,std::string,std::string,std::string,std::string);
		void display_name(void);
		void display_name(void);
		void e_tag(void);
		void e_tag(void);
		void length(void);
		void multiplayer_session_name(void);
		void multiplayer_session_name(void);
		void multiplayer_session_template_name(void);
		void multiplayer_session_template_name(void);
		void service_configuration_id(void);
		void service_configuration_id(void);
		void set_client_timestamp(utility::datetime);
		void storage_type(void);
		void storage_type(void);
		void title_storage_blob_metadata(std::string,xbox::services::title_storage::title_storage_type,std::string,xbox::services::title_storage::title_storage_blob_type,std::string);
		void title_storage_blob_metadata(std::string,xbox::services::title_storage::title_storage_type,std::string,xbox::services::title_storage::title_storage_blob_type,std::string,std::string,std::string);
		void title_storage_blob_metadata(std::string,xbox::services::title_storage::title_storage_type,std::string,xbox::services::title_storage::title_storage_blob_type,std::string,std::string,std::string,std::string,std::string);
		void title_storage_blob_metadata(std::string,xbox::services::title_storage::title_storage_type,std::string,xbox::services::title_storage::title_storage_blob_type,std::string,std::string,std::string,utility::datetime);
		void title_storage_blob_metadata(void);
		void title_storage_blob_metadata(void);
		void title_storage_blob_metadata(xbox::services::title_storage::title_storage_blob_metadata const&);
		void title_storage_blob_metadata(xbox::services::title_storage::title_storage_blob_metadata const&);
		xbox_user_id(void);
		xbox_user_id(void);
		void ~title_storage_blob_metadata();
		void ~title_storage_blob_metadata();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Initialize(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::string,xbox::services::title_storage::title_storage_type,std::string,std::string,std::string,std::string);
		void _Initialize(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::string,xbox::services::title_storage::title_storage_type,std::string,std::string,std::string,std::string);
		void get_next(uint);
		void has_next(void);
		void items(void);
		void operator=(xbox::services::title_storage::title_storage_blob_metadata_result const&);
		void operator=(xbox::services::title_storage::title_storage_blob_metadata_result const&);
		void operator=(xbox::services::title_storage::title_storage_blob_metadata_result&&);
		void operator=(xbox::services::title_storage::title_storage_blob_metadata_result&&);
		void title_storage_blob_metadata_result(void);
		void title_storage_blob_metadata_result(void);
		void title_storage_blob_metadata_result(xbox::services::title_storage::title_storage_blob_metadata_result const&);
		void title_storage_blob_metadata_result(xbox::services::title_storage::title_storage_blob_metadata_result const&);
		void ~title_storage_blob_metadata_result();
		void ~title_storage_blob_metadata_result();
		void blob_buffer(void);
		void blob_metadata(void);
		void title_storage_blob_result(std::shared_ptr<std::vector<uchar,std::allocator<uchar>>>,xbox::services::title_storage::title_storage_blob_metadata);
		void title_storage_blob_result(std::shared_ptr<std::vector<uchar,std::allocator<uchar>>>,xbox::services::title_storage::title_storage_blob_metadata);
		void title_storage_blob_result(void);
		void title_storage_blob_result(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Initialize(std::string,xbox::services::title_storage::title_storage_type,std::string,std::string,std::string);
		void _Initialize(std::string,xbox::services::title_storage::title_storage_type,std::string,std::string,std::string);
		void multiplayer_session_name(void);
		void multiplayer_session_template_name(void);
		void quota_bytes(void);
		void service_configuration_id(void);
		void storage_type(void);
		void title_storage_quota(void);
		void title_storage_quota(void);
		void title_storage_quota(xbox::services::title_storage::title_storage_quota const&);
		void title_storage_quota(xbox::services::title_storage::title_storage_quota const&);
		void used_bytes(void);
		xbox_user_id(void);
		void delete_blob(xbox::services::title_storage::title_storage_blob_metadata const&,bool);
		void download_blob(xbox::services::title_storage::title_storage_blob_metadata,std::shared_ptr<std::vector<uchar,std::allocator<uchar>>>,xbox::services::title_storage::title_storage_e_tag_match_condition,std::string);
		void download_blob(xbox::services::title_storage::title_storage_blob_metadata,std::shared_ptr<std::vector<uchar,std::allocator<uchar>>>,xbox::services::title_storage::title_storage_e_tag_match_condition,std::string,uint);
		void download_blob(xbox::services::title_storage::title_storage_blob_metadata,std::shared_ptr<std::vector<uchar,std::allocator<uchar>>>,xbox::services::title_storage::title_storage_e_tag_match_condition,std::string,uint);
		void get_blob_metadata(std::string,xbox::services::title_storage::title_storage_type,std::string,std::string,uint,uint);
		void get_blob_metadata_for_session_storage(std::string,std::string,std::string,std::string,uint,uint);
		void get_quota(std::string,xbox::services::title_storage::title_storage_type);
		void get_quota_for_session_storage(std::string const&,std::string const&,std::string const&);
		void internal_get_blob_metadata(std::string const&,xbox::services::title_storage::title_storage_type,std::string const&,std::string const&,std::string const&,std::string const&,uint,uint,std::string const&);
		void internal_get_blob_metadata(std::string const&,xbox::services::title_storage::title_storage_type,std::string const&,std::string const&,std::string const&,std::string const&,uint,uint,std::string const&);
		void set_e_tag_header(std::shared_ptr<xbox::services::http_call>,std::string,xbox::services::title_storage::title_storage_e_tag_match_condition);
		void set_e_tag_header(std::shared_ptr<xbox::services::http_call>,std::string,xbox::services::title_storage::title_storage_e_tag_match_condition);
		void set_range_header(std::shared_ptr<xbox::services::http_call>,uint,uint);
		void set_range_header(std::shared_ptr<xbox::services::http_call>,uint,uint);
		void title_storage_blob_metadata_subpath(xbox::services::title_storage::title_storage_type,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,uint,uint,std::string const&);
		void title_storage_blob_metadata_subpath(xbox::services::title_storage::title_storage_type,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,uint,uint,std::string const&);
		void title_storage_download_blob_subpath(xbox::services::title_storage::title_storage_blob_metadata const&,std::string const&);
		void title_storage_download_blob_subpath(xbox::services::title_storage::title_storage_blob_metadata const&,std::string const&);
		void title_storage_quota_subpath(xbox::services::title_storage::title_storage_type,std::string const&,std::string const&,std::string const&,std::string const&);
		void title_storage_quota_subpath(xbox::services::title_storage::title_storage_type,std::string const&,std::string const&,std::string const&,std::string const&);
		void title_storage_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void title_storage_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void title_storage_upload_blob_subpath(xbox::services::title_storage::title_storage_blob_metadata const&,std::string const&,bool);
		void title_storage_upload_blob_subpath(xbox::services::title_storage::title_storage_blob_metadata const&,std::string const&,bool);
		void upload_blob(xbox::services::title_storage::title_storage_blob_metadata,std::shared_ptr<std::vector<uchar,std::allocator<uchar>>>,xbox::services::title_storage::title_storage_e_tag_match_condition,uint);
		void _Deserialize(web::json::value const&);
		void definition(void);
		void description(void);
		void display_name(void);
		void end_date(void);
		void id(void);
		void maximum_teams(void);
		void minimum_teams(void);
		void registration_end_date(void);
		void registration_start_date(void);
		void start_date(void);
		void status(void);
		void team_template_name(void);
		void tournament(std::string,std::string,std::string,std::string,xbox::services::tournaments::tournament_status,utility::datetime,utility::datetime);
		void tournament(void);
		void tournament(xbox::services::tournaments::tournament const&);
		void tournament(xbox::services::tournaments::tournament const&);
		void ~tournament();
		void ~tournament();
		void _Convert_string_to_game_state(std::string const&);
		void _Convert_string_to_game_state(std::string const&);
		void _Deserialize(web::json::value const&);
		void end_time(void);
		void id(void);
		void results(void);
		void start_time(void);
		void state(void);
		void tournament_game(std::string,utility::datetime,utility::datetime,xbox::services::tournaments::tournament_game_state,std::vector<xbox::services::tournaments::tournament_game_result,std::allocator<xbox::services::tournaments::tournament_game_result>>);
		void tournament_game(void);
		void _Deserialize(web::json::value const&);
		void source(void);
		void state(void);
		void team_id(void);
		void tournament_game_result(std::string,xbox::services::tournaments::tournament_game_result_state,xbox::services::tournaments::tournament_game_result_source);
		void tournament_game_result(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void items(void);
		void tournament_instances(void);
		void tournament_instances(void);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void definition_name(void);
		void is_null(void);
		void organizer(void);
		void service_configuration_id(void);
		void tournament_id(void);
		void tournament_reference(std::string,std::string,std::string,std::string);
		void tournament_reference(void);
		void tournament_reference(void);
		void tournament_reference(xbox::services::tournaments::tournament_reference const&);
		void tournament_reference(xbox::services::tournaments::tournament_reference const&);
		void _Deserialize(web::json::value const&);
		void end_time(void);
		void games(void);
		void start_time(void);
		void tournament_round(std::vector<xbox::services::tournaments::tournament_game,std::allocator<xbox::services::tournaments::tournament_game>>,utility::datetime,utility::datetime);
		void tournament_round(void);
		void _Convert_game_result_state_to_string(xbox::services::tournaments::tournament_game_result_state);
		void _Convert_game_result_state_to_string(xbox::services::tournaments::tournament_game_result_state);
		void _Convert_string_to_game_result_source(std::string const&);
		void _Convert_string_to_game_result_source(std::string const&);
		void _Convert_string_to_game_result_state(std::string const&);
		void _Convert_string_to_game_result_state(std::string const&);
		void _Convert_string_to_game_state(std::string const&);
		void get_tournament_instance_teams(std::string const&,std::string const&);
		void get_tournament_instances(std::string const&,utility::datetime const&,utility::datetime const&,std::string const&);
		void get_tournament_progress(std::string const&,std::string const&);
		void register_team(std::string const&,xbox::services::multiplayer::multiplayer_session_reference const&,std::string const&);
		void register_team_sub_path(std::string const&,std::string const&);
		void register_team_sub_path(std::string const&,std::string const&);
		void tournament_instances_sub_path(std::string const&,utility::datetime const&,utility::datetime const&,std::string const&);
		void tournament_instances_sub_path(std::string const&,utility::datetime const&,utility::datetime const&,std::string const&);
		void tournament_progress_sub_path(std::string const&,std::string const&,std::string const&);
		void tournament_progress_sub_path(std::string const&,std::string const&,std::string const&);
		void tournament_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void tournament_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>);
		void tournament_teams_sub_path(std::string const&,std::string const&,std::string const&);
		void tournament_teams_sub_path(std::string const&,std::string const&,std::string const&);
		void _Deserialize(web::json::value const&);
		void rounds(void);
		void tournament_stage(std::vector<xbox::services::tournaments::tournament_round,std::allocator<xbox::services::tournaments::tournament_round>>);
		void tournament_stage(void);
		void _Deserialize(web::json::value const&);
		void id(void);
		void member_user_ids(void);
		void registered_date(void);
		void session_reference(void);
		void tournament_team(std::string const&,xbox::services::multiplayer::multiplayer_session_reference const&,std::vector<std::string,std::allocator<std::string>> const&,utility::datetime const&);
		void tournament_team(std::string const&,xbox::services::multiplayer::multiplayer_session_reference const&,std::vector<std::string,std::allocator<std::string>> const&,utility::datetime const&);
		void tournament_team(void);
		void tournament_team(xbox::services::tournaments::tournament_team const&);
		void tournament_team(xbox::services::tournaments::tournament_team const&);
		void ~tournament_team();
		void ~tournament_team();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void ranking(void);
		void ranking(void);
		void set_ranking(ulong long);
		void set_state(xbox::services::tournaments::tournament_game_result_state);
		void state(void);
		void state(void);
		void tournament_team_result(void);
		void tournament_team_result(void);
		void tournament_team_result(xbox::services::tournaments::tournament_game_result_state,ulong long);
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void teams(void);
		void tournament_teams(std::vector<xbox::services::tournaments::tournament_team,std::allocator<xbox::services::tournaments::tournament_team>> const&);
		void tournament_teams(void);
		void tournament_teams(void);
		void _Set_caller_context(std::string const&);
		void _Set_caller_context(std::string const&);
		void caller_context(void);
		void caller_context(void);
		void get_auth_result(std::string const&,std::string const&,std::string const&,std::string const&,bool);
		void get_auth_result(std::string const&,std::string const&,std::string const&,std::string const&,bool);
		void get_auth_result(std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&,bool);
		void get_auth_result(std::string const&,std::string const&,std::string const&,std::vector<uchar,std::allocator<uchar>> const&,bool);
		void refresh_token(void);
		void refresh_token(void);
		void user(void);
		void user(void);
		void user_context(std::shared_ptr<xbox::services::system::xbox_live_user>);
		void user_context(std::shared_ptr<xbox::services::system::xbox_live_user>);
		xbox_user_id(void);
		xbox_user_id(void);
		void signature(void);
		void signature(void);
		void token(void);
		void token(void);
		void user_context_auth_result(std::string,std::string);
		void user_context_auth_result(void);
		void user_context_auth_result(void);
		void requested_statistics(std::string,std::vector<std::string,std::allocator<std::string>>);
		void requested_statistics(std::string,std::vector<std::string,std::allocator<std::string>>);
		void service_configuration_id(void);
		void service_configuration_id(void);
		void statistics(void);
		void statistics(void);
		void _Deserialize(web::json::value const&);
		void _Set_input_service_configuration_id(std::string);
		void _Set_input_service_configuration_id(std::string);
		void service_configuration_id(void);
		void service_configuration_statistic(std::string,std::vector<xbox::services::user_statistics::statistic,std::allocator<xbox::services::user_statistics::statistic>>);
		void service_configuration_statistic(std::string,std::vector<xbox::services::user_statistics::statistic,std::allocator<xbox::services::user_statistics::statistic>>);
		void service_configuration_statistic(void);
		void statistics(void);
		void statistics(void);
		void _Deserialize(web::json::value const&);
		void _Set_statistic_name(std::string);
		void _Set_statistic_name(std::string);
		void _Set_statistic_type(std::string);
		void _Set_statistic_type(std::string);
		void _Set_statistic_value(std::string);
		void _Set_statistic_value(std::string);
		void statistic(std::string,std::string,std::string);
		void statistic(std::string,std::string,std::string);
		void statistic(void);
		void statistic(void);
		void statistic_name(void);
		void statistic_name(void);
		void statistic_type(void);
		void value(void);
		void value(void);
		void latest_statistic(void);
		void service_configuration_id(void);
		void statistic_change_event_args(std::string,std::string,xbox::services::user_statistics::statistic);
		void statistic_change_event_args(std::string,std::string,xbox::services::user_statistics::statistic);
		void statistic_change_event_args(void);
		void statistic_change_event_args(void);
		void statistic_change_event_args(xbox::services::user_statistics::statistic_change_event_args const&);
		void statistic_change_event_args(xbox::services::user_statistics::statistic_change_event_args const&);
		xbox_user_id(void);
		void ~statistic_change_event_args();
		void ~statistic_change_event_args();
		void on_event_received(web::json::value const&);
		void on_event_received(web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void on_subscription_created(uint,web::json::value const&);
		void service_configuration_id(void);
		void statistic(void);
		void function<void ();
		void function<void ();
		xbox_user_id(void);
		void ~statistic_change_subscription();
		void ~statistic_change_subscription();
		void ~statistic_change_subscription();
		void ~statistic_change_subscription();
		void _Deserialize(web::json::value const&);
		void _Deserialize(web::json::value const&);
		void _Set_input_service_configuration_id(std::string);
		void _Set_input_service_configuration_id(std::string);
		void service_configuration_statistics(void);
		void service_configuration_statistics(void);
		void user_statistics_result(std::string,std::vector<xbox::services::user_statistics::service_configuration_statistic,std::allocator<xbox::services::user_statistics::service_configuration_statistic>>);
		void user_statistics_result(void);
		void user_statistics_result(void);
		xbox_user_id(void);
		void function<void ();
		void get_multiple_user_statistics(std::vector<std::string,std::allocator<std::string>> const&,std::string const&,std::vector<std::string,std::allocator<std::string>>&);
		void get_multiple_user_statistics_for_multiple_service_configurations(std::vector<std::string,std::allocator<std::string>> const&,std::vector const&<xbox::services::user_statistics::requested_statistics,std::allocator<std::vector const>>);
		void get_multiple_user_statistics_for_multiple_service_configurations(std::vector<std::string,std::allocator<std::string>> const&,std::vector const&<xbox::services::user_statistics::requested_statistics,std::allocator<std::vector const>>);
		void get_single_user_statistics(std::string const&,std::string const&,std::string const&);
		void get_single_user_statistics(std::string const&,std::string const&,std::string const&);
		void get_single_user_statistics(std::string const&,std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void get_single_user_statistics(std::string const&,std::string const&,std::vector<std::string,std::allocator<std::string>> const&);
		void operator=(xbox::services::user_statistics::user_statistics_service&&);
		void operator=(xbox::services::user_statistics::user_statistics_service&&);
		void remove_statistic_changed_handler(int);
		void subscribe_to_statistic_change(std::string const&,std::string const&,std::string const&);
		void unsubscribe_from_statistic_change(std::shared_ptr<xbox::services::user_statistics::statistic_change_subscription>);
		void user_statistics_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void user_statistics_service(std::shared_ptr<xbox::services::user_context>,std::shared_ptr<xbox::services::xbox_live_context_settings>,std::shared_ptr<xbox::services::xbox_live_app_config>,std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void user_statistics_service(void);
		void user_statistics_service(void);
		void user_stats_sub_path(std::string const&,std::string const&,std::vector<std::string,std::allocator<std::string>>);
		void user_stats_sub_path(std::string const&,std::string const&,std::vector<std::string,std::allocator<std::string>>);
		void ~user_statistics_service();
		void ~user_statistics_service();
		void function<void ();
		void function<void ();
		void remove_statistic_changed_handler(int);
		void remove_statistic_changed_handler(int);
		void statistic_changed(xbox::services::user_statistics::statistic_change_event_args const&);
		void subscribe_to_statistic_change(std::string const&,std::string const&,std::string const&);
		void subscribe_to_statistic_change(std::string const&,std::string const&,std::string const&);
		void unsubscribe_from_statistic_change(std::shared_ptr<xbox::services::user_statistics::statistic_change_subscription>);
		void unsubscribe_from_statistic_change(std::shared_ptr<xbox::services::user_statistics::statistic_change_subscription>);
		void user_statistics_service_impl(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void user_statistics_service_impl(std::shared_ptr<xbox::services::real_time_activity::real_time_activity_service>);
		void ~user_statistics_service_impl();
		void ~user_statistics_service_impl();
		void append_paging_info(web::uri_builder &,uint,uint,std::string);
		void append_paging_info(web::uri_builder &,uint,uint,std::string);
		void base64_url_encode(std::vector<uchar,std::allocator<uchar>> const&);
		void base64_url_encode(std::vector<uchar,std::allocator<uchar>> const&);
		void convert_exception_to_xbox_live_error_code(void);
		void convert_exception_to_xbox_live_error_code(void);
		void convert_timepoint_to_time(std::chrono::time_point<std::chrono::_V2::system_clock,std::chrono::duration<long long,std::ratio<1ll,1000000000ll>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void multiplayer_session>>(pplx::task<xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>(pplx::task<xbox::services::xbox_live_result<std::string>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void string>>>(pplx::task<xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void allocator<uchar>>>(pplx::task<xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_broadcast>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>> const&);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void contextual_search_configured_stat>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>> const&);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void quality_of_service_server>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_event>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_activity_details>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void multiplayer_session_states>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void presence_record>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		void multiple_permissions_check_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>> const&);
		xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		xbox_user_profile>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void tournament_stage>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void user_statistics_result>>>(pplx::task<xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<uint>(pplx::task<xbox::services::xbox_live_result<uint>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void create_exception_free_task<void>(pplx::task<xbox::services::xbox_live_result<void>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievement>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievement>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void achievements_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void allocation_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void cluster_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void game_server_ticket_status>(pplx::task<xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void leaderboard_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void create_match_ticket_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void hopper_statistics_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void match_ticket_details_response>(pplx::task<xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void presence_record>(pplx::task<xbox::services::xbox_live_result<xbox::services::presence::presence_record>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		void permission_check_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>> const&);
		xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		xbox_social_relationship_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>> const&);
		xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		xbox_user_profile>(pplx::task<xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void token_and_signature_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_metadata_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_blob_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void title_storage_quota>(pplx::task<xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_instances>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void tournament_teams>(pplx::task<xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void user_statistics_result>(pplx::task<xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>> const&);
		void create_guid(bool);
		void create_guid(bool);
		void create_xboxlive_endpoint(std::string const&,std::shared_ptr<xbox::services::xbox_live_app_config> const&,std::string const&);
		void create_xboxlive_endpoint(std::string const&,std::shared_ptr<xbox::services::xbox_live_app_config> const&,std::string const&);
		void escape_special_characters(std::string const&);
		void extract_header_value(web::http::http_headers const&,std::string const&,std::string const&);
		void extract_header_value(web::http::http_headers const&,std::string const&,std::string const&);
		void extract_json_as_array(web::json::value const&,std::error_code &);
		void extract_json_as_array(web::json::value const&,std::error_code &);
		void extract_json_as_string(web::json::value const&,std::error_code &);
		void extract_json_as_string(web::json::value const&,std::error_code &);
		void extract_json_bool(web::json::value const&,std::string const&,bool,bool);
		void extract_json_bool(web::json::value const&,std::string const&,bool,bool);
		void extract_json_bool(web::json::value const&,std::string const&,std::error_code &,bool,bool);
		void extract_json_bool(web::json::value const&,std::string const&,std::error_code &,bool,bool);
		void extract_json_double(web::json::value const&,std::string const&,bool,double);
		void extract_json_double(web::json::value const&,std::string const&,std::error_code &,bool,double);
		void extract_json_double(web::json::value const&,std::string const&,std::error_code &,bool,double);
		void extract_json_field(web::json::value const&,std::string const&,bool);
		void extract_json_field(web::json::value const&,std::string const&,bool);
		void extract_json_field(web::json::value const&,std::string const&,std::error_code &,bool);
		void extract_json_field(web::json::value const&,std::string const&,std::error_code &,bool);
		void extract_json_int(web::json::value const&,std::string const&,bool,int);
		void extract_json_int(web::json::value const&,std::string const&,bool,int);
		void extract_json_int(web::json::value const&,std::string const&,std::error_code &,bool,int);
		void extract_json_int(web::json::value const&,std::string const&,std::error_code &,bool,int);
		void achievement_media_asset> (*);
		void achievement_media_asset> (*);
		void achievement_progression> (*);
		void achievement_progression> (*);
		void extract_json_string(web::json::value const&,std::string const&,bool,std::string const&);
		void extract_json_string(web::json::value const&,std::string const&,bool,std::string const&);
		void extract_json_string(web::json::value const&,std::string const&,std::error_code &,bool,std::string const&);
		void extract_json_string(web::json::value const&,std::string const&,std::error_code &,bool,std::string const&);
		void extract_json_string_timespan_in_seconds(web::json::value const&,std::string const&,bool);
		void extract_json_string_timespan_in_seconds(web::json::value const&,std::string const&,bool);
		void extract_json_string_timespan_in_seconds(web::json::value const&,std::string const&,std::error_code &,bool);
		void extract_json_string_to_uint64(web::json::value const&,std::string const&,bool,ulong long);
		void extract_json_string_to_uint64(web::json::value const&,std::string const&,std::error_code &,bool,ulong long);
		void extract_json_string_to_uint64(web::json::value const&,std::string const&,std::error_code &,bool,ulong long);
		void extract_json_time(web::json::value const&,std::string const&,bool);
		void extract_json_time(web::json::value const&,std::string const&,std::error_code &,bool);
		void extract_json_time(web::json::value const&,std::string const&,std::error_code &,bool);
		void extract_json_uint52(web::json::value const&,std::string const&,bool,ulong long);
		void extract_json_uint52(web::json::value const&,std::string const&,bool,ulong long);
		void extract_json_uint52(web::json::value const&,std::string const&,std::error_code &,bool,ulong long);
		void extract_json_uint52(web::json::value const&,std::string const&,std::error_code &,bool,ulong long);
		void string> (*);
		void string> (*);
		xbox_live_result<int> (*);
		xbox_live_result<int> (*);
		void achievement> (*);
		void achievement> (*);
		void achievement_media_asset> (*);
		void achievement_media_asset> (*);
		void achievement_requirement> (*);
		void achievement_requirement> (*);
		void achievement_reward> (*);
		void achievement_reward> (*);
		void achievement_title_association> (*);
		void achievement_title_association> (*);
		void contextual_config_result> (*);
		void contextual_config_result> (*);
		void contextual_config_result_metadata> (*);
		void contextual_config_result_metadata> (*);
		void contextual_config_result_set> (*);
		void contextual_config_result_set> (*);
		void contextual_config_result_set_pair> (*);
		void contextual_config_result_set_pair> (*);
		void contextual_config_result_stat> (*);
		void contextual_config_result_stat> (*);
		void contextual_search_broadcast> (*);
		void contextual_search_broadcast> (*);
		void game_server_image_set> (*);
		void game_server_image_set> (*);
		void game_server_port_mapping> (*);
		void game_server_port_mapping> (*);
		void game_variant> (*);
		void game_variant> (*);
		void game_variant_schema> (*);
		void game_variant_schema> (*);
		void quality_of_service_server> (*);
		void quality_of_service_server> (*);
		void multiplayer_activity_details> (*);
		void multiplayer_activity_details> (*);
		void multiplayer_session_states> (*);
		void multiplayer_session_states> (*);
		void presence_device_record> (*);
		void presence_device_record> (*);
		void presence_record> (*);
		void presence_record> (*);
		void presence_title_record> (*);
		void presence_title_record> (*);
		void avoid_list_item> (*);
		void avoid_list_item> (*);
		void multiple_permissions_check_result> (*);
		void multiple_permissions_check_result> (*);
		void permission_check_result> (*);
		void permission_check_result> (*);
		void permission_deny_reason> (*);
		void permission_deny_reason> (*);
		xbox_social_relationship> (*);
		xbox_social_relationship> (*);
		xbox_user_profile> (*);
		xbox_user_profile> (*);
		void verify_string_result> (*);
		void verify_string_result> (*);
		void title_storage_blob_metadata> (*);
		void title_storage_blob_metadata> (*);
		void tournament> (*);
		void tournament> (*);
		void tournament_game> (*);
		void tournament_game> (*);
		void tournament_game_result> (*);
		void tournament_game_result> (*);
		void tournament_round> (*);
		void tournament_round> (*);
		void tournament_stage> (*);
		void tournament_stage> (*);
		void tournament_team> (*);
		void tournament_team> (*);
		void service_configuration_statistic> (*);
		void service_configuration_statistic> (*);
		void statistic> (*);
		void statistic> (*);
		void user_statistics_result> (*);
		void user_statistics_result> (*);
		void quality_of_service_server> (*);
		void quality_of_service_server> (*);
		void multiplayer_activity_details> (*);
		void multiplayer_activity_details> (*);
		void multiplayer_session_states> (*);
		void multiplayer_session_states> (*);
		void presence_record> (*);
		void presence_record> (*);
		xbox_user_profile> (*);
		xbox_user_profile> (*);
		void verify_string_result> (*);
		void verify_string_result> (*);
		void tournament_stage> (*);
		void tournament_stage> (*);
		void user_statistics_result> (*);
		void user_statistics_result> (*);
		void generate_locales(void);
		void generate_locales(void);
		void multiplayer_session>>(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>,std::shared_ptr const&<xbox::services::http_call_response>);
		void multiplayer_session>>(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>,std::shared_ptr const&<xbox::services::http_call_response>);
		void string>>>(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void string>>>(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void contextual_search_broadcast>>>(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void contextual_search_broadcast>>>(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void contextual_search_configured_stat>>>(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void contextual_search_configured_stat>>>(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void quality_of_service_server>>>(xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void quality_of_service_server>>>(xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_activity_details>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_activity_details>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_session_states>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_session_states>>>(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void presence_record>>>(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void presence_record>>>(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiple_permissions_check_result>>>(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiple_permissions_check_result>>>(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		xbox_user_profile>>>(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		xbox_user_profile>>>(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void verify_string_result>>>(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void verify_string_result>>>(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void tournament_stage>>>(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void tournament_stage>>>(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void user_statistics_result>>>(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void user_statistics_result>>>(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>,std::shared_ptr<xbox::services::http_call_response> const&);
		void achievements_result>(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void achievements_result>(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void allocation_result>(xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void allocation_result>(xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void cluster_result>(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void cluster_result>(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void game_server_metadata_result>(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void game_server_metadata_result>(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void game_server_ticket_status>(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>,std::shared_ptr<xbox::services::http_call_response> const&);
		void game_server_ticket_status>(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>,std::shared_ptr<xbox::services::http_call_response> const&);
		void leaderboard_result>(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void leaderboard_result>(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void create_match_ticket_response>(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>,std::shared_ptr<xbox::services::http_call_response> const&);
		void create_match_ticket_response>(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>,std::shared_ptr<xbox::services::http_call_response> const&);
		void hopper_statistics_response>(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>,std::shared_ptr<xbox::services::http_call_response> const&);
		void hopper_statistics_response>(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>,std::shared_ptr<xbox::services::http_call_response> const&);
		void match_ticket_details_response>(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>,std::shared_ptr<xbox::services::http_call_response> const&);
		void match_ticket_details_response>(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_invite>(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_invite>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_invite>(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_invite>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_session>(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::http_call_response> const&);
		void multiplayer_session>(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_session>,std::shared_ptr<xbox::services::http_call_response> const&);
		void presence_record>(xbox::services::xbox_live_result<xbox::services::presence::presence_record>,std::shared_ptr<xbox::services::http_call_response> const&);
		void presence_record>(xbox::services::xbox_live_result<xbox::services::presence::presence_record>,std::shared_ptr<xbox::services::http_call_response> const&);
		void permission_check_result>(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void permission_check_result>(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		xbox_social_relationship_result>(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		xbox_social_relationship_result>(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void title_storage_blob_metadata_result>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void title_storage_blob_metadata_result>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void title_storage_quota>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>,std::shared_ptr<xbox::services::http_call_response> const&);
		void title_storage_quota>(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>,std::shared_ptr<xbox::services::http_call_response> const&);
		void tournament_instances>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>,std::shared_ptr<xbox::services::http_call_response> const&);
		void tournament_instances>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>,std::shared_ptr<xbox::services::http_call_response> const&);
		void tournament_teams>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>,std::shared_ptr<xbox::services::http_call_response> const&);
		void tournament_teams>(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>,std::shared_ptr<xbox::services::http_call_response> const&);
		void user_statistics_result>(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void user_statistics_result>(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>,std::shared_ptr<xbox::services::http_call_response> const&);
		void get_locale_list(void);
		void get_locale_list(void);
		void get_locales(void);
		void get_query_from_params(std::vector<std::string,std::allocator<std::string>> const&);
		void get_query_from_params(std::vector<std::string,std::allocator<std::string>> const&);
		void headers_to_string(web::http::http_headers const&);
		void headers_to_string(web::http::http_headers const&);
		void interlocked_increment(long volatile&);
		void interlocked_increment(long volatile&);
		void json_get_value_from_string(std::string const&);
		void json_int_extractor(web::json::value const&);
		void json_int_serializer(int);
		void json_int_serializer(int);
		void json_string_extractor(web::json::value const&);
		void json_string_serializer(std::string const&);
		void json_string_serializer(std::string const&);
		void log_output(std::string);
		void log_output(std::string);
		void log_output_string(std::string const&);
		void log_output_string(std::string const&);
		void path_and_query_from_uri(web::uri const&);
		void path_and_query_from_uri(web::uri const&);
		void read_file_to_string(std::string const&);
		void replace_sub_string(std::string const&,std::string const&,std::string const&);
		void replace_sub_string(std::string const&,std::string const&,std::string const&);
		void serialize_uint52_to_json(ulong long);
		void serialize_uint52_to_json(ulong long);
		void set_locales(std::string const&);
		void set_locales(std::string const&);
		void string_split(std::string const&,char);
		void string_split(std::string const&,char);
		void string_to_headers(std::string const&);
		void string_to_headers(std::string const&);
		void try_get_master_scid(void);
		void try_get_master_scid(void);
		void try_get_master_title_id(void);
		void try_get_master_title_id(void);
		void log_output(std::string const&);
		void log_output(std::string const&);
		void close(void);
		void close(void);
		void ensure_connected(void);
		void ensure_connected(void);
		void on_close(ushort,std::string);
		void on_close(ushort,std::string);
		void send(std::string const&);
		void send(std::string const&);
		void function<void ();
		void function<void ();
		void function<void ();
		void function<void ();
		void set_state_connected(void);
		void set_state_connecting(void);
		void set_state_disconnected(void);
		void set_state_helper(xbox::services::web_socket_connection_state);
		void set_state_helper(xbox::services::web_socket_connection_state);
		void state(void);
		void web_socket_connection(std::shared_ptr<xbox::services::user_context>,web::uri,std::string,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void web_socket_connection(std::shared_ptr<xbox::services::user_context>,web::uri,std::string,std::shared_ptr<xbox::services::xbox_live_context_settings>);
		void ~web_socket_connection();
		void ~web_socket_connection();
		void write_local_storage_helper(std::string const&,std::string const&);
		void write_local_storage_helper(std::string const&,std::string const&);
		void get_request(web::http::http_request,pplx::cancellation_token);
		void get_request(web::http::http_request,pplx::cancellation_token);
		xbox_http_client_impl(web::uri,web::http::client::http_client_config);
		xbox_http_client_impl(web::uri,web::http::client::http_client_config);
		void _Override_scid_for_multiplayer(void);
		void _Override_scid_for_multiplayer(void);
		void _Override_title_id_for_multiplayer(void);
		void _Override_title_id_for_multiplayer(void);
		void environment(void);
		void environment(void);
		void get_app_config_singleton(void);
		void get_proxy_string(void);
		void get_proxy_string(void);
		void proxy(void);
		void proxy(void);
		void read(void);
		void read(void);
		void sandbox(void);
		void sandbox(void);
		void scid(void);
		void scid(void);
		void set_environment(std::string);
		void set_environment(std::string);
		void set_proxy(web::uri const&);
		void set_proxy(web::uri const&);
		void set_sandbox(std::string);
		void set_sandbox(std::string);
		void title_id(void);
		void title_id(void);
		xbox_live_app_config(void);
		xbox_live_app_config(void);
		void ~xbox_live_app_config();
		void ~xbox_live_app_config();
		void _Set_caller_context(std::string const&);
		void _Set_caller_context(std::string const&);
		void achievement_service(void);
		void achievement_service(void);
		void application_config(void);
		void application_config(void);
		void contextual_search_service(void);
		void events_service(void);
		void events_service(void);
		void game_server_platform_service(void);
		void leaderboard_service(void);
		void matchmaking_service(void);
		void matchmaking_service(void);
		void multiplayer_service(void);
		void multiplayer_service(void);
		void presence_service(void);
		void presence_service(void);
		void privacy_service(void);
		void privacy_service(void);
		void profile_service(void);
		void profile_service(void);
		void real_time_activity_service(void);
		void real_time_activity_service(void);
		void reputation_service(void);
		void settings(void);
		void settings(void);
		void social_service(void);
		void social_service(void);
		void string_service(void);
		void title_storage_service(void);
		void tournament_service(void);
		void user(void);
		void user(void);
		void user_statistics_service(void);
		void user_statistics_service(void);
		xbox_live_context(std::shared_ptr<xbox::services::system::xbox_live_user>);
		xbox_live_context(std::shared_ptr<xbox::services::system::xbox_live_user>);
		xbox_live_user_id(void);
		xbox_live_user_id(void);
		void achievement_service(void);
		void achievement_service(void);
		void application_config(void);
		void application_config(void);
		void contextual_search_service(void);
		void contextual_search_service(void);
		void events_service(void);
		void events_service(void);
		void game_server_platform_service(void);
		void game_server_platform_service(void);
		void init(void);
		void init(void);
		void leaderboard_service(void);
		void leaderboard_service(void);
		void matchmaking_service(void);
		void matchmaking_service(void);
		void multiplayer_service(void);
		void multiplayer_service(void);
		void presence_service(void);
		void presence_service(void);
		void privacy_service(void);
		void privacy_service(void);
		void profile_service(void);
		void profile_service(void);
		void real_time_activity_service(void);
		void real_time_activity_service(void);
		void reputation_service(void);
		void reputation_service(void);
		void set_caller_context(std::string const&);
		void set_caller_context(std::string const&);
		void settings(void);
		void settings(void);
		void social_service(void);
		void social_service(void);
		void string_service(void);
		void string_service(void);
		void title_storage_service(void);
		void title_storage_service(void);
		void tournament_service(void);
		void tournament_service(void);
		void user(void);
		void user(void);
		void user_context(void);
		void user_statistics_service(void);
		void user_statistics_service(void);
		xbox_live_context_impl(std::shared_ptr<xbox::services::system::xbox_live_user>);
		xbox_live_context_impl(std::shared_ptr<xbox::services::system::xbox_live_user>);
		xbox_live_user_id(void);
		xbox_live_user_id(void);
		void ~xbox_live_context_impl();
		void ~xbox_live_context_impl();
		void _Is_at_diagnostics_trace_level(xbox::services::xbox_services_diagnostics_trace_level);
		void _Is_disable_asserts_for_xbox_live_throttling_in_dev_sandboxes(void);
		void _Is_disable_asserts_for_xbox_live_throttling_in_dev_sandboxes(void);
		void function<void ();
		void diagnostics_trace_level(void);
		void disable_asserts_for_xbox_live_throttling_in_dev_sandboxes(xbox::services::xbox_live_context_throttle_setting);
		void enable_service_call_routed_events(void);
		void http_retry_delay(void);
		void http_retry_delay(void);
		void http_timeout(void);
		void http_timeout_window(void);
		void http_timeout_window(void);
		void long_http_timeout(void);
		void long_http_timeout(void);
		void remove_service_call_routed_handler(int);
		void set_diagnostics_trace_level(xbox::services::xbox_services_diagnostics_trace_level);
		void set_enable_service_call_routed_events(bool);
		void set_http_retry_delay(std::chrono::duration<long long,std::ratio<1ll,1ll>>);
		void set_http_timeout(std::chrono::duration<long long,std::ratio<1ll,1ll>>);
		void set_http_timeout_window(std::chrono::duration<long long,std::ratio<1ll,1ll>>);
		void set_locale(std::string &);
		void set_locale(std::string &);
		void set_long_http_timeout(std::chrono::duration<long long,std::ratio<1ll,1ll>>);
		void set_use_core_dispatcher_for_event_routing(bool);
		void set_websocket_timeout_window(std::chrono::duration<long long,std::ratio<1ll,1ll>>);
		void use_core_dispatcher_for_event_routing(void);
		void websocket_timeout_window(void);
		void websocket_timeout_window(void);
		xbox_live_context_settings(void);
		xbox_live_context_settings(void);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::http_call_response>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::shared_ptr<xbox::services::multiplayer::multiplayer_session>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::string> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::string> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::string>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::string>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<std::string,std::allocator<std::string>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<uchar,std::allocator<uchar>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_broadcast,std::allocator<xbox::services::contextual_search::contextual_search_broadcast>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::contextual_search::contextual_search_configured_stat,std::allocator<xbox::services::contextual_search::contextual_search_configured_stat>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::game_server_platform::quality_of_service_server,std::allocator<xbox::services::game_server_platform::quality_of_service_server>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::manager::multiplayer_event,std::allocator<xbox::services::multiplayer::manager::multiplayer_event>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_activity_details,std::allocator<xbox::services::multiplayer::multiplayer_activity_details>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::multiplayer::multiplayer_session_states,std::allocator<xbox::services::multiplayer::multiplayer_session_states>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::presence::presence_record,std::allocator<xbox::services::presence::presence_record>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::privacy::multiple_permissions_check_result,std::allocator<xbox::services::privacy::multiple_permissions_check_result>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::social::xbox_user_profile,std::allocator<xbox::services::social::xbox_user_profile>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::system::verify_string_result,std::allocator<xbox::services::system::verify_string_result>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::tournaments::tournament_stage,std::allocator<xbox::services::tournaments::tournament_stage>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>> const&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>&&);
		xbox_live_result(xbox::services::xbox_live_result<std::vector<xbox::services::user_statistics::user_statistics_result,std::allocator<xbox::services::user_statistics::user_statistics_result>>>&&);
		void ~xbox_live_result();
		void ~xbox_live_result();
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::achievements::achievement> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::achievements::achievement> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::achievements::achievements_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::allocation_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::cluster_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_metadata_result>&&);
		void ~xbox_live_result();
		void ~xbox_live_result();
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::game_server_platform::game_server_ticket_status>&&);
		xbox_live_result(void);
		xbox_live_result(void);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::leaderboard::leaderboard_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::create_match_ticket_response>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::hopper_statistics_response>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::matchmaking::match_ticket_details_response>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_invite> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_invite> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_invite>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_invite>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_session> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_session> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_session>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::multiplayer::multiplayer_session>&&);
		void set_payload(xbox::services::presence::presence_record);
		void set_payload(xbox::services::presence::presence_record);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::presence::presence_record> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::presence::presence_record> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::presence::presence_record>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::presence::presence_record>&&);
		void ~xbox_live_result();
		void ~xbox_live_result();
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::privacy::permission_check_result>&&);
		void ~xbox_live_result();
		void ~xbox_live_result();
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_social_relationship_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::social::xbox_user_profile>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::sign_in_and_auth_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_and_signature_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::token_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::verify_string_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::system::verify_string_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_metadata_result>&&);
		void operator=(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result> const&);
		void operator=(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_blob_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::title_storage::title_storage_quota>&&);
		void ~xbox_live_result();
		void ~xbox_live_result();
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_instances>&&);
		void ~xbox_live_result();
		void ~xbox_live_result();
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::tournaments::tournament_teams>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_context_auth_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_context_auth_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_context_auth_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_context_auth_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result> const&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>&&);
		xbox_live_result(xbox::services::xbox_live_result<xbox::services::user_statistics::user_statistics_result>&&);
		xbox_service_call_routed_event_args(xbox::services::xbox_service_call_routed_event_args const&);
		xbox_service_call_routed_event_args(xbox::services::xbox_service_call_routed_event_args const&);
		void ~xbox_service_call_routed_event_args();
		void ~xbox_service_call_routed_event_args();
		xbox_services_error_code_category(void);
		xbox_services_error_code_category(void);
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~xbox_services_error_code_category_impl();
		void ~xbox_services_error_code_category_impl();
		xbox_services_error_condition_category(void);
		xbox_services_error_condition_category(void);
		void equivalent(std::error_code const&,int);
		void equivalent(std::error_code const&,int);
		void message(int);
		void message(int);
		void name(void);
		void name(void);
		void ~xbox_services_error_condition_category_impl();
		void ~xbox_services_error_condition_category_impl();
		void close(void);
		void close(void);
		void connect(std::shared_ptr<xbox::services::user_context> const&,web::uri const&,std::string const&);
		void connect(std::shared_ptr<xbox::services::user_context> const&,web::uri const&,std::string const&);
		void send(std::string const&);
		void send(std::string const&);
		void fu